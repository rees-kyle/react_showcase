"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[572],{6572:(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var o=n(579);const r=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("h1",{className:"underline",children:"Redux"}),(0,o.jsx)("p",{children:"Redux is a popular state management library for JavaScript applications, commonly used with React. It helps manage and centralize the state of an application in a predictable way."})]}),s=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Core Concepts"}),(0,o.jsx)("h3",{children:"Store"}),(0,o.jsx)("p",{children:"The single source of truth that holds the entire state of the application."}),(0,o.jsx)("h3",{children:"Actions"}),(0,o.jsx)("p",{children:"Plain JavaScript objects that represent an intention to change the state. They must have a 'type' property and optionally include a payload with additional data."}),(0,o.jsx)("h3",{children:"Reducers"}),(0,o.jsx)("p",{children:"Functions that specify how the state changes in response to actions."}),(0,o.jsx)("h3",{children:"Dispatch"}),(0,o.jsx)("p",{children:"A method used to send an action to the Redux store. The store will then use a reducer to update the state based on the action."}),(0,o.jsx)("h3",{children:"Selectors"}),(0,o.jsx)("p",{children:"Functions that retrieve specific pieces of state from the store."})]}),c=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Key Concepts"}),(0,o.jsx)("h3",{children:"Immutability"}),(0,o.jsx)("p",{children:"The state is never mutated directly. Instead, a new copy of the state is returned every time it is updated."}),(0,o.jsx)("h3",{children:"Single Source of Truth"}),(0,o.jsx)("p",{children:"The entire state of the application is kept in one central place (the store), which simplifies debugging and tracing changes."}),(0,o.jsx)("h3",{children:"Predictability"}),(0,o.jsx)("p",{children:"Because state changes are centralized and handled by reducers, the flow of data is predictable."})]});n(5043);var i=n(3003);n(3923);const a=()=>{const e=(0,i.d4)((e=>e.counter.count)),t=(0,i.wA)();return console.log("Component Rendered with count:",e),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Example of Redux Flow"}),(0,o.jsx)("p",{children:"The example sets up a Redux store to manage a counter state, allowing a React component to dispatch 'INCREMENT' and 'DECREMENT' actions that update the state. The component uses 'useSelector' to get the count value and re-renders when the state changes."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// actions.js\nexport const increment = () => ({\n  type: 'INCREMENT',\n});\n\nexport const decrement = () => ({\n  type: 'DECREMENT',\n});\n"})}),(0,o.jsx)("br",{}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// reducer.js\nconst initialState = { count: 0 };\n\nconst counterReducer = (state = initialState, action) => {\n  console.log('Reducer called with state:', state, 'and action:', action);\n\n  switch (action.type) {\n    case 'INCREMENT':\n      console.log('Incrementing state to:', { count: state.count + 1 });\n      return { count: state.count + 1 };\n    case 'DECREMENT':\n      console.log('Decrementing state to:', { count: state.count - 1 });\n      return { count: state.count - 1 };\n    default:\n      console.log('Returning current state:', state);\n      return state;\n  }\n};\n\nexport default counterReducer;\n"})}),(0,o.jsx)("br",{}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// store.js\nimport { createStore, combineReducers } from 'redux';\nimport counterReducer from './reducer';\n\nconst rootReducer = combineReducers({ counter: counterReducer });\n\nconst store = createStore(rootReducer);\n\nconsole.log('Initial Redux state:', store.getState());\n\nstore.subscribe(() => console.log('Updated Redux state:', store.getState()));\n\nexport default store;\n"})}),(0,o.jsx)("br",{}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ProviderComponent } from './components/hooks/usecontext/ProviderComponent';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ProviderComponent>\n        <App />\n      </ProviderComponent>\n    </Provider>\n  </React.StrictMode>\n);\n\nreportWebVitals();\n"})}),(0,o.jsx)("br",{}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// Example.js\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment, decrement } from './../../../redux/actions';\nimport './../../../button.css';\n\nconst Example = () => {\n  const count = useSelector((state) => state.counter.count);\n  const dispatch = useDispatch();\n\n  console.log('Component Rendered with count:', count);\n\n  return (\n    <div>\n      <button type=\"button\" onClick={() => { \n        console.log('Dispatching INCREMENT action');\n        dispatch(increment());\n      }}>\n        Increment\n      </button>\n      <h1 className=\"output\">Counter: {count}</h1>\n      <br/>\n      <button type=\"button\" onClick={() => { \n        console.log('Dispatching DECREMENT action');\n        dispatch(decrement());\n      }}>\n        Decrement\n      </button>\n    </div>\n  );\n};\n\nexport default Example;\n"})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsx)("button",{type:"button",onClick:()=>{console.log("Dispatching INCREMENT action"),t({type:"INCREMENT"})},children:"Increment"}),(0,o.jsxs)("h1",{className:"output",children:["Counter: ",e]}),(0,o.jsx)("br",{}),(0,o.jsx)("button",{type:"button",onClick:()=>{console.log("Dispatching DECREMENT action"),t({type:"DECREMENT"})},children:"Decrement"}),(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."})]})},d=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Summary"}),(0,o.jsx)("p",{children:"Redux can be used to manage the state of different components, such as form inputs, UI states, or fetched data from APIs, all in one place."})]}),l=()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r,{}),(0,o.jsx)(s,{}),(0,o.jsx)(c,{}),(0,o.jsx)(a,{}),(0,o.jsx)(d,{})]})},3923:()=>{}}]);
//# sourceMappingURL=572.b8dd4894.chunk.js.map