"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[349],{1349:(e,t,n)=>{n.r(t),n.d(t,{default:()=>u});var s=n(579);const c=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("h1",{className:"underline",children:"useState and useEffect"}),(0,s.jsx)("p",{children:"Hooks like 'useState' and 'useEffect' are fundamental to React's functional components."})]});var a=n(5043);n(3923);const o=()=>{const[e,t]=(0,a.useState)(0);return(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"useState"}),(0,s.jsx)("p",{children:"The useState hook allows you to add state to a functional component. Here's a basic example:"}),(0,s.jsx)("h3",{children:"Code:"}),(0,s.jsx)("pre",{children:(0,s.jsx)("code",{children:"import React, { useState } from 'react';\nimport './../../../button.css';\n\nconst UseState = () => {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <h1 className=\"output\">You clicked {count} times</h1>\n            <button type=\"button\" onClick={() => setCount(count + 1)}>\n                Click me\n            </button>\n        </div>\n    );\n}\n\nexport default UseState;\n"})}),(0,s.jsx)("h3",{children:"Output:"}),(0,s.jsxs)("h1",{className:"output",children:["You clicked ",e," times"]}),(0,s.jsx)("button",{type:"button",onClick:()=>t(e+1),children:"Click me"}),(0,s.jsx)("p",{children:"'useState' takes the initial state value (e.g., 0 for the count) and returns an array with two elements: the current state and a function to update that state."})]})},r=()=>{const[e,t]=(0,a.useState)(0);return(0,a.useEffect)((()=>{const e=setInterval((()=>{t((e=>e+1))}),1e3);return()=>clearInterval(e)}),[]),(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"useEffect"}),(0,s.jsx)("p",{children:"The useEffect hook allows you to perform side effects in function components. It's commonly used for data fetching, subscriptions, or manually changing the DOM."}),(0,s.jsx)("h3",{children:"Code:"}),(0,s.jsx)("pre",{children:(0,s.jsx)("code",{children:"import React, { useEffect, useState } from 'react';\n\nconst UseEffect = () => {\n    const [seconds, setSeconds] = useState(0);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setSeconds(seconds => seconds + 1);\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div>\n            <h1 className=\"output\">{seconds} seconds have passed.</h1>\n        </div>\n    );\n}\n\nexport default UseState;\n"})}),(0,s.jsx)("h3",{children:"Output:"}),(0,s.jsxs)("h1",{className:"output",children:[e," seconds have passed."]}),(0,s.jsx)("p",{children:"'useEffect' takes two arguments: a function containing the side-effect logic and an optional dependency array. If the dependency array is empty, the effect runs only once, after the initial render. If you provide dependencies (state or props), it runs whenever those values change."})]})},u=()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(c,{}),(0,s.jsx)(o,{}),(0,s.jsx)(r,{})]})},3923:()=>{}}]);
//# sourceMappingURL=349.6cfccf23.chunk.js.map