"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[431],{4431:(e,n,t)=>{t.r(n),t.d(n,{default:()=>u});var o=t(5043),s=(t(3923),t(579));class r extends o.Component{constructor(e){super(e),this.handleIncrement=()=>{this.setState((e=>({count:e.count+1})))},this.state={count:0},console.log("Constructor: Component is being created")}static getDerivedStateFromProps(e,n){return console.log("getDerivedStateFromProps: Syncing state with props if needed"),null}componentDidMount(){console.log("componentDidMount: Component has been mounted to the DOM")}shouldComponentUpdate(e,n){return console.log("shouldComponentUpdate: Deciding whether to re-render"),!0}getSnapshotBeforeUpdate(e,n){return console.log("getSnapshotBeforeUpdate: Capturing snapshot before update"),null}componentDidUpdate(e,n,t){console.log("componentDidUpdate: Component has been updated")}componentWillUnmount(){console.log("componentWillUnmount: Component is about to be removed")}render(){return console.log("Render: Rendering the UI"),(0,s.jsxs)("div",{children:[(0,s.jsx)("button",{onClick:this.handleIncrement,children:"Increment"}),(0,s.jsxs)("p",{children:["Count: ",this.state.count]})]})}}class i extends o.Component{constructor(){super(...arguments),this.state={showComponent:!0},this.toggleComponent=()=>{this.setState((e=>({showComponent:!e.showComponent})))}}render(){return(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"Lifecycle Demo"}),(0,s.jsx)("h3",{children:"Code:"}),(0,s.jsx)("pre",{children:(0,s.jsx)("code",{children:"import React, { Component } from 'react';\nimport './../../../button.css';\n\nclass Demo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n    console.log('Constructor: Component is being created');\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    console.log('getDerivedStateFromProps: Syncing state with props if needed');\n    return null;\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount: Component has been mounted to the DOM');\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('shouldComponentUpdate: Deciding whether to re-render');\n    return true;\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log('getSnapshotBeforeUpdate: Capturing snapshot before update');\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.log('componentDidUpdate: Component has been updated');\n  }\n\n  componentWillUnmount() {\n    console.log('componentWillUnmount: Component is about to be removed');\n  }\n\n  handleIncrement = () => {\n    this.setState((prevState) => ({ count: prevState.count + 1 }));\n  };\n\n  render() {\n    console.log('Render: Rendering the UI');\n    return (\n      <div>\n        <p>Count: {this.state.count}</p>\n        <button \n          onClick={this.handleIncrement} \n        >\n          Increment\n        </button>\n      </div>\n    );\n  }\n}\n\nclass ToggleDemo extends Component {\n  state = { showComponent: true };\n\n  toggleComponent = () => {\n    this.setState((prevState) => ({ showComponent: !prevState.showComponent }));\n  };\n\n  render() {\n    return (\n      <div>\n        <button \n          onClick={this.toggleComponent} \n        >\n          {this.state.showComponent ? 'Hide' : 'Show'} Lifecycle Demo\n        </button>\n        {this.state.showComponent && <Demo />}\n        <p className=\"output\">You can use the browser\u2019s developer tools (Inspect) to view console messages for this demo.</p>\n      </div>\n    );\n  }\n}\n\nexport default ToggleDemo;\n"})}),(0,s.jsx)("h3",{children:"Output:"}),(0,s.jsxs)("button",{onClick:this.toggleComponent,children:[this.state.showComponent?"Hide":"Show"," Lifecycle Demo"]}),this.state.showComponent&&(0,s.jsx)(r,{})," ",(0,s.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this demo."})]})}}const a=i,c=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("h1",{className:"underline",children:"Lifecycle Methods"}),(0,s.jsx)("p",{children:"In React class components, the component lifecycle refers to a series of methods that get invoked at different stages of a component's existence. These stages include mounting, updating, and unmounting. Here's a breakdown of the lifecycle methods in class components:"})]}),h=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"Mounting (when a component is being added to the DOM)"}),(0,s.jsx)("h3",{children:"constructor(props)"}),(0,s.jsx)("p",{children:"This method is called before the component is mounted. It\u2019s typically used to initialize state and bind methods."}),(0,s.jsx)("h3",{children:"static getDerivedStateFromProps(props, state)"}),(0,s.jsx)("p",{children:"This is invoked right before rendering, both during the initial mount and subsequent updates. It's rarely used but allows you to update state based on props."}),(0,s.jsx)("h3",{children:"render()"}),(0,s.jsx)("p",{children:"The most crucial method, responsible for rendering the UI. It returns React elements (JSX) or null."}),(0,s.jsx)("h3",{children:"componentDidMount()"}),(0,s.jsx)("p",{children:"Called after the component has been rendered into the DOM. It's often used for API calls or setting up subscriptions."})]}),d=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"Updating (when a component\u2019s props or state change)"}),(0,s.jsx)("h3",{children:"static getDerivedStateFromProps(props, state)"}),(0,s.jsx)("p",{children:"Same as in the mounting phase. Allows updating state before rendering based on changes to props."}),(0,s.jsx)("h3",{children:"shouldComponentUpdate(nextProps, nextState)"}),(0,s.jsx)("p",{children:"Determines if a component should re-render based on changes to props or state. Returns a boolean (true or false). This is used for performance optimization."}),(0,s.jsx)("h3",{children:"render()"}),(0,s.jsx)("p",{children:"Again, this is called to re-render the component when there are changes in state or props."}),(0,s.jsx)("h3",{children:"getSnapshotBeforeUpdate(prevProps, prevState)"}),(0,s.jsx)("p",{children:"Called right before the DOM is updated. It's useful if you need to capture information from the DOM (like scroll position) before the DOM changes."}),(0,s.jsx)("h3",{children:"componentDidUpdate(prevProps, prevState, snapshot)"}),(0,s.jsx)("p",{children:"Invoked after the component updates. It's commonly used for things like network requests if certain props have changed."})]}),p=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"Unmounting (when a component is being removed from the DOM)"}),(0,s.jsx)("h3",{children:"componentWillUnmount()"}),(0,s.jsx)("p",{children:"Called right before a component is removed from the DOM. This is where you perform cleanup, such as canceling network requests, removing event listeners, or clearing intervals."})]}),l=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"Error Handling (handling errors in child components)"}),(0,s.jsx)("h3",{children:"static getDerivedStateFromError(error)"}),(0,s.jsx)("p",{children:"This lifecycle method is triggered when a descendant component throws an error. It\u2019s used to update the state so the UI can display a fallback."}),(0,s.jsx)("h3",{children:"componentDidCatch(error, info)"}),(0,s.jsx)("p",{children:"This method is called after an error has been thrown, and it's where you can log the error or send it to an error tracking service."})]}),m=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"Summary"}),(0,s.jsx)("p",{children:"This lifecycle management allows you to control what happens at each phase of a component's existence, making class components powerful but sometimes verbose. In contrast, React Hooks (used in functional components) provide a more streamlined way to manage these phases."})]}),u=()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(c,{}),(0,s.jsx)(h,{}),(0,s.jsx)(d,{}),(0,s.jsx)(p,{}),(0,s.jsx)(l,{}),(0,s.jsx)(a,{}),(0,s.jsx)(m,{})]})},3923:()=>{}}]);
//# sourceMappingURL=431.d3dc8b18.chunk.js.map