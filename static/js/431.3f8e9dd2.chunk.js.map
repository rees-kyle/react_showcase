{"version":3,"file":"static/js/431.3f8e9dd2.chunk.js","mappings":"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","sources":["components/component_lifecycle/lifecycle_methods/Demo.js","components/component_lifecycle/lifecycle_methods/LifecycleMethods.js","components/component_lifecycle/lifecycle_methods/Mounting.js","components/component_lifecycle/lifecycle_methods/Updating.js","components/component_lifecycle/lifecycle_methods/Unmounting.js","components/component_lifecycle/lifecycle_methods/ErrorHandling.js","components/component_lifecycle/lifecycle_methods/Summary.js","pages/component_lifecycle/LifecycleMethodsPage.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport './../../../button.css';\r\n\r\n// Demo component that demonstrates lifecycle methods\r\nclass Demo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0 }; // Initial state for count\r\n    console.log('Constructor: Component is being created');\r\n  }\r\n\r\n  // Syncing state with props if needed\r\n  static getDerivedStateFromProps(props, state) {\r\n    console.log('getDerivedStateFromProps: Syncing state with props if needed');\r\n    return null; // No state update in this case\r\n  }\r\n\r\n  // Called after the component has been mounted to the DOM\r\n  componentDidMount() {\r\n    console.log('componentDidMount: Component has been mounted to the DOM');\r\n  }\r\n\r\n  // Decides whether the component should re-render or not\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log('shouldComponentUpdate: Deciding whether to re-render');\r\n    return true; // Always re-render\r\n  }\r\n\r\n  // Captures a snapshot of the component before it updates\r\n  getSnapshotBeforeUpdate(prevProps, prevState) {\r\n    console.log('getSnapshotBeforeUpdate: Capturing snapshot before update');\r\n    return null; // No snapshot in this case\r\n  }\r\n\r\n  // Called after the component has updated\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    console.log('componentDidUpdate: Component has been updated');\r\n  }\r\n\r\n  // Called just before the component is about to be removed\r\n  componentWillUnmount() {\r\n    console.log('componentWillUnmount: Component is about to be removed');\r\n  }\r\n\r\n  // Increment the count state when button is clicked\r\n  handleIncrement = () => {\r\n    this.setState((prevState) => ({ count: prevState.count + 1 }));\r\n  };\r\n\r\n  render() {\r\n    console.log('Render: Rendering the UI');\r\n    return (\r\n      <div>\r\n        <button \r\n          type=\"button\"\r\n          onClick={this.handleIncrement} \r\n        >\r\n          Increment\r\n        </button>\r\n        <p>Count: {this.state.count}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ToggleDemo component to toggle visibility of the Demo component\r\nclass ToggleDemo extends Component {\r\n  state = { showComponent: true }; // State to control visibility of Demo component\r\n\r\n  // Toggle the visibility of Demo component\r\n  toggleComponent = () => {\r\n    this.setState((prevState) => ({ showComponent: !prevState.showComponent }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br/>\r\n        <hr/>\r\n        <h2>Lifecycle Demo</h2>\r\n\r\n            <h3>Code:</h3>\r\n            <pre>\r\n                <code>\r\n                    {`import React, { Component } from 'react';\r\nimport './../../../button.css';\r\n\r\nclass Demo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0 };\r\n    console.log('Constructor: Component is being created');\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    console.log('getDerivedStateFromProps: Syncing state with props if needed');\r\n    return null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('componentDidMount: Component has been mounted to the DOM');\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log('shouldComponentUpdate: Deciding whether to re-render');\r\n    return true;\r\n  }\r\n\r\n  getSnapshotBeforeUpdate(prevProps, prevState) {\r\n    console.log('getSnapshotBeforeUpdate: Capturing snapshot before update');\r\n    return null;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    console.log('componentDidUpdate: Component has been updated');\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log('componentWillUnmount: Component is about to be removed');\r\n  }\r\n\r\n  handleIncrement = () => {\r\n    this.setState((prevState) => ({ count: prevState.count + 1 }));\r\n  };\r\n\r\n  render() {\r\n    console.log('Render: Rendering the UI');\r\n    return (\r\n      <div>\r\n        <p>Count: {this.state.count}</p>\r\n        <button\r\n          type=\"button\"\r\n          onClick={this.handleIncrement} \r\n        >\r\n          Increment\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass ToggleDemo extends Component {\r\n  state = { showComponent: true };\r\n\r\n  toggleComponent = () => {\r\n    this.setState((prevState) => ({ showComponent: !prevState.showComponent }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button \r\n          type=\"button\"\r\n          onClick={this.toggleComponent} \r\n        >\r\n          {this.state.showComponent ? 'Hide' : 'Show'} Lifecycle Demo\r\n        </button>\r\n        {this.state.showComponent && <Demo />}\r\n        <p className=\"output\">You can use the browser’s developer tools (Inspect) to view console messages for this demo.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToggleDemo;\r\n`}\r\n                </code>\r\n            </pre>\r\n\r\n        <h3>Output:</h3>\r\n        <button\r\n          type=\"button\"\r\n          onClick={this.toggleComponent} \r\n        >\r\n          {this.state.showComponent ? 'Hide' : 'Show'} Lifecycle Demo\r\n        </button>\r\n        {this.state.showComponent && <Demo />} {/* Conditionally render Demo */}\r\n        <h1 className=\"output\">You can use the browser’s developer tools (Inspect) to view console messages for this demo.</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToggleDemo;","const LifecycleMethods = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"underline\">Lifecycle Methods</h1>\r\n            <p>\r\n                In React class components, the component lifecycle refers to a series of methods that get invoked at different stages of a component's existence.\r\n                These stages include mounting, updating, and unmounting. Here's a breakdown of the lifecycle methods in class components:\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LifecycleMethods;","const Mounting = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Mounting (when a component is being added to the DOM)</h2>\r\n            <h3>constructor(props)</h3>\r\n            <p>\r\n                This method is called before the component is mounted. It’s typically used to initialize state and bind methods.\r\n            </p>\r\n\r\n            <h3>static getDerivedStateFromProps(props, state)</h3>\r\n            <p>\r\n                This is invoked right before rendering, both during the initial mount and subsequent updates.\r\n                It's rarely used but allows you to update state based on props.\r\n            </p>\r\n\r\n            <h3>render()</h3>\r\n            <p>\r\n                The most crucial method, responsible for rendering the UI. It returns React elements (JSX) or null.\r\n            </p>\r\n\r\n            <h3>componentDidMount()</h3>\r\n            <p>\r\n                Called after the component has been rendered into the DOM. It's often used for API calls or setting up subscriptions.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Mounting;","const Updating = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Updating (when a component’s props or state change)</h2>\r\n            <h3>static getDerivedStateFromProps(props, state)</h3>\r\n            <p>\r\n                Same as in the mounting phase. Allows updating state before rendering based on changes to props.\r\n            </p>\r\n\r\n            <h3>shouldComponentUpdate(nextProps, nextState)</h3>\r\n            <p>\r\n                Determines if a component should re-render based on changes to props or state.\r\n                Returns a boolean (true or false). This is used for performance optimization.\r\n            </p>\r\n\r\n            <h3>render()</h3>\r\n            <p>\r\n                Again, this is called to re-render the component when there are changes in state or props.\r\n            </p>\r\n\r\n            <h3>getSnapshotBeforeUpdate(prevProps, prevState)</h3>\r\n            <p>\r\n                Called right before the DOM is updated.\r\n                It's useful if you need to capture information from the DOM (like scroll position) before the DOM changes.\r\n            </p>\r\n\r\n            <h3>componentDidUpdate(prevProps, prevState, snapshot)</h3>\r\n            <p>\r\n                Invoked after the component updates. It's commonly used for things like network requests if certain props have changed.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Updating;","const Unmounting = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Unmounting (when a component is being removed from the DOM)</h2>\r\n            <h3>componentWillUnmount()</h3>\r\n            <p>\r\n                Called right before a component is removed from the DOM.\r\n                This is where you perform cleanup, such as canceling network requests, removing event listeners, or clearing intervals.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Unmounting;","const ErrorHandling = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Error Handling (handling errors in child components)</h2>\r\n            <h3>static getDerivedStateFromError(error)</h3>\r\n            <p>\r\n                This lifecycle method is triggered when a descendant component throws an error.\r\n                It’s used to update the state so the UI can display a fallback.\r\n            </p>\r\n            <h3>componentDidCatch(error, info)</h3>\r\n            <p>\r\n                This method is called after an error has been thrown,\r\n                and it's where you can log the error or send it to an error tracking service.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorHandling;","const Summary = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Summary</h2>\r\n            <p>\r\n                This lifecycle management allows you to control what happens at each phase of a component's existence,\r\n                making class components powerful but sometimes verbose.\r\n                In contrast, React Hooks (used in functional components) provide a more streamlined way to manage these phases.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Summary;","import {\r\n  Demo,\r\n  LifecycleMethods,\r\n  Mounting,\r\n  Updating,\r\n  Unmounting,\r\n  ErrorHandling,\r\n  Summary\r\n} from '../../components/component_lifecycle/lifecycle_methods';\r\n\r\nconst LifecycleMethodsPage = () => {\r\n  return (\r\n    <>\r\n      <LifecycleMethods />\r\n      <Mounting />\r\n      <Updating />\r\n      <Unmounting />\r\n      <ErrorHandling />\r\n      <Demo />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LifecycleMethodsPage;"],"names":["Demo","Component","constructor","props","super","handleIncrement","this","setState","prevState","count","state","console","log","getDerivedStateFromProps","componentDidMount","shouldComponentUpdate","nextProps","nextState","getSnapshotBeforeUpdate","prevProps","componentDidUpdate","snapshot","componentWillUnmount","render","_jsxs","children","_jsx","type","onClick","ToggleDemo","arguments","showComponent","toggleComponent","className","LifecycleMethods","Mounting","Updating","Unmounting","ErrorHandling","Summary","LifecycleMethodsPage","_Fragment"],"sourceRoot":""}