{"version":3,"file":"static/js/551.cc7e1710.chunk.js","mappings":"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","sources":["components/forms/controlled_vs_uncontrolled_components/ControlledVsUncontrolledComponents.js","components/forms/controlled_vs_uncontrolled_components/Controlled.js","components/forms/controlled_vs_uncontrolled_components/Uncontrolled.js","components/forms/controlled_vs_uncontrolled_components/ChoosingBetween.js","components/forms/controlled_vs_uncontrolled_components/Summary.js","pages/forms/ControlledVsUncontrolledComponentsPage.js","utils/sanitizeInput.js"],"sourcesContent":["const ControlledVsUncontrolledComponents = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"underline\">Controlled Vs Uncontrolled Components</h1>\r\n      <p>\r\n        In React, forms can be managed using either controlled or uncontrolled components,\r\n        each with its own advantages and use cases.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ControlledVsUncontrolledComponents;","import React, { useState } from 'react';\r\nimport './../../../button.css';\r\nimport { sanitizeInput } from '../../../utils/sanitizeInput'; // adjust path as needed\r\n\r\nfunction Controlled() {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChange = (event) => {\r\n        const rawValue = event.target.value;\r\n        const cleanValue = sanitizeInput(rawValue);\r\n        setInputValue(cleanValue);\r\n        console.log(`Input changed: ${cleanValue}`);\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log(`Form submitted with value: ${inputValue}`);\r\n        alert(`Submitted value: ${inputValue}`);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <br />\r\n            <hr />\r\n            <h2>Controlled Components</h2>\r\n            <p>\r\n                In controlled components, the form data is handled by the state of the React component.\r\n                The input elements' values are controlled by React,\r\n                meaning they rely on state to determine their values.\r\n            </p>\r\n            <p>\r\n                You bind the input field's value to a state variable \r\n                and update the state using an event handler when the input changes.\r\n            </p>\r\n\r\n            <h3>Code:</h3>\r\n            <pre>\r\n                <code>\r\n                    {`import React, { useState } from 'react';\r\nimport './../../../button.css';\r\nimport { sanitizeInput } from '../../../utils/sanitizeInput'; // adjust path as needed\r\n\r\nfunction Controlled() {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChange = (event) => {\r\n        const rawValue = event.target.value;\r\n        const cleanValue = sanitizeInput(rawValue);\r\n        setInputValue(cleanValue);\r\n        console.log(\\`Input changed: \\${cleanValue}\\`);\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log(\\`Form submitted with value: \\${inputValue}\\`);\r\n        alert(\\`Submitted value: \\${inputValue}\\`);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor=\"controlled-input\">Enter text:</label>\r\n                <input \r\n                    type=\"text\" \r\n                    id=\"controlled-input\"\r\n                    name=\"controlledInput\"\r\n                    value={inputValue}\r\n                    onChange={handleChange}\r\n                />\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Controlled;\r\n`}\r\n                </code>\r\n            </pre>\r\n\r\n            <h3>Output:</h3>\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor=\"controlled-input\">Enter text: </label>\r\n                <input \r\n                    type=\"text\" \r\n                    id=\"controlled-input\"\r\n                    name=\"controlledInput\"\r\n                    value={inputValue}\r\n                    onChange={handleChange}\r\n                />\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n            <h1 className=\"output\">\r\n                You can use the browserâ€™s developer tools (Inspect) to view console messages for this example.\r\n            </h1>\r\n\r\n            <h3>Advantages:</h3>\r\n            <p>\r\n                Easier to manage and validate form data.\r\n            </p>\r\n            <p>\r\n                Provides a single source of truth, as the input value is stored in the state.\r\n            </p>\r\n            <p>\r\n                Makes it easier to implement dynamic validation, conditional rendering, and other features.\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Controlled;","import React, { useRef } from 'react';\r\nimport './../../../button.css';\r\nimport { sanitizeInput } from '../../../utils/sanitizeInput';\r\n\r\nfunction Uncontrolled() {\r\n    const inputRef = useRef(null);\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const rawValue = inputRef.current.value;\r\n        const cleanValue = sanitizeInput(rawValue);\r\n\r\n        console.log(\"Form submitted!\");\r\n        console.log(\"Sanitized input value:\", cleanValue);\r\n        alert(`Submitted value: ${cleanValue}`);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Uncontrolled Components</h2>\r\n            <p>\r\n                In uncontrolled components, the form data is managed by the DOM itself.\r\n                You use refs to access the form elements directly, and React does not control the input's value.\r\n            </p>\r\n            <p>\r\n                You access the input values using refs instead of using state to store the input values.\r\n            </p>\r\n\r\n            <h3>Code:</h3>\r\n            <pre>\r\n                <code>\r\n                    {`import React, { useRef } from 'react';\r\nimport './../../../button.css';\r\nimport { sanitizeInput } from '../../../utils/sanitizeInput';\r\n\r\nfunction Uncontrolled() {\r\n    const inputRef = useRef(null);\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const rawValue = inputRef.current.value;\r\n        const cleanValue = sanitizeInput(rawValue);\r\n\r\n        console.log(\"Form submitted!\");\r\n        console.log(\"Sanitized input value:\", cleanValue);\r\n        alert(\\`Submitted value: \\${cleanValue}\\`);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor=\"uncontrolled-input\">Enter your input: </label>\r\n                <input\r\n                    type=\"text\"\r\n                    ref={inputRef}\r\n                    id=\"uncontrolled-input\"\r\n                    name=\"uncontrolledInput\"\r\n                />\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Uncontrolled;\r\n`}\r\n                </code>\r\n            </pre>\r\n\r\n            <h3>Output:</h3>\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor=\"uncontrolled-input\">Enter your input: </label>\r\n                <input\r\n                    type=\"text\"\r\n                    ref={inputRef}\r\n                    id=\"uncontrolled-input\"\r\n                    name=\"uncontrolledInput\"\r\n                />\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n            <h1 className=\"output\">\r\n                You can use the browserâ€™s developer tools (Inspect) to view console messages for this example.\r\n            </h1>\r\n\r\n            <h3>Advantages:</h3>\r\n            <p>\r\n                Simpler for quick forms without needing to manage state.\r\n            </p>\r\n            <p>\r\n                Can be useful for integrating with non-React libraries or existing codebases.\r\n            </p>\r\n            <p>\r\n                Less boilerplate code for forms with many inputs.\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Uncontrolled;\r\n","const ChoosingBetween = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Choosing Between Controlled and Uncontrolled Components</h2>\r\n      <h3>Controlled</h3>\r\n      <p>\r\n        Use Controlled Components when you need to manage form data closely,\r\n        such as for complex forms, validation, or when you want to have a clear flow of data.\r\n      </p>\r\n\r\n      <h3>Uncontrolled</h3>\r\n      <p>\r\n        Use Uncontrolled Components for simple forms or when you're integrating with third-party libraries,\r\n        where you don't need to manage the input state actively.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChoosingBetween;\r\n","const Summary = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Summary</h2>\r\n      <p>\r\n        In practice, many developers prefer controlled components for their consistency and ease of validation,\r\n        while uncontrolled components can be handy for less complex scenarios.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;","import {\r\n  ControlledVsUncontrolledComponents,\r\n  Controlled,\r\n  Uncontrolled,\r\n  ChoosingBetween,\r\n  Summary\r\n} from '../../components/forms/controlled_vs_uncontrolled_components';\r\n\r\nconst ControlledVsUncontrolledComponentsPage = () => {\r\n  return (\r\n    <>\r\n      <ControlledVsUncontrolledComponents />\r\n      <Controlled />\r\n      <Uncontrolled />\r\n      <ChoosingBetween />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ControlledVsUncontrolledComponentsPage;","export function sanitizeInput(value) {\r\n  return value\r\n    .replace(/&/g, \"&amp;\")\r\n    .replace(/</g, \"&lt;\")\r\n    .replace(/>/g, \"&gt;\")\r\n    .replace(/\"/g, \"&quot;\")\r\n    .replace(/'/g, \"&#x27;\");\r\n}"],"names":["ControlledVsUncontrolledComponents","_jsxs","children","_jsx","className","inputValue","setInputValue","useState","onSubmit","event","preventDefault","console","log","alert","htmlFor","type","id","name","value","onChange","rawValue","target","cleanValue","sanitizeInput","inputRef","useRef","current","ref","ChoosingBetween","Summary","ControlledVsUncontrolledComponentsPage","_Fragment","Controlled","Uncontrolled","replace"],"sourceRoot":""}