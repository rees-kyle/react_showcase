"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[973],{4973:(e,t,n)=>{n.r(t),n.d(t,{default:()=>h});var o=n(579);const r=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("h1",{className:"underline",children:"useContext"}),(0,o.jsx)("p",{children:"In React, 'useContext' is a powerful Hook for managing global state, allowing data to be shared across different components without passing props down manually at each level. Here's a breakdown of how to use it:"})]}),s=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Steps to Use 'useContext' for Global State Management"}),(0,o.jsx)("h3",{children:"1. Create a Context"}),(0,o.jsx)("p",{children:"First, you need to create a Context. This serves as a container for the global state."}),(0,o.jsx)("h4",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"import { createContext } from 'react';\n\nconst Context = createContext(null);\n\nexport default Context;\n"})}),(0,o.jsx)("h3",{children:"2. Create a Provider Component"}),(0,o.jsx)("p",{children:"A Provider component is responsible for passing the context value (global state) to the child components."}),(0,o.jsx)("h4",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"import { useState } from 'react';\nimport Context from './Context';\n\nconst ProviderComponent = ({ children }) => {\n    const [state, setState] = useState({\n        user: null,\n    });\n\n    return (\n        <Context.Provider value={{ state, setState }}>\n            {children}\n        </Context.Provider>\n    );\n};\n\nexport { ProviderComponent, Context };\n"})}),(0,o.jsx)("h3",{children:"3. Wrap Your App with the Provider"}),(0,o.jsx)("p",{children:"To make the global state available throughout your app, wrap your app in the ProviderComponent."}),(0,o.jsx)("h4",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ProviderComponent } from './components/hooks/usecontext/ProviderComponent';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <React.StrictMode>\n    <ProviderComponent>\n      <App />\n    </ProviderComponent>\n  </React.StrictMode>\n);\n\nreportWebVitals();\n"})})]});var a=n(5043),i=n(1732);n(3923);const c=()=>{const{state:e,setState:t}=(0,a.useContext)(i.o);console.log("Current Global State:",e);return(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{children:"4. Access the Global State in Components Using 'useContext'"}),(0,o.jsx)("p",{children:"Now, in any component, you can access and modify the global state using the useContext Hook."}),(0,o.jsx)("h4",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"import { useContext } from 'react';\nimport { Context } from './ProviderComponent';\nimport './../../../button.css';\n\nconst Access = () => {\n  const { state, setState } = useContext(Context);\n\n  console.log(\"Current Global State:\", state);\n\n  const loginUser = () => {\n    setState((prevState) => ({\n      ...prevState,\n      user: { name: 'John Doe', loggedIn: true },\n    }));\n  };\n\n  return (\n    <div>\n      {state.user ? (\n        <h1 className=\"output\">Welcome, {state.user.name}!</h1>\n      ) : (\n        <button type=\"button\" onClick={loginUser}>Login</button>\n      )}\n    </div>\n  );\n};\n"})}),(0,o.jsx)("h4",{children:"Output:"}),e.user?(0,o.jsxs)("h1",{className:"output",children:["Welcome, ",e.user.name,"!"]}):(0,o.jsx)("button",{type:"button",onClick:()=>{t((e=>({...e,user:{name:"John Doe",loggedIn:!0}})))},children:"Login"}),(0,o.jsx)("br",{}),(0,o.jsx)("p",{children:"You can open the browser console to check if 'Current Global State:' shows the expected state, and click 'Login' to verify the update."})]})},l=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Key Points"}),(0,o.jsx)("p",{children:"Context stores global data and makes it accessible throughout the component tree."}),(0,o.jsx)("p",{children:"The Provider distributes the context to child components, ensuring they receive the shared data."}),(0,o.jsx)("p",{children:"The useContext hook consumes the global data in any component that needs access to it."})]}),d=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Summary"}),(0,o.jsx)("p",{children:"This method eliminates the need for prop drilling and is perfect for managing application-wide state like authentication, themes, and user preferences."})]}),h=()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r,{}),(0,o.jsx)(s,{}),(0,o.jsx)(c,{}),(0,o.jsx)(l,{}),(0,o.jsx)(d,{})]})},3923:()=>{}}]);
//# sourceMappingURL=973.559d71ed.chunk.js.map