{"version":3,"file":"static/js/440.65dc0721.chunk.js","mappings":"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","sources":["components/testing/component_testing/ComponentTesting.js","components/testing/component_testing/Setup.js","components/testing/component_testing/Concepts.js","components/testing/component_testing/MyButton.js","components/testing/component_testing/Write.js","components/testing/component_testing/CommonPatterns.js","components/testing/component_testing/Utilities.js","pages/testing/ComponentTestingPage.js"],"sourcesContent":["const ComponentTesting = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"underline\">Component Testing</h1>\r\n      <p>\r\n        In React, component testing focuses on verifying that individual UI pieces behave correctly.\r\n        Tools like React Testing Library help test components by interacting with them like a user would.\r\n        It ensures that components render, handle events, and display the right output,\r\n        making the app more reliable and easier to maintain.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComponentTesting;","const Setup = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Setup</h2>\r\n      <h3>Code:</h3>\r\n      <p>\r\n        If you havenâ€™t installed it yet, add 'React Testing Library' to your project using BASH.\r\n      </p>\r\n      <pre>\r\n        <code>\r\n          {`npm install @testing-library/react`}\r\n        </code>\r\n      </pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Setup;","const Concepts = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Basic Concepts</h2>\r\n      <h3>Render</h3>\r\n      <p>\r\n        Use the 'render' function from RTL to display your component in a virtual DOM.\r\n        This allows you to interact with and test it.\r\n      </p>\r\n\r\n      <h3>Queries</h3>\r\n      <p>\r\n        RTL provides various queries (like 'getByText', 'getByRole', 'getByTestId', etc.)\r\n        to select and interact with elements within the rendered component.\r\n      </p>\r\n\r\n      <h3>User Events</h3>\r\n      <p>\r\n        You can simulate user interactions using 'userEvent',\r\n        like clicking, typing, etc.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Concepts;","// MyButton.js\r\nimport React from 'react';\r\nimport './../../../button.css';\r\n\r\nconst MyButton = ({ onClick, label, type = \"button\", disabled = false, className = \"\" }) => (\r\n  <button onClick={onClick} type={type} disabled={disabled} className={className}>\r\n    {label}\r\n  </button>\r\n);\r\n\r\nexport default MyButton;","import React from 'react';\r\nimport MyButton from './MyButton';\r\n\r\nconst Write = () => {\r\n  const handleButtonClick = () => {\r\n    alert('Button was clicked!');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Writing a Simple Test</h2>\r\n      <p>\r\n        Here's a basic test example for a button component.\r\n      </p>\r\n\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// MyButton.js\r\nimport React from 'react';\r\nimport './../../../button.css';\r\n\r\nconst MyButton = ({ onClick, label, type = \"button\", disabled = false, className = \"\" }) => (\r\n  <button onClick={onClick} type={type} disabled={disabled} className={className}>\r\n    {label}\r\n  </button>\r\n);\r\n\r\nexport default MyButton;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// button.css\r\nbutton {\r\n    position: relative;\r\n    font-weight: bold;\r\n    left: 1rem;\r\n    top: 1rem;\r\n    margin-bottom: 2rem;\r\n    padding: 1.25rem;\r\n    border: .0625rem solid green;\r\n    border-radius: .3125rem;\r\n    background-color: #000000;\r\n    color: rgb(214, 214, 214);\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    width: 10rem;\r\n    box-shadow: 0.625rem 0.625rem 0.0625rem rgba(0, 0, 0, 0.5);\r\n}\r\n\r\nbutton:hover {\r\n    outline: none;\r\n    box-shadow: 0 0 1rem rgba(255, 255, 255, 0.5);\r\n}\r\n\r\nbutton:active {\r\n    background-color: green;\r\n    box-shadow: 0.312rem 0.312rem 0.0312rem rgba(0, 0, 0, 0.5);\r\n}\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// Write.js\r\nimport React from 'react';\r\nimport MyButton from './MyButton';\r\n\r\nconst Write = () => {\r\n  const handleButtonClick = () => {\r\n    alert('Button was clicked!');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MyButton onClick={handleButtonClick} label=\"Click Me\" />\r\n    </div>\r\n  );\r\n}\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// MyButton.test.js\r\nimport { render, screen } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport MyButton from './MyButton';\r\n\r\ntest('renders button with label and responds to click', () => {\r\nconst handleClick = jest.fn();\r\n\r\nrender(<MyButton onClick={handleClick} label=\"Click Me\" />);\r\n\r\nconst button = screen.getByText(/click me/i);\r\n\r\nuserEvent.click(button);\r\n\r\n\r\nexpect(button).toBeInTheDocument();\r\nexpect(handleClick).toHaveBeenCalledTimes(1);\r\n});\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      <MyButton onClick={handleButtonClick} label=\"Click Me\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Write;","const CommonPatterns = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Common Patterns</h2>\r\n      <h3>Testing Props</h3>\r\n      <p>\r\n        Check that component props change behavior or output.\r\n      </p>\r\n\r\n      <h3>State Changes</h3>\r\n      <p>\r\n        For stateful components, confirm that they render different content based on state.\r\n      </p>\r\n\r\n      <h3>Conditional Rendering</h3>\r\n      <p>\r\n        Ensure elements render or are hidden based on conditions.\r\n      </p>\r\n\r\n      <h3>Async Testing</h3>\r\n      <p>\r\n        RTL has utilities like 'waitFor' to handle asynchronous code.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CommonPatterns;","const Utilities = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Helpful RTL Utilities</h2>\r\n      <h3>'screen'</h3>\r\n      <p>\r\n        An alternative to destructuring 'getBy' and 'findBy' from render; it provides access to all queries globally.\r\n      </p>\r\n\r\n      <h3>'waitFor'</h3>\r\n      <p>\r\n        Waits for asynchronous updates to complete in the component.\r\n      </p>\r\n\r\n      <h3>'userEvent</h3>\r\n      <p>\r\n        Mocks user actions like typing, clicking, etc.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Utilities;","import {\r\n  ComponentTesting,\r\n  Setup,\r\n  Concepts,\r\n  Write,\r\n  CommonPatterns,\r\n  Utilities\r\n} from '../../components/testing/component_testing';\r\n\r\nconst ComponentTestingPage = () => {\r\n  return (\r\n    <>\r\n      <ComponentTesting />\r\n      <Setup />\r\n      <Concepts />\r\n      <Write />\r\n      <CommonPatterns />\r\n      <Utilities />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComponentTestingPage;"],"names":["ComponentTesting","_jsxs","children","_jsx","className","Setup","Concepts","_ref","onClick","label","type","disabled","Write","MyButton","handleButtonClick","alert","CommonPatterns","Utilities","ComponentTestingPage","_Fragment"],"sourceRoot":""}