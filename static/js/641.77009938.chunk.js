"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[641],{2641:(e,n,t)=>{t.r(n),t.d(n,{default:()=>E});var s=t(5043),o=t(579);const r=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("h1",{className:"underline",children:"Basic Concepts"}),(0,o.jsx)("p",{children:"TypeScript is a programming language that adds types to JavaScript. It helps find mistakes while coding and makes projects easier to understand and manage. It turns into regular JavaScript so it can run anywhere JavaScript runs."})]}),i=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Setting Up TypeScript in a React Project"}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("p",{children:"Run the following command in BASH to install TypeScript and React type definitions."}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"npm install --save-dev @types/react @types/react-dom typescript"})}),(0,o.jsx)("p",{children:"Run the following command in BASH to generate a TypeScript config file."}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"npx tsc --init"})}),(0,o.jsx)("p",{children:"Here is a simple config file that will work well with React and TypeScript."}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:'{\n  "compilerOptions": {\n    "target": "es5",\n    "lib": ["dom", "es2015"],\n    "allowJs": true,\n    "jsx": "react-jsx",\n    "moduleResolution": "node",\n    "module": "esnext",\n    "strict": true,\n    "esModuleInterop": true,\n    "skipLibCheck": true,\n    "forceConsistentCasingInFileNames": true,\n    "noImplicitAny": true\n  },\n  "include": [\n    "src/**/*.ts",\n    "src/**/*.tsx"\n  ],\n  "exclude": [\n    "node_modules"\n  ]\n}\n'})})]}),c=e=>{let{message:n}=e;return(0,o.jsx)("h1",{className:"output",children:n})},l=e=>{let{message:n}=e;return(0,o.jsx)("h1",{className:"output",children:n})},a=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Typing Functional Components"}),(0,o.jsx)("p",{children:"When creating functional components in React with TypeScript, there are a couple of common approaches you can take to type your components properly. Here\u2019s a look at two methods you can use."})]}),h=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{children:"With React.FC"}),(0,o.jsx)("p",{children:"One approach is to use React.FC (or React.FunctionComponent), which provides some built-in typing benefits like automatically handling children props and default props."}),(0,o.jsx)("h4",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"import React from 'react';\n\nconst MyComponent: React.FC<{ message: string }> = ({ message }) => {\n  return <h1 className=\"output\">{message}</h1>;\n};\n"})}),(0,o.jsx)("h4",{children:"Output:"}),(0,o.jsx)(c,{message:"This is from the component using React.FC"}),(0,o.jsx)("br",{}),(0,o.jsx)("hr",{})]}),u=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{children:"Without React.FC"}),(0,o.jsx)("p",{children:"Another approach is to define your component\u2019s prop types separately without using React.FC. This can sometimes give you a bit more control and clarity, especially in larger projects."}),(0,o.jsx)("h4",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"import React from 'react';\n\ntype MyComponentProps = {\n  message: string;\n};\n\nconst MyComponent = ({ message }: MyComponentProps) => {\n  return <h1 className=\"output\">{message}</h1>;\n};\n"})}),(0,o.jsx)("h4",{children:"Output:"}),(0,o.jsx)(l,{message:"This is from the component without using React.FC"})]}),d=e=>{let{label:n,onClick:t}=e;return(0,o.jsx)("button",{type:"button",onClick:t,children:n})};t(3923);const p=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Typing Props"}),(0,o.jsx)("p",{children:"When working with props in React using TypeScript, you can define a separate type or interface to describe the expected shape of the props object. This helps ensure your components receive the correct data and improves code readability and maintainability."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:'// Button.tsx\ntype ButtonProps = {\nlabel: string;\nonClick: () => void;\n};\n\nconst Button: React.FC<ButtonProps> = ({ label, onClick }) => {\nreturn <button type="button" onClick={onClick}>{label}</button>;\n};\n\nexport default Button;\n'})}),(0,o.jsx)("br",{}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// TypingProps.tsx\nimport React from 'react';\nimport Button from './Button';\nimport '../../../button.css';\n\nconst TypingProps: React.FC = () => {\n  const handleClick = () => {\n    alert('Button was clicked!');\n  };\n\n  return (\n    <div>\n      <Button label=\"Click Me\" onClick={handleClick} />\n    </div>\n  );\n};\n\nexport default TypingProps;\n"})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsx)(d,{label:"Click Me",onClick:()=>{alert("Button was clicked!")}})]}),m=()=>{const[e,n]=(0,s.useState)(0),[t,r]=(0,s.useState)(null);return(0,s.useEffect)((()=>{console.log("Count updated:",e)}),[e]),(0,s.useEffect)((()=>{console.log("User updated:",t)}),[t]),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Using 'useState' with Types"}),(0,o.jsx)("p",{children:"TypeScript can automatically infer the type of state in useState, but you can also specify it yourself, especially when the state is null or needs a specific structure. This helps with clarity and type safety."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"import React, { useState, useEffect } from 'react';\nimport '../../../button.css';\n\nconst UseStateWithTypes: React.FC = () => {\n  const [count, setCount] = useState<number>(0);\n  const [user, setUser] = useState<{ name: string; age: number } | null>(null);\n\n  useEffect(() => {\n    console.log('Count updated:', count);\n  }, [count]);\n\n  useEffect(() => {\n    console.log('User updated:', user);\n  }, [user]);\n\n  return (\n    <div>\n      <h1 className=\"output\">Count: {count}</h1>\n      <button type=\"button\" onClick={() => setCount(prev => prev + 1)}>\n        Increment Count\n      </button>\n      <h1 className=\"output\">User: {user ? `${user.name}, Age: ${user.age}` : 'No user set'}</h1>\n      <button\n        type=\"button\"\n        onClick={() => setUser({ name: 'Alice', age: 30 })}\n      >\n        Set User\n      </button>\n      <br/>\n      <button\n        type=\"button\"\n        onClick={() => {\n          console.log('User cleared');\n          setUser(null);\n        }}\n      >\n        Clear User\n      </button>\n    </div>\n  );\n};\n\nexport default UseStateWithTypes;\n"})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsxs)("h1",{className:"output",children:["Count: ",e]}),(0,o.jsx)("button",{type:"button",onClick:()=>n((e=>e+1)),children:"Increment Count"}),(0,o.jsxs)("h1",{className:"output",children:["User: ",t?`${t.name}, Age: ${t.age}`:"No user set"]}),(0,o.jsx)("button",{type:"button",onClick:()=>r({name:"Alice",age:30}),children:"Set User"}),(0,o.jsx)("br",{}),(0,o.jsx)("button",{type:"button",onClick:()=>{console.log("User cleared"),r(null)},children:"Clear User"}),(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."}),(0,o.jsx)("p",{children:"This example shows how to use 'useState' with TypeScript. It demonstrates how TypeScript can infer the type of state or how you can explicitly specify types for state variables. The 'count' state is typed as a number, and the 'user' state is typed as an object or 'null'. This example also shows how to manage and update state in a React component while ensuring type safety."})]})},x=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Typing 'useEffect' Dependencies"}),(0,o.jsx)("p",{children:"When you use useEffect in React + TypeScript, dependencies are often simple values (like strings or numbers), and TypeScript infers the types automatically. But when the dependency is a more complex object (e.g., functions, custom types), explicit typing helps avoid bugs like missing dependencies or incorrect updates."})]});const g=function(){const[e,n]=(0,s.useState)(0);return(0,s.useEffect)((()=>{console.log(`Count is: ${e}`)}),[e]),(0,o.jsxs)("div",{children:[(0,o.jsx)("h3",{children:"Simple Example Without Manual Typing"}),(0,o.jsx)("h4",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:`import { useEffect, useState } from 'react';\nimport '../../../button.css';\n\nfunction SimpleExample() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log(\`Count is: ${e}\`);\n  }, [count]);\n\n  return (\n    <div>\n      <button type="button" onClick={() => setCount(count + 1)}>Increment</button>;\n    </div>\n  );\n}\n\nexport default SimpleExample;\n`})}),(0,o.jsx)("p",{children:"TypeScript knows 'count' is a number."}),(0,o.jsx)("h4",{children:"Output:"}),(0,o.jsx)("button",{type:"button",onClick:()=>n(e+1),children:"Increment"}),";",(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."})]})},f=()=>{const e={spinnerContainer:{display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center",padding:"2.5rem"},spinner:{marginLeft:"1rem",width:"2.5rem",height:"2.5rem",border:"0.25rem solid #ccc",borderTop:"0.25rem solid #007bff",borderRadius:"50%",animation:"spin 1s linear infinite"}};return s.useEffect((()=>{const e=document.styleSheets[0];e.insertRule("\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n    ",e.cssRules.length)}),[]),(0,o.jsxs)("div",{style:e.spinnerContainer,children:[(0,o.jsx)("div",{style:e.spinner}),(0,o.jsx)("p",{children:"Loading..."})]})};const j=function(){const[e,n]=(0,s.useState)(null),[t,r]=(0,s.useState)(!1),[i,c]=(0,s.useState)(!1),l=(0,s.useRef)(null),a=(0,s.useCallback)((async()=>{console.log("[fetchData] Fetching data...");try{r(!0),await new Promise((e=>setTimeout(e,2e3)));const e=await fetch("https://jsonplaceholder.typicode.com/posts/1"),t=await e.json();console.log("[fetchData] Data fetched:",t.title),n("fetched")}catch(e){console.error("[fetchData] Fetch error:",e)}finally{r(!1)}}),[]);return(0,s.useEffect)((()=>{if(!l.current||i)return;const e=new IntersectionObserver((e=>{e[0].isIntersecting&&!i&&(console.log("[IntersectionObserver] Spinner is in view, starting fetch..."),a(),c(!0))}),{threshold:.1});return e.observe(l.current),()=>e.disconnect()}),[a,i]),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h3",{children:"More Complex Example With a Typed Dependency"}),(0,o.jsx)("h4",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"import { useEffect, useCallback, useState, useRef } from 'react';\nimport LoadingSpinner from './LoadingSpinner';\n\ntype FetchData = () => Promise<void>;\n\nfunction ComplexExample() {\n  const [data, setData] = useState<string | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [hasFetched, setHasFetched] = useState<boolean>(false);\n  const observerRef = useRef<HTMLDivElement | null>(null);\n\n  const fetchData: FetchData = useCallback(async () => {\n    console.log('[fetchData] Fetching data...');\n    try {\n      setLoading(true);\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\n      const result = await response.json();\n      console.log('[fetchData] Data fetched:', result.title);\n      setData('fetched');\n    } catch (error) {\n      console.error('[fetchData] Fetch error:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!observerRef.current || hasFetched) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && !hasFetched) {\n          console.log('[IntersectionObserver] Spinner is in view, starting fetch...');\n          fetchData();\n          setHasFetched(true);\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(observerRef.current);\n\n    return () => observer.disconnect();\n  }, [fetchData, hasFetched]);\n\n  return (\n    <div>\n      <div ref={observerRef}>\n        {loading || !data ? <LoadingSpinner /> : <h1 className=\"output\">Data fetched.</h1>}\n      </div>\n    </div>\n  );\n}\n\nexport default ComplexExample;\n"})}),(0,o.jsx)("h4",{children:"Output:"}),(0,o.jsx)("div",{ref:l,children:t||!e?(0,o.jsx)(f,{}):(0,o.jsx)("h1",{className:"output",children:"Data fetched."})}),(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."})]})},y=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Event Handling"}),(0,o.jsx)("p",{children:"In React, event handling lets you respond to user actions like clicks or typing. You can attach event handlers to elements to manage these actions."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"import React from 'react';\nimport '../../../button.css';\n\nconst EventHandling = () => {\n  \n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    console.log('Button clicked');\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(event.target.value);\n  };\n\n  return (\n    <div>\n      <input\n        id=\"event-handling\"\n        type=\"text\"\n        onChange={handleChange}\n      />\n      \n      <button data-testid=\"my-button\" onClick={handleClick}>\n        Click Me\n      </button>\n    </div>\n  );\n};\n\nexport default EventHandling;\n"})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsx)("input",{id:"event-handling",type:"text",onChange:e=>{console.log(e.target.value)}}),(0,o.jsx)("button",{"data-testid":"my-button",onClick:e=>{console.log("Button clicked")},children:"Click Me"}),(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."}),(0,o.jsx)("p",{children:"In this example, 'handleClick' logs a message when the button is clicked, and 'handleChange' logs the input value when it changes. These handlers are connected to the 'onClick' and 'onChange' events of the button and input."})]}),C=()=>{const e=(0,s.useRef)(null);return(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Typing Refs"}),(0,o.jsx)("p",{children:"In React, refs let you directly access DOM elements. The 'useRef' hook is used to create refs in functional components, and unlike state, refs don\u2019t cause re-renders."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"import React, { useRef } from 'react';\nimport '../../../button.css';\n\nconst TypingRefs = () => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const focusInput = () => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n      console.log('Input focused!');\n    } else {\n      console.log('Input ref is null');\n    }\n  };\n\n  return (\n    <div>\n      <input\n        id=\"typing-refs\"\n        type=\"text\"\n        ref={inputRef}\n      />\n      <button onClick={focusInput}>\n        Focus Input\n      </button>\n    </div>\n  );\n};\n\nexport default TypingRefs;\n"})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsx)("input",{id:"typing-refs",type:"text",ref:e}),(0,o.jsx)("button",{onClick:()=>{e.current?(e.current.focus(),console.log("Input focused!")):console.log("Input ref is null")},children:"Focus Input"}),(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."}),(0,o.jsx)("p",{children:"This example uses 'useRef' to create a reference to the input field. When the button is clicked, the input field is focused using the ref. If the ref is valid, the input gets focused; otherwise, a message is logged."})]})},v=(0,s.createContext)(void 0),b=e=>{let{children:n}=e;const[t,r]=(0,s.useState)("light");return(0,s.useEffect)((()=>{console.log(`Current theme: ${t}`)}),[t]),(0,o.jsx)(v.Provider,{value:{theme:t,toggleTheme:()=>{r((e=>"light"===e?"dark":"light"))}},children:n})},T=()=>{const{theme:e,toggleTheme:n}=(()=>{const e=(0,s.useContext)(v);if(!e)throw new Error("useTheme must be used within a ThemeProvider");return e})();return(0,o.jsxs)("div",{children:[(0,o.jsx)("button",{type:"button",onClick:n,children:"Toggle Theme"}),(0,o.jsxs)("h1",{className:"output",children:["Current theme: ",e]})]})},w=()=>(0,o.jsx)(b,{children:(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Typing Context and Custom Hooks"}),(0,o.jsx)("p",{children:"In React, Context allows you to share data (like themes) across components without passing props. Custom Hooks help you reuse logic, making your code cleaner."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// ThemeContext.tsx\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nconst useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nconst ThemeProvider = ({ children }: ThemeProviderProps) => {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));\n  };\n\n  useEffect(() => {\n    console.log(`Current theme: ${theme}`);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport { ThemeProvider, useTheme };\n"})}),(0,o.jsx)("br",{}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// ThemeDisplay.tsx\nimport React from 'react';\nimport { useTheme } from './ThemeContext';\nimport '../../../button.css';\n\nconst ThemeDisplay = () => {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <div>\n      <button type=\"button\" onClick={toggleTheme}>Toggle Theme</button>\n      <h1 className=\"output\">Current theme: {theme}</h1>\n    </div>\n  );\n};\n\nexport default ThemeDisplay;\n"})}),(0,o.jsx)("br",{}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// TypingContextAndCustomHooks.tsx\nimport React from 'react';\nimport { ThemeProvider } from './ThemeContext';\nimport ThemeDisplay from './ThemeDisplay';\n\nconst TypingContextAndCustomHooks = () => {\n  return (\n    <ThemeProvider>\n      <div>\n        <ThemeDisplay />\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default TypingContextAndCustomHooks;\n"})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsx)(T,{}),(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."}),(0,o.jsx)("p",{children:"We create a 'ThemeContext' to hold the current theme and a 'toggleTheme' function to switch between light and dark modes. The 'useTheme' hook gives access to the theme and the toggle function. The 'ThemeProvider' provides this state to the app."}),(0,o.jsx)("p",{children:"The 'ThemeDisplay' component shows the current theme and lets the user toggle it with a button."})]})});const R=function(e){return n=>(console.log("Rendering",e.name),(0,o.jsx)(e,{...n}))}((e=>{let{name:n}=e;return(0,o.jsxs)("h1",{className:"output",children:["Hello, ",n,"!"]})}));const k=function(){return(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Typing Higher-Order Components (HOCs)"}),(0,o.jsx)("p",{children:"Higher-Order Components (HOCs) are a powerful pattern in React used to enhance or modify components without altering their original implementations. They are functions that take a component as an argument and return a new component with extended behavior."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// WithLogging.tsx\nimport React from 'react';\n\nfunction WithLogging<T extends React.ComponentType<any>>(Component: T) {\n  return (props: React.ComponentProps<T>) => {\n    console.log('Rendering', Component.name);\n    return <Component {...props} />;\n  };\n}\n\nexport default WithLogging;\n"})}),(0,o.jsx)("br",{}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// Hello.tsx\nimport React from 'react';\n\ntype HelloProps = { \n  name: string; \n};\n\nconst Hello: React.FC<HelloProps> = ({ name }) => {\n  return <h1 className=\"output\">Hello, {name}!</h1>;\n};\n\nexport default Hello;\n"})}),(0,o.jsx)("br",{}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// HelloWithLogging.tsx\nimport React from 'react';\nimport Hello from './Hello';\nimport WithLogging from './WithLogging';\n\n// Create the wrapped component\nconst HelloWithLogging = WithLogging(Hello);\n\nexport default HelloWithLogging;\n"})}),(0,o.jsx)("br",{}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// TypingHigherOrderComponents.tsx\nimport React from 'react';\nimport HelloWithLogging from './HelloWithLogging';\n\nfunction TypingHigherOrderComponents() {\n  return (\n    <div>\n      <HelloWithLogging name=\"World\" />\n    </div>\n  );\n}\n\nexport default TypingHigherOrderComponents;\n"})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsx)(R,{name:"World"}),"  ",(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."}),(0,o.jsx)("p",{children:"In this example, we create a simple HOC called 'WithLogging' that wraps any given component and logs a message to the console whenever it renders. By applying 'WithLogging' to a 'Hello' component, we demonstrate how HOCs can add functionality such as logging while keeping the original component clean and focused on its primary task. This approach promotes reusability and separation of concerns in React applications."})]})},I=e=>{let{items:n,renderItem:t}=e;return console.log("Rendering List component with items:",n),(0,o.jsx)("ul",{className:"output",children:n.map(((e,n)=>(console.log(`Rendering item at index ${n}:`,e),t(e))))})},S=()=>{const e=(0,s.useRef)(null),[n,t]=(0,s.useState)(!1),r=(0,s.useCallback)((e=>(console.log("Rendering individual item in renderItem:",e),(0,o.jsx)("h1",{children:e},e))),[]);return(0,s.useEffect)((()=>{const n=e.current,s=new IntersectionObserver((e=>{let[n]=e;n.isIntersecting?(console.log("UsingGenericsInComponents is in the viewport"),t(!0)):console.log("UsingGenericsInComponents is NOT in the viewport")}),{threshold:.1});return n&&s.observe(n),()=>{n&&s.unobserve(n)}}),[]),(0,o.jsxs)("div",{ref:e,children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Using Generics in Components"}),(0,o.jsx)("p",{children:"Generics in React let you build components that work with different types of data while keeping your code safe and reusable."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// List.tsx\nimport React from 'react';\n\ntype ListProps<T> = {\n  items: T[];\n  renderItem: (item: T) => JSX.Element;\n};\n\nexport const List = <T,>({ items, renderItem }: ListProps<T>) => {\n  console.log('Rendering List component with items:', items);\n\n  return (\n    <ul className=\"output\">\n      {items.map((item, index) => {\n        console.log(`Rendering item at index ${index}:`, item);\n        return renderItem(item);\n      })}\n    </ul>\n  );\n};\n"})}),(0,o.jsx)("br",{}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// UsingGenericsInComponents.tsx\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { List } from './List';\n\nconst UsingGenericsInComponents = () => {\n  const fruits: string[] = ['Apple', 'Banana', 'Cherry'];\n\n  const containerRef = useRef<HTMLDivElement | null>(null);\n\n  const [hasRendered, setHasRendered] = useState(false);\n\n  const renderFruit = useCallback((item: string) => {\n    console.log('Rendering individual item in renderItem:', item);\n    return <h1 key={item}>{item}</h1>;\n  }, []);\n\n  useEffect(() => {\n    const currentRef = containerRef.current;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          console.log('UsingGenericsInComponents is in the viewport');\n          setHasRendered(true);\n        } else {\n          console.log('UsingGenericsInComponents is NOT in the viewport');\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (currentRef) {\n      observer.observe(currentRef);\n    }\n\n    return () => {\n      if (currentRef) {\n        observer.unobserve(currentRef);\n      }\n    };\n  }, []);\n\n  return (\n    <div ref={containerRef}>\n      {hasRendered && <List items={fruits} renderItem={renderFruit} />}\n    </div>\n  );\n};\n\nexport default UsingGenericsInComponents;\n"})}),(0,o.jsx)("h3",{children:"Output:"}),n&&(0,o.jsx)(I,{items:["Apple","Banana","Cherry"],renderItem:r}),(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."}),(0,o.jsx)("p",{children:"This example shows how to make a reusable list component in React using TypeScript generics. The 'List' component works with any type of data and takes two props: an array of items and a function to render each item. To improve performance, the list only shows up when the component scrolls into view, using the 'IntersectionObserver'."})]})},H=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Summary"}),(0,o.jsx)("p",{children:"With these concepts, you\u2019ll have a solid foundation for working with TypeScript in React, enabling stronger code structure and reducing bugs."})]}),E=()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r,{}),(0,o.jsx)(i,{}),(0,o.jsx)(a,{}),(0,o.jsx)(h,{}),(0,o.jsx)(u,{}),(0,o.jsx)(p,{}),(0,o.jsx)(m,{}),(0,o.jsx)(x,{}),(0,o.jsx)(g,{}),(0,o.jsx)(j,{}),(0,o.jsx)(y,{}),(0,o.jsx)(C,{}),(0,o.jsx)(w,{}),(0,o.jsx)(k,{}),(0,o.jsx)(S,{}),(0,o.jsx)(H,{})]})},3923:()=>{}}]);
//# sourceMappingURL=641.77009938.chunk.js.map