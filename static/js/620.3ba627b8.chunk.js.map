{"version":3,"file":"static/js/620.3ba627b8.chunk.js","mappings":"4IAAA,MAaA,EAbmBA,KAEXC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWF,SAAC,iBAC1BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uTCYf,EAhBYG,KAERJ,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qIACHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,0JACHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4BACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2J,cCRT,MAAMI,GAAeC,EAAAA,EAAAA,iBAEfC,EAAgBC,IAAmB,IAAlB,SAAEP,GAAUO,EACjC,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,SAKnC,OAFAC,QAAQC,IAAI,6BAA8BJ,IAGxCP,EAAAA,EAAAA,KAACG,EAAaS,SAAQ,CAACC,MAAO,CAAEN,QAAOC,YAAWT,SAC/CA,GACqB,E,QCV5B,MAiFA,EAjFwBe,KACtB,MAAM,MAAEP,EAAK,SAAEC,IAAaO,EAAAA,EAAAA,YAAWZ,GAKvC,OAFAO,QAAQC,IAAI,oCAAqCJ,IAG/CT,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2RAMHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,QAAAD,SACG,icAqBLC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,QAAAD,SACG,kkBAyBLC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJD,EAAAA,EAAAA,MAAA,MAAIG,UAAU,SAAQF,SAAA,CAAC,UAAQQ,MAC/BP,EAAAA,EAAAA,KAAA,UAAQgB,QAASA,IAAMR,EAAmB,UAAVD,EAAoB,OAAS,SAASR,SAAC,kBAGvEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,SAAQF,SAAC,0GAGnB,ECpEV,EAbkBkB,KAEVnB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4GACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,8GACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,0ICaf,EAbuBmB,KAEnBlB,EAAAA,EAAAA,KAAAmB,EAAAA,SAAA,CAAApB,UACED,EAAAA,EAAAA,MAACO,EAAa,CAAAN,SAAA,EACZC,EAAAA,EAAAA,KAACH,EAAU,KACXG,EAAAA,EAAAA,KAACE,EAAG,KACJF,EAAAA,EAAAA,KAACc,EAAe,KAChBd,EAAAA,EAAAA,KAACiB,EAAS,Q","sources":["components/state_management/context_api/ContextAPI.js","components/state_management/context_api/How.js","components/state_management/context_api/ThemeProvider.js","components/state_management/context_api/ThemedComponent.js","components/state_management/context_api/KeyPoints.js","pages/state_management/ContextAPIPage.js"],"sourcesContent":["const ContextAPI = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"underline\">Context API</h1>\r\n            <p>\r\n                The Context API is a built-in feature in React for managing state across different components without the need to pass props manually at every level.\r\n                It allows you to create global variables that can be shared across a React component tree,\r\n                making it easier to manage state in medium-sized applications.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContextAPI;","const How = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>How It Works</h2>\r\n      <h3>Creating Context</h3>\r\n      <p>First, you create a context object using React.createContext(). This object will be used to share the state between components.</p>\r\n      <h3>Provider</h3>\r\n      <p>The Provider component allows consuming components to subscribe to context changes. It takes a value prop that contains the state you want to share.</p>\r\n      <h3>Consumer or useContext</h3>\r\n      <p>There are two ways to consume context. You can either use the Context.Consumer component or the useContext hook, which is simpler and more concise.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default How;\r\n","import React, { createContext, useState } from 'react';\r\n\r\n// Create a context for the theme\r\nconst ThemeContext = createContext();\r\n\r\nconst ThemeProvider = ({ children }) => {\r\n  const [theme, setTheme] = useState('light');\r\n\r\n  // Log the theme whenever it changes\r\n  console.log(\"Current Theme in Provider:\", theme);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport { ThemeProvider, ThemeContext };\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from '../context_api/ThemeProvider'; // Import ThemeContext\r\nimport './../../../button.css';\r\n\r\nconst ThemedComponent = () => {\r\n  const { theme, setTheme } = useContext(ThemeContext); // Access theme state\r\n\r\n  // Log the current theme when the component is rendered\r\n  console.log(\"Current Theme in ThemedComponent:\", theme);\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Example</h2>\r\n      <p>\r\n        This example demonstrates using Context API to manage a global theme state and share it across components.\r\n        The 'ThemeProvider' provides the 'theme' and 'setTheme' to child components,\r\n        while 'ThemedComponent' consumes the state and allows toggling between light and dark themes.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// ThemeProvider.js\r\nimport React, { createContext, useState } from 'react';\r\n\r\nconst ThemeContext = createContext();\r\n\r\nconst ThemeProvider = ({ children }) => {\r\n  const [theme, setTheme] = useState('light');\r\n\r\n  console.log(\"Current Theme in Provider:\", theme);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport { ThemeProvider, ThemeContext };\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// ThemedComponent.js\r\nimport React, { useContext } from 'react';\r\nimport { ThemeContext } from '../context_api/ThemeProvider';\r\nimport './../../../button.css';\r\n\r\nconst ThemedComponent = () => {\r\n  const { theme, setTheme } = useContext(ThemeContext);\r\n\r\n  console.log(\"Current Theme in ThemedComponent:\", theme);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"output\">Theme: {theme}</h1>\r\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\r\n        Toggle Theme\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThemedComponent;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      <h1 className=\"output\">Theme: {theme}</h1>\r\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\r\n        Toggle Theme\r\n      </button>\r\n      <h1 className=\"output\">\r\n        You can use the browserâ€™s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThemedComponent;\r\n","const KeyPoints = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Key Points</h2>\r\n            <p>Context API is ideal for managing global state, like theme, user authentication, or language settings.</p>\r\n            <p>It prevents \"prop drilling\", where props are passed through multiple levels of components unnecessarily.</p>\r\n            <p>It's more lightweight compared to state management libraries like Redux, making it perfect for small to medium-sized applications.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default KeyPoints;","import {\r\n  ContextAPI,\r\n  How,\r\n  ThemeProvider,\r\n  ThemedComponent,\r\n  KeyPoints\r\n} from '../../components/state_management/context_api';\r\n\r\nconst ContextAPIPage = () => {\r\n  return (\r\n    <>\r\n      <ThemeProvider>\r\n        <ContextAPI />\r\n        <How />\r\n        <ThemedComponent />\r\n        <KeyPoints />\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContextAPIPage;"],"names":["ContextAPI","_jsxs","children","_jsx","className","How","ThemeContext","createContext","ThemeProvider","_ref","theme","setTheme","useState","console","log","Provider","value","ThemedComponent","useContext","onClick","KeyPoints","ContextAPIPage","_Fragment"],"sourceRoot":""}