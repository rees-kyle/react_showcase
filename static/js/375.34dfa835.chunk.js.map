{"version":3,"file":"static/js/375.34dfa835.chunk.js","mappings":"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","sources":["components/performance_optimization/memoization/Memoization.js","components/performance_optimization/memoization/HowItWorks.js","components/performance_optimization/memoization/MyComponent.js","components/performance_optimization/memoization/BasicUsage.js","components/performance_optimization/memoization/CustomComparisonFunction.js","components/performance_optimization/memoization/WhenToUse.js","components/performance_optimization/memoization/WhenNotToUse.js","components/performance_optimization/memoization/Summary.js","pages/performance_optimization/MemoizationPage.js"],"sourcesContent":["const Memoization = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"underline\">Memoization</h1>\r\n      <p>\r\n        React provides 'React.memo' as a way to optimize functional components by memoizing their output.\r\n        This is particularly helpful when you have components that receive the same props frequently,\r\n        as it can help reduce unnecessary re-renders.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Memoization;","const HowItWorks = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>How It Works</h2>\r\n      <p>\r\n        'React.memo' is a higher-order component (HOC) that only re-renders the component if its props change.\r\n        If the same props are passed again, React reuses the previous render,\r\n        making your component faster by avoiding unnecessary updates.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HowItWorks;","import React from 'react';\r\n\r\n// Memoized component to prevent unnecessary re-renders\r\nconst MyComponent = React.memo(({ value }) => {\r\n  console.log(\"Rendering MyComponent with value:\", value);\r\n  return <h1>{value}</h1>;\r\n});\r\n\r\nexport default MyComponent;","import React, { useState } from 'react';\r\nimport MyComponent from './MyComponent';\r\n\r\nconst BasicUsage = () => {\r\n  const [count, setCount] = useState(0);\r\n  const [value, setValue] = useState('Hello Memo!');\r\n\r\n  console.log(\"ParentComponent Rendered | count:\", count, \"| value:\", value);\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Basic Usage</h2>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// MyComponent.js\r\nimport React from 'react';\r\n\r\nconst MyComponent = React.memo(({ value }) => {\r\n  console.log(\"Rendering MyComponent with value:\", value);\r\n  return <h1>{value}</h1>;\r\n});\r\n\r\nexport default MyComponent;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// BasicUsage.js\r\nimport React, { useState } from 'react';\r\nimport MyComponent from './MyComponent';\r\n\r\nconst BasicUsage = () => {\r\n  const [count, setCount] = useState(0);\r\n  const [value, setValue] = useState('Hello Memo!');\r\n\r\n  console.log(\"ParentComponent Rendered | count:\", count, \"| value:\", value);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Increase Count\r\n      </button>\r\n      <button onClick={() => setValue('Value Updated!')}>\r\n        Change Value\r\n      </button>\r\n      <h1 className=\"output\">Count: {count}</h1>\r\n      <div className=\"output\">\r\n        <MyComponent value={value} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BasicUsage;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Increase Count\r\n      </button>\r\n      <br/>\r\n      <button onClick={() => setValue('Value Updated!')}>\r\n        Change Value\r\n      </button>\r\n      <h1 className=\"output\">Count: {count}</h1>\r\n      <div className=\"output\">\r\n        <MyComponent value={value} />\r\n      </div>\r\n      <h1 className=\"output\">\r\n        You can use the browserâ€™s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n      <p>\r\n        In this example, 'BasicUsage' (the parent component) re-renders whenever its state (count or value) changes.\r\n        However, thanks to React.memo, MyComponent only re-renders when its specific prop (value) changes.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BasicUsage;","import React, { useState } from 'react';\r\n\r\n// Memoized component to prevent unnecessary re-renders based on custom comparison\r\nconst MyComponent = React.memo(({ obj }) => {\r\n  console.log(\"Rendering MyComponent\");\r\n  return <h1 className=\"output\">{obj.text}</h1>;\r\n}, (prevProps, nextProps) => prevProps.obj.id === nextProps.obj.id); // Custom comparison function\r\n\r\n// Parent component for testing the memoized component\r\nconst CustomComparisonFunction = () => {\r\n  const [obj, setObj] = useState({ id: 1, text: \"Hello\" });\r\n\r\n  const changeText = () => {\r\n    setObj(prev => {\r\n      const newObj = { ...prev, text: \"Updated text!\" };\r\n      console.log(\"Text changed to:\", newObj.text); // Log updated text\r\n      return newObj;\r\n    });\r\n  };\r\n\r\n  const changeId = () => setObj(prev => ({ ...prev, id: prev.id + 1 }));\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Custom Comparison Function</h2>\r\n      <p>\r\n        Sometimes, you may need a custom comparison function to determine whether the props are the same.\r\n        You can pass a second argument to 'React.memo' to control this behavior.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`import React, { useState } from 'react';\r\n\r\nconst MyComponent = React.memo(({ obj }) => {\r\n  console.log(\"Rendering MyComponent\");\r\n  return <h1 className=\"output\">{obj.text}</h1>;\r\n}, (prevProps, nextProps) => prevProps.obj.id === nextProps.obj.id);\r\n\r\nconst CustomComparisonFunction = () => {\r\n  const [obj, setObj] = useState({ id: 1, text: \"Hello\" });\r\n\r\n  const changeText = () => {\r\n    setObj(prev => {\r\n      const newObj = { ...prev, text: \"Updated text!\" };\r\n      console.log(\"Text changed to:\", newObj.text);\r\n      return newObj;\r\n    });\r\n  };\r\n\r\n  const changeId = () => setObj(prev => ({ ...prev, id: prev.id + 1 }));\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={changeText}>Change Text</button>\r\n      <br/>\r\n      <button onClick={changeId}>Change ID</button>\r\n      <MyComponent obj={obj} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomComparisonFunction;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      <button onClick={changeText}>Change Text</button>\r\n      <br/>\r\n      <button onClick={changeId}>Change ID</button>\r\n      <MyComponent obj={obj} />\r\n      <h1 className=\"output\">\r\n        You can use the browserâ€™s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n      <p>\r\n        In this example, MyComponent only re-renders when the id of the obj prop changes.\r\n        When the text property is updated, the component doesn't re-render because the id stays the same.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomComparisonFunction;","const WhenToUse = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>When To Use</h2>\r\n      <p>\r\n        Use 'React.memo' when a component always gives the same result with the same props,\r\n        and those props don't change much.\r\n        It helps stop the component from re-rendering when it doesnâ€™t need to.\r\n      </p>\r\n      <p>\r\n        You should also use 'React.memo' if you notice components are re-rendering even though their props stay the same.\r\n        This can make your app run faster by avoiding extra work.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WhenToUse;","const WhenNotToUse = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>When Not To Use</h2>\r\n      <p>\r\n        Avoid using 'React.memo' for components that frequently change their props. In these cases, memoization wonâ€™t help and might even slow things down slightly.\r\n      </p>\r\n      <p>\r\n        For complex or deeply nested components, React.memo can add a bit of overhead. Only use it when you see real performance improvements in your app.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WhenNotToUse;","const Summary = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Summary</h2>\r\n      <p>\r\n        Using 'React.memo' effectively can lead to noticeable improvements,\r\n        especially in large applications.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;","import {\r\n  Memoization,\r\n  HowItWorks,\r\n  BasicUsage,\r\n  CustomComparisonFunction,\r\n  WhenToUse,\r\n  WhenNotToUse,\r\n  Summary\r\n} from '../../components/performance_optimization/memoization';\r\n\r\nconst MemoizationPage = () => {\r\n  return (\r\n    <>\r\n      <Memoization />\r\n      <HowItWorks />\r\n      <BasicUsage />\r\n      <CustomComparisonFunction />\r\n      <WhenToUse />\r\n      <WhenNotToUse />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MemoizationPage;"],"names":["Memoization","_jsxs","children","_jsx","className","HowItWorks","React","_ref","value","console","log","BasicUsage","count","setCount","useState","setValue","onClick","MyComponent","obj","text","prevProps","nextProps","id","CustomComparisonFunction","setObj","changeText","prev","newObj","changeId","WhenToUse","WhenNotToUse","Summary","MemoizationPage","_Fragment"],"sourceRoot":""}