{"version":3,"file":"static/js/572.b8dd4894.chunk.js","mappings":"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","sources":["components/state_management/redux/Redux.js","components/state_management/redux/CoreConcepts.js","components/state_management/redux/KeyConcepts.js","components/state_management/redux/Example.js","redux/actions.js","components/state_management/redux/Summary.js","pages/state_management/ReduxPage.js"],"sourcesContent":["const Redux = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"underline\">Redux</h1>\r\n            <p>\r\n                Redux is a popular state management library for JavaScript applications,\r\n                commonly used with React.\r\n                It helps manage and centralize the state of an application in a predictable way.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Redux;","const CoreConcepts = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Core Concepts</h2>\r\n      <h3>Store</h3>\r\n      <p>\r\n        The single source of truth that holds the entire state of the application.\r\n      </p>\r\n      <h3>Actions</h3>\r\n      <p>\r\n        Plain JavaScript objects that represent an intention to change the state.\r\n        They must have a 'type' property and optionally include a payload with additional data.\r\n      </p>\r\n      <h3>Reducers</h3>\r\n      <p>\r\n        Functions that specify how the state changes in response to actions.\r\n      </p>\r\n      <h3>Dispatch</h3>\r\n      <p>\r\n        A method used to send an action to the Redux store.\r\n        The store will then use a reducer to update the state based on the action.\r\n      </p>\r\n      <h3>Selectors</h3>\r\n      <p>\r\n        Functions that retrieve specific pieces of state from the store.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoreConcepts;\r\n","const KeyConcepts = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Key Concepts</h2>\r\n      <h3>Immutability</h3>\r\n      <p>\r\n        The state is never mutated directly.\r\n        Instead, a new copy of the state is returned every time it is updated.\r\n      </p>\r\n      <h3>Single Source of Truth</h3>\r\n      <p>\r\n        The entire state of the application is kept in one central place (the store),\r\n        which simplifies debugging and tracing changes.\r\n      </p>\r\n      <h3>Predictability</h3>\r\n      <p>\r\n        Because state changes are centralized and handled by reducers,\r\n        the flow of data is predictable.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KeyConcepts;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { increment, decrement } from './../../../redux/actions';\r\nimport './../../../button.css';\r\n\r\nconst Example = () => {\r\n  const count = useSelector((state) => state.counter.count);\r\n  const dispatch = useDispatch();\r\n\r\n  console.log('Component Rendered with count:', count);\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Example of Redux Flow</h2>\r\n      <p>\r\n        The example sets up a Redux store to manage a counter state,\r\n        allowing a React component to dispatch 'INCREMENT' and 'DECREMENT' actions that update the state.\r\n        The component uses 'useSelector' to get the count value and re-renders when the state changes.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// actions.js\r\nexport const increment = () => ({\r\n  type: 'INCREMENT',\r\n});\r\n\r\nexport const decrement = () => ({\r\n  type: 'DECREMENT',\r\n});\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// reducer.js\r\nconst initialState = { count: 0 };\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  console.log('Reducer called with state:', state, 'and action:', action);\r\n\r\n  switch (action.type) {\r\n    case 'INCREMENT':\r\n      console.log('Incrementing state to:', { count: state.count + 1 });\r\n      return { count: state.count + 1 };\r\n    case 'DECREMENT':\r\n      console.log('Decrementing state to:', { count: state.count - 1 });\r\n      return { count: state.count - 1 };\r\n    default:\r\n      console.log('Returning current state:', state);\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default counterReducer;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// store.js\r\nimport { createStore, combineReducers } from 'redux';\r\nimport counterReducer from './reducer';\r\n\r\nconst rootReducer = combineReducers({ counter: counterReducer });\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nconsole.log('Initial Redux state:', store.getState());\r\n\r\nstore.subscribe(() => console.log('Updated Redux state:', store.getState()));\r\n\r\nexport default store;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// index.js\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ProviderComponent } from './components/hooks/usecontext/ProviderComponent';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\nroot.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ProviderComponent>\r\n        <App />\r\n      </ProviderComponent>\r\n    </Provider>\r\n  </React.StrictMode>\r\n);\r\n\r\nreportWebVitals();\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// Example.js\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { increment, decrement } from './../../../redux/actions';\r\nimport './../../../button.css';\r\n\r\nconst Example = () => {\r\n  const count = useSelector((state) => state.counter.count);\r\n  const dispatch = useDispatch();\r\n\r\n  console.log('Component Rendered with count:', count);\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={() => { \r\n        console.log('Dispatching INCREMENT action');\r\n        dispatch(increment());\r\n      }}>\r\n        Increment\r\n      </button>\r\n      <h1 className=\"output\">Counter: {count}</h1>\r\n      <br/>\r\n      <button type=\"button\" onClick={() => { \r\n        console.log('Dispatching DECREMENT action');\r\n        dispatch(decrement());\r\n      }}>\r\n        Decrement\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Example;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      <button type=\"button\" onClick={() => { \r\n        console.log('Dispatching INCREMENT action');\r\n        dispatch(increment());\r\n      }}>\r\n        Increment\r\n      </button>\r\n      <h1 className=\"output\">Counter: {count}</h1>\r\n      <br/>\r\n      <button type=\"button\" onClick={() => { \r\n        console.log('Dispatching DECREMENT action');\r\n        dispatch(decrement());\r\n      }}>\r\n        Decrement\r\n      </button>\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browserâ€™s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Example;\r\n","export const increment = () => ({\r\n  type: 'INCREMENT',\r\n});\r\n\r\nexport const decrement = () => ({\r\n  type: 'DECREMENT',\r\n});\r\n","const Summary = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Summary</h2>\r\n      <p>\r\n        Redux can be used to manage the state of different components, such as form inputs, UI states, or fetched data from APIs, all in one place.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;","import {\r\n  Redux,\r\n  CoreConcepts,\r\n  KeyConcepts,\r\n  Example,\r\n  Summary\r\n} from '../../components/state_management/redux';\r\n\r\nconst ReduxPage = () => {\r\n  return (\r\n    <>\r\n      <Redux />\r\n      <CoreConcepts />\r\n      <KeyConcepts />\r\n      <Example />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReduxPage;"],"names":["Redux","_jsxs","children","_jsx","className","CoreConcepts","KeyConcepts","Example","count","useSelector","state","counter","dispatch","useDispatch","console","log","type","onClick","Summary","ReduxPage","_Fragment"],"sourceRoot":""}