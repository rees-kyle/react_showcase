{"version":3,"file":"static/js/575.d00e0da4.chunk.js","mappings":"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","sources":["components/hooks/custom_hooks/CustomHooks.js","components/hooks/custom_hooks/HowTo.js","components/hooks/custom_hooks/CustomHook.js","components/hooks/custom_hooks/Example.js","components/hooks/custom_hooks/Usage.js","components/hooks/custom_hooks/KeyPoints.js","pages/hooks/CustomHooksPage.js"],"sourcesContent":["const CustomHooks = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"underline\">Custom Hooks</h1>\r\n            <p>\r\n                Custom hooks in React allow you to extract and reuse stateful logic across multiple components.\r\n                They follow the same rules as standard hooks but provide a way to share logic without repeating code.\r\n                Custom hooks are JavaScript functions that begin with the word \"use,\" as per React’s naming convention.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomHooks;","const HowTo = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>How to Create a Custom Hook</h2>\r\n            <h3>1. Identify Reusable Logic:</h3>\r\n            <p>If you have logic that is used by multiple components, like fetching data or managing state, it can be abstracted into a custom hook.</p>\r\n\r\n            <h3>2. Create a Hook Function:</h3>\r\n            <p>Custom hooks are regular JavaScript functions, but they can call other hooks (like useState, useEffect, etc.).</p>\r\n\r\n            <h3>3. Naming Convention:</h3>\r\n            <p>The hook’s name should start with \"use\" to comply with React’s rules of hooks.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HowTo;","import { useState, useEffect } from \"react\";\r\n\r\nfunction useFetch(url) {\r\n    const [data, setData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error(\"Network response was not ok\");\r\n                }\r\n                const jsonData = await response.json();\r\n                setData(jsonData);\r\n            } catch (error) {\r\n                console.error(\"Fetch error:\", error);\r\n                setData([]);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [url]);\r\n\r\n    return { data: data || [], loading };\r\n}\r\n\r\nexport default useFetch;","const Example = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Example of a Custom Hook</h2>\r\n            <p>Let’s create a simple custom hook that fetches data from an API.</p>\r\n\r\n            <h3>Code:</h3>\r\n            <pre>\r\n                <code>\r\n                    {`import { useState, useEffect } from 'react';\r\n\r\nfunction useFetch(url) {\r\n    const [data, setData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error(\"Network response was not ok\");\r\n                }\r\n                const jsonData = await response.json();\r\n                setData(jsonData);\r\n            } catch (error) {\r\n                console.error(\"Fetch error:\", error);\r\n                setData([]);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [url]);\r\n\r\n    return { data: data || [], loading };\r\n}\r\n\r\nexport default useFetch;\r\n`}\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Example;","import useFetch from './CustomHook';\r\n\r\nfunction Usage() {\r\n    const { data, loading } = useFetch('https://jsonplaceholder.typicode.com/users');\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Using the Custom Hook in a Component</h2>\r\n            <h3>Code:</h3>\r\n            <pre>\r\n                <code>\r\n                    {`import useFetch from './useFetch';\r\n\r\nfunction Usage() { \r\n    const { data, loading } = useFetch('https://jsonplaceholder.typicode.com/users');\r\n\r\n    if (loading) return <p>Loading...</p>; \r\n\r\n    return ( \r\n        <div> \r\n            {data.map((item) => (\r\n                <h4 className=\"output\" key={item.id}>{item.name}</h4>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Usage;\r\n`}\r\n                </code>\r\n            </pre>\r\n\r\n            <h3>Output:</h3>\r\n            {data.map((item) => (\r\n                <h4 className=\"output\" key={item.id}>{item.name}</h4>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Usage;","const KeyPoints = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Key Points</h2>\r\n            <p>Custom hooks allow the reuse of stateful logic between components.</p>\r\n            <p>They can manage state, make API calls, or encapsulate any logic that needs to be reused.</p>\r\n            <p>Custom hooks follow the same rules as built-in hooks, such as not being called inside loops, conditions, or nested functions.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default KeyPoints;","import {\r\n  CustomHooks,\r\n  HowTo,\r\n  Example,\r\n  Usage,\r\n  KeyPoints\r\n} from '../../components/hooks/custom_hooks';\r\n\r\nconst CustomHooksPage = () => {\r\n  return (\r\n    <>\r\n      <CustomHooks />\r\n      <HowTo />\r\n      <Example />\r\n      <Usage />\r\n      <KeyPoints />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomHooksPage;"],"names":["CustomHooks","_jsxs","children","_jsx","className","HowTo","url","data","setData","useState","loading","setLoading","useEffect","async","response","fetch","ok","Error","jsonData","json","error","console","fetchData","Example","useFetch","map","item","name","id","KeyPoints","CustomHooksPage","_Fragment","Usage"],"sourceRoot":""}