"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[144],{2144:(e,n,t)=>{t.r(n),t.d(n,{default:()=>h});var o=t(579);const s=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("h1",{className:"underline",children:"UseMemoAndUseCallback"}),(0,o.jsx)("p",{children:"In React, 'useMemo' and 'useCallback' are used for performance optimization by controlling when expensive functions are re-computed or re-created."})]});var r=t(5043);const c=function(e){let{items:n=[]}=e;console.log("ExpensiveComponent rendering...");const t=(0,r.useMemo)((()=>(console.log("Calculating total value..."),n.reduce(((e,n)=>e+n.value),0))),[n]);return console.log("Current computedValue:",t),(0,o.jsx)("div",{className:"output",children:(0,o.jsxs)("h1",{children:["Total Value: ",t]})})};t(3923);const l=function(){const[e,n]=(0,r.useState)([{value:10},{value:20},{value:30}]),[t,s]=(0,r.useState)(0);return(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"useMemo"}),(0,o.jsx)("p",{children:"useMemo helps remember the output of a function to avoid recalculating it on every render. It is ideal for expensive calculations that should only run when certain dependencies change, making the app faster and more efficient."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// ExpensiveComponent.js\nimport React, { useMemo } from 'react';\n\nfunction ExpensiveComponent({ items = [] }) {\n  console.log('ExpensiveComponent rendering...');\n\n  const computedValue = useMemo(() => {\n    console.log('Calculating total value...');\n    return items.reduce((sum, item) => sum + item.value, 0);\n  }, [items]);\n\n  console.log('Current computedValue:', computedValue);\n\n  return (\n    <div className=\"output\">\n      <h1>Total Value: {computedValue}</h1>\n    </div>\n  );\n}\n\nexport default ExpensiveComponent;\n"})}),(0,o.jsx)("br",{}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"// UseMemo.js\nimport React, { useState } from 'react';\nimport ExpensiveComponent from './ExpensiveComponent';\nimport './../../../button.css';\n\nfunction UseMemo() {\n  const [items, setItems] = useState([\n    { value: 10 },\n    { value: 20 },\n    { value: 30 },\n  ]);\n\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <button type=\"button\" onClick={() => setItems([...items, { value: 40 }])}>\n        Add Item (value: 40)\n      </button>\n      <ExpensiveComponent items={items} />\n      <br/>\n      <button type=\"button\" onClick={() => setCount(count + 1)}>\n        Force Re-render\n      </button>\n      <h1 className=\"output\">Forced Re-render Count: {count}</h1>\n    </div>\n  );\n}\n\nexport default UseMemo;\n"})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsx)("button",{type:"button",onClick:()=>n([...e,{value:40}]),children:"Add Item (value: 40)"}),(0,o.jsx)(c,{items:e}),(0,o.jsx)("br",{}),(0,o.jsx)("button",{type:"button",onClick:()=>s(t+1),children:"Force Re-render"}),(0,o.jsxs)("h1",{className:"output",children:["Forced Re-render Count: ",t]}),(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."}),(0,o.jsx)("p",{children:"In this example, useMemo helps React remember the total value of a list of items. It only recalculates the total when the list changes. If the component re-renders but the list stays the same, useMemo skips the calculation, making the app faster and more efficient."})]})};function i(e){let{onClick:n}=e;return console.log("ChildComponent rendered"),(0,o.jsx)("button",{type:"button",onClick:n,children:"Click Me"})}const a=function(){console.log("ParentComponent rendered");const e=(0,r.useCallback)((()=>{console.log("Button clicked!")}),[]);return(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"useCallback"}),(0,o.jsx)("p",{children:"useCallback is a React hook that keeps a function from being recreated on each render. It's helpful when passing functions as props to child components, as it prevents unnecessary re-renders and improves performance."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:'// UseCallback.js\nimport React, { useCallback } from \'react\';\nimport \'./../../../button.css\';\n\nfunction UseCallback() {\n  console.log("ParentComponent rendered");\n\n  const handleClick = useCallback(() => {\n    console.log("Button clicked!");\n  }, []);\n\n  return (\n    <div>\n      <ChildComponent onClick={handleClick} />;\n    </div>\n  );\n}\n\nfunction ChildComponent({ onClick }) {\n  console.log("ChildComponent rendered");\n  return <button type="button" onClick={onClick}>Click Me</button>;\n}\n\nexport default UseCallback;\n'})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsx)(i,{onClick:e}),";",(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."}),(0,o.jsx)("p",{children:"In this example, useCallback keeps the handleClick function from being recreated on every render. This prevents unnecessary re-renders of the 'ChildComponent'. The console logs show when the components render and when the button is clicked, showing how useCallback helps improve performance."})]})},u=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Key Points"}),(0,o.jsx)("h3",{children:"useMemo"}),(0,o.jsx)("p",{children:"Used for caching values. It helps optimize performance by memorizing the result of a calculation and only recalculating when its dependencies change."}),(0,o.jsx)("h3",{children:"useCallback"}),(0,o.jsx)("p",{children:"Used for caching function references. It prevents unnecessary re-creations of functions, which can help reduce unnecessary re-renders in child components."})]}),d=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Summary"}),(0,o.jsx)("p",{children:"Both are handy for optimizing renders in large apps or components with costly calculations."})]}),h=()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s,{}),(0,o.jsx)(l,{}),(0,o.jsx)(a,{}),(0,o.jsx)(u,{}),(0,o.jsx)(d,{})]})},3923:()=>{}}]);
//# sourceMappingURL=144.2dc08f18.chunk.js.map