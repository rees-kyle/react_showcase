"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[551],{2551:(e,n,t)=>{t.r(n),t.d(n,{default:()=>d});var o=t(579);const s=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("h1",{className:"underline",children:"Controlled Vs Uncontrolled Components"}),(0,o.jsx)("p",{children:"In React, forms can be managed using either controlled or uncontrolled components, each with its own advantages and use cases."})]});var r=t(5043);const l=function(){const[e,n]=(0,r.useState)("");return(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Controlled Components"}),(0,o.jsx)("p",{children:"In controlled components, the form data is handled by the state of the React component. The input elements' values are controlled by React, meaning they rely on state to determine their values."}),(0,o.jsx)("p",{children:"You bind the input field's value to a state variable and update the state using an event handler when the input changes."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"import React, { useState } from 'react';\n\nfunction Controlled() {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleChange = (event) => {\n        setInputValue(event.target.value);\n        console.log('Input changed: ' + event.target.value);\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log('Form submitted with value: ' + inputValue);\n        alert('Submitted value: ' + inputValue);\n    };\n\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input \n                    type='text' \n                    id='user-input' \n                    value={inputValue}\n                    onChange={handleChange}\n                />\n                <button type='submit'>Submit</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Controlled;"})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsxs)("form",{onSubmit:n=>{n.preventDefault(),console.log(`Form submitted with value: ${e}`),alert(`Submitted value: ${e}`)},children:[" ",(0,o.jsx)("input",{type:"text",id:"user-input",value:e,onChange:e=>{n(e.target.value),console.log(`Input changed: ${e.target.value}`)}}),(0,o.jsx)("button",{type:"submit",children:"Submit"})," "]}),(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."}),(0,o.jsx)("h3",{children:"Advantages:"}),(0,o.jsx)("p",{children:"Easier to manage and validate form data."}),(0,o.jsx)("p",{children:"Provides a single source of truth, as the input value is stored in the state."}),(0,o.jsx)("p",{children:"Makes it easier to implement dynamic validation, conditional rendering, and other features."})]})};const a=function(){const e=(0,r.useRef)(null);return(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Uncontrolled Components"}),(0,o.jsx)("p",{children:"In uncontrolled components, the form data is managed by the DOM itself. You use refs to access the form elements directly, and React does not control the input's value."}),(0,o.jsx)("p",{children:"You access the input values using refs instead of using state to store the input values."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"import React, { useRef } from 'react';\n\nfunction Uncontrolled() {\n    const inputRef = useRef(null);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log('Form submitted!');\n        console.log('Current input value:', inputRef.current.value);\n        alert('Submitted value: ' + inputRef.current.value);\n    };\n\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input \n                    type='text' \n                    ref={inputRef} \n                    id='user-input' \n                    name='userInput' \n                />\n                <button type='submit'>Submit</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Uncontrolled;"})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsxs)("form",{onSubmit:n=>{n.preventDefault(),console.log("Form submitted!"),console.log("Current input value:",e.current.value),alert(`Submitted value: ${e.current.value}`)},children:[(0,o.jsx)("input",{type:"text",ref:e,id:"user-input",name:"userInput"}),(0,o.jsx)("button",{type:"submit",children:"Submit"})]}),(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."}),(0,o.jsx)("h3",{children:"Advantages:"}),(0,o.jsx)("p",{children:"Simpler for quick forms without needing to manage state."}),(0,o.jsx)("p",{children:"Can be useful for integrating with non-React libraries or existing codebases."}),(0,o.jsx)("p",{children:"Less boilerplate code for forms with many inputs."})]})},i=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Choosing Between Controlled and Uncontrolled Components"}),(0,o.jsx)("h3",{children:"Controlled"}),(0,o.jsx)("p",{children:"Use Controlled Components when you need to manage form data closely, such as for complex forms, validation, or when you want to have a clear flow of data."}),(0,o.jsx)("h3",{children:"Uncontrolled"}),(0,o.jsx)("p",{children:"Use Uncontrolled Components for simple forms or when you're integrating with third-party libraries, where you don't need to manage the input state actively."})]}),u=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Summary"}),(0,o.jsx)("p",{children:"In practice, many developers prefer controlled components for their consistency and ease of validation, while uncontrolled components can be handy for less complex scenarios."})]}),d=()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s,{}),(0,o.jsx)(l,{}),(0,o.jsx)(a,{}),(0,o.jsx)(i,{}),(0,o.jsx)(u,{})]})}}]);
//# sourceMappingURL=551.fb7fba28.chunk.js.map