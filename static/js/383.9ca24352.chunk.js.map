{"version":3,"file":"static/js/383.9ca24352.chunk.js","mappings":"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","sources":["components/styling/styled_components/StyledComponents.js","components/styling/styled_components/Install.js","components/styling/styled_components/CreateAndUse.js","components/styling/styled_components/PassingProps.js","components/styling/styled_components/Extending.js","components/styling/styled_components/GlobalStyles.js","components/styling/styled_components/Tips.js","components/styling/styled_components/Summary.js","pages/styling/StyledComponentsPage.js"],"sourcesContent":["const StyledComponents = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"underline\">Styled Components</h1>\r\n      <p>\r\n        Using styled-components in React is a popular way to style components with a clean, modular approach.\r\n        Styled-components allow you to create custom, reusable components with encapsulated styles.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StyledComponents;","const Install = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Installing</h2>\r\n      <p>\r\n        First, you’ll need to install the package by running the following command in Bash.\r\n      </p>\r\n    \r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`npm install styled-components`}\r\n        </code>\r\n      </pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Install;","import styled from 'styled-components';\r\n\r\n// Create a styled button component\r\nconst Button = styled.button`\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 0.5rem 1rem;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 1.2rem;\r\n  margin: 0rem 1rem;\r\n  margin-bottom: 2rem;\r\n  cursor: pointer;\r\n  border-radius: 0.3rem;\r\n  \r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n`;\r\n\r\nconst CreateAndUse = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Creating Styled Components</h2>\r\n      <p>\r\n        Once installed, you can create styled components directly in your JavaScript file.\r\n        Each styled component is essentially a React component with styles applied to it.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`import styled from 'styled-components';\r\n\r\nconst Button = styled.button\\`\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 0.5rem 1rem;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 1.2rem;\r\n  margin: 0rem 1rem;\r\n  margin-bottom: 2rem;\r\n  cursor: pointer;\r\n  border-radius: 0.3rem;\r\n\r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n\\`;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h2>Using Styled Components in Your Components</h2>\r\n      <p>\r\n        Now, you can use your styled Button component like any other React component.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`const CreateAndUse = () => {\r\n  return (\r\n    <div>\r\n      <Button>Click Me</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateAndUse;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      {/* Render the styled Button component with text */}\r\n      <Button>Click Me</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateAndUse;","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  /* Set background color based on the 'primary' prop */\r\n  background-color: ${props => props.primary ? '#E07A5F' : '#008CBA'};\r\n  color: white;\r\n  padding: 0.5rem 1rem;\r\n  border: none;\r\n  border-radius: 0.3rem;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  border-radius: 0.3rem;\r\n  font-size: 1.2rem;\r\n  margin: 0rem 1rem;\r\n  margin-bottom: 2rem;\r\n  cursor: pointer;\r\n  /* Change background color on hover, based on the 'primary' prop */\r\n  &:hover {\r\n    background-color: ${props => props.primary ? '#B75C43' : '#005f73'};\r\n  }\r\n`;\r\n\r\nconst PassingProps = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Passing Props to Styled Components</h2>\r\n      <p>\r\n        You can also make your styled components dynamic by passing props. For instance, changing the button color based on a 'primary' prop.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`import styled from 'styled-components';\r\n\r\nconst Button = styled.button\\`\r\n  background-color: \\${props => props.primary ? '#E07A5F' : '#008CBA'};\r\n  color: white;\r\n  padding: 0.5rem 1rem;\r\n  border: none;\r\n  border-radius: 0.3rem;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  border-radius: 0.3rem;\r\n  font-size: 1.2rem;\r\n  margin: 0rem 1rem;\r\n  margin-bottom: 2rem;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: \\${props => props.primary ? '#B75C43' : '#005f73'};\r\n  }\r\n\\`;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <p>\r\n        Now, pass the 'primary' prop to control the button’s style.\r\n      </p>\r\n\r\n      <pre>\r\n        <code>\r\n          {`const PassingProps = () => {\r\n  return (\r\n    <div>\r\n      <Button primary>Primary Button</Button>\r\n      <br/>\r\n      <Button>Default Button</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PassingProps;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      {/* Render a Button component with the 'primary' prop applied, making it a \"Primary Button\" */}\r\n      <Button primary>Primary Button</Button>\r\n      <br/>\r\n      {/* Render a Button component without the 'primary' prop, making it a \"Default Button\" */}\r\n      <Button>Default Button</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PassingProps;","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 0.5rem 1rem;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 1.2rem;\r\n  margin: 0rem 1rem;\r\n  margin-bottom: 2rem;\r\n  cursor: pointer;\r\n  border-radius: 0.3rem;\r\n\r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n`;\r\n\r\n// Create a styled 'ExtendedButton' component by extending the existing 'Button' component\r\nconst ExtendedButton = styled(Button)`\r\n  background-color: #9067C6;\r\n\r\n  &:hover {\r\n    background-color: #7A54A3;\r\n  }\r\n`;\r\n\r\nconst Extending = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Extending Styled Components</h2>\r\n      <p>\r\n        Styled-components also let you extend existing styles easily.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`const ExtendedButton = styled(Button)\\`\r\n  background-color: #9067C6;\r\n\r\n  &:hover {\r\n    background-color: #7A54A3;\r\n  }\r\n\\`;\r\n\r\n\r\nconst Extending = () => {\r\n  return (\r\n    <div>\r\n      <ExtendedButton>Extended Button</ExtendedButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Extending;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      {/* Render the 'ExtendedButton' component with customized styles */}\r\n      <ExtendedButton>Extended Button</ExtendedButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Extending;","const GlobalStyles = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Global Styles</h2>\r\n      <p>\r\n        If you want to apply global styles across your app, you can use 'createGlobalStyle'.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle\\`\r\n  body {\r\n    font-family: Arial, sans-serif;\r\n    background-color: #f5f5f5;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\\`;\r\n\r\n\r\nconst App = () => (\r\n  <>\r\n    <GlobalStyle />\r\n    <Button>Button with Global Styles</Button>\r\n  </>\r\n);\r\n\r\nexport default App;\r\n`}\r\n        </code>\r\n      </pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GlobalStyles;","const Tips = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Tips for Using Styled Components</h2>\r\n\r\n      <h3>Consistent Theming</h3>\r\n      <p>Use themes to maintain consistency across your app.</p>\r\n\r\n      <h3>Scoped Styling</h3>\r\n      <p>Since each component's styles are scoped to that component, it helps avoid unintended style bleeding.</p>\r\n\r\n      <h3>Dynamic Styling</h3>\r\n      <p>Pass props to components to create reusable, adaptable styles.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tips;","const Summary = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Summary</h2>\r\n            <p>\r\n                This approach gives your components modular, readable,\r\n                and maintainable styles while keeping the styling concerns scoped and organized in your React project.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Summary;","import {\r\n  StyledComponents,\r\n  Install,\r\n  CreateAndUse,\r\n  PassingProps,\r\n  Extending,\r\n  GlobalStyles,\r\n  Tips,\r\n  Summary\r\n} from '../../components/styling/styled_components';\r\n\r\nconst StyledComponentsPage = () => {\r\n  return (\r\n    <>\r\n      <StyledComponents />\r\n      <Install />\r\n      <CreateAndUse />\r\n      <PassingProps />\r\n      <Extending />\r\n      <GlobalStyles />\r\n      <Tips />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StyledComponentsPage;"],"names":["StyledComponents","_jsxs","children","_jsx","className","Install","Button","styled","button","CreateAndUse","props","primary","PassingProps","ExtendedButton","Extending","GlobalStyles","Tips","Summary","StyledComponentsPage","_Fragment"],"sourceRoot":""}