{"version":3,"file":"static/js/645.542f3cee.chunk.js","mappings":"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","sources":["components/forms/form_libraries/FormLibraries.js","components/forms/form_libraries/FormikExample.js","components/forms/form_libraries/ReactHookFormExample.js","components/forms/form_libraries/Summary.js","pages/forms/FormLibrariesPage.js"],"sourcesContent":["const FormLibraries = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"underline\">Form Libraries</h1>\r\n      <p>\r\n        Using form libraries in React can greatly simplify form handling, especially for complex forms.\r\n        Below are two of the most popular options.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormLibraries;","import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().required(\"Required\"),\r\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n});\r\n\r\nconst FormikExample = () => {\r\n    console.log(\"FormikExample component rendered\");\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Formik</h2>\r\n            <p>\r\n                This is a comprehensive library that simplifies handling forms in React,\r\n                especially for large forms or forms with a lot of validation requirements.\r\n            </p>\r\n\r\n            <h3>Benefits:</h3>\r\n            <h4>State Management</h4>\r\n            <p>Formik manages form state (e.g., values, errors) for you.</p>\r\n            <h4>Validation</h4>\r\n            <p>Built-in support for validation with Yup, making it easier to enforce validation rules.</p>\r\n            <h4>Field Handling</h4>\r\n            <p>Prebuilt components like 'Field' that automatically manage inputs.</p>\r\n            <h4>Performance</h4>\r\n            <p>Reduces unnecessary renders by optimizing form components.</p>            \r\n\r\n            <h3>Code:</h3>\r\n            <pre>\r\n                <code>\r\n                    {`import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().required(\"Required\"),\r\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n});\r\n\r\nconst FormikExample = () => {\r\n    console.log(\"FormikExample component rendered\");\r\n\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ name: \"\", email: \"\" }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values) => {\r\n                alert(\"Form has been submitted!\");\r\n                console.log(\"Formik Submitted:\", values);\r\n            }}\r\n        >\r\n            {({ handleSubmit, values, errors, touched }) => {\r\n                console.log(\"Current Form Values:\", values);\r\n                console.log(\"Validation Errors:\", errors);\r\n                console.log(\"Touched Fields:\", touched);\r\n\r\n                return (\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <div>\r\n                            <label>Name: </label>\r\n                            <Field type=\"text\" name=\"name\" autoComplete=\"name\" />\r\n                            <ErrorMessage className=\"error-message\" name=\"name\" component=\"div\" />\r\n                        </div>\r\n                        <br/>\r\n                        <div>\r\n                            <label htmlFor=\"email\">Email: </label>\r\n                            <Field type=\"email\" name=\"email\" autoComplete=\"email\" />\r\n                            <ErrorMessage className=\"error-message\" name=\"email\" component=\"div\" />\r\n                        </div>\r\n                        <button type=\"submit\">Submit</button>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default FormikExample;`}\r\n                </code>\r\n            </pre>\r\n\r\n            <h3>Output:</h3>\r\n            <Formik\r\n                initialValues={{ name: \"\", email: \"\" }}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values) => {\r\n                    alert(\"Form has been submitted!\");\r\n                    console.log(\"Formik Submitted:\", values);\r\n                }}\r\n            >\r\n                {({ handleSubmit, values, errors, touched }) => {\r\n                    console.log(\"Current Form Values:\", values);\r\n                    console.log(\"Validation Errors:\", errors);\r\n                    console.log(\"Touched Fields:\", touched);\r\n\r\n                    return (\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <div>\r\n                                <label className=\"label\" htmlFor=\"name\">Name: </label>\r\n                                <Field id=\"name\" type=\"text\" name=\"name\" autoComplete=\"name\" />\r\n                                <ErrorMessage className=\"error-message\" name=\"name\" component=\"div\" />\r\n                            </div>\r\n                            <br/>\r\n                            <div>\r\n                                <label className=\"label\" htmlFor=\"email\">Email: </label>\r\n                                <Field id=\"email\" type=\"email\" name=\"email\" autoComplete=\"email\" />\r\n                                <ErrorMessage className=\"error-message\" name=\"email\" component=\"div\" />\r\n                            </div>\r\n\r\n                            <button type=\"submit\">Submit</button>\r\n                        </Form>\r\n                    );\r\n                }}\r\n            </Formik>\r\n            <h1 className=\"output\">\r\n                You can use the browserâ€™s developer tools (Inspect) to view console messages for this example.\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormikExample;","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as Yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().required(\"Required\"),\r\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n});\r\n\r\nconst ReactHookFormExample = () => {\r\n    console.log(\"ReactHookFormExample component rendered\");\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors, touchedFields, isSubmitting },\r\n        watch,\r\n    } = useForm({ resolver: yupResolver(validationSchema) });\r\n\r\n    const onSubmit = (values) => {\r\n        alert(\"Form has been submitted!\");\r\n        console.log(\"React Hook Form Submitted:\", values);\r\n    };\r\n\r\n    console.log(\"Current Form Values:\", watch());\r\n    console.log(\"Validation Errors:\", errors);\r\n    console.log(\"Touched Fields:\", touchedFields);\r\n    console.log(\"Is Submitting:\", isSubmitting);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>React Hook Form</h2>\r\n            <p>\r\n                A performant, flexible, and easy-to-use form library for React that reduces re-renders and provides great developer experience.\r\n            </p>\r\n\r\n            <h3>Benefits:</h3>\r\n            <h4>Minimal Rerenders</h4>\r\n            <p>It minimizes rerenders, making it very efficient.</p>\r\n            <h4>Easy Integration</h4>\r\n            <p>Works well with existing validation libraries like Yup.</p>\r\n            <h4>Ref-based Approach</h4>\r\n            <p>Utilizes refs instead of onChange, leading to better performance with large forms.</p>\r\n            <h4>Less Boilerplate</h4>\r\n            <p>It requires less code for validation, error handling, and maintaining form state.</p>\r\n\r\n            <h3>Code:</h3>\r\n            <pre>\r\n                <code>\r\n                    {`import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as Yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().required(\"Required\"),\r\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n});\r\n\r\nconst ReactHookFormExample = () => {\r\n    console.log(\"ReactHookFormExample component rendered\");\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors, touchedFields, isSubmitting },\r\n        watch,\r\n    } = useForm({ resolver: yupResolver(validationSchema) });\r\n\r\n    const onSubmit = (values) => {\r\n        alert(\"Form has been submitted!\");\r\n        console.log(\"React Hook Form Submitted:\", values);\r\n    };\r\n\r\n    console.log(\"Current Form Values:\", watch());\r\n    console.log(\"Validation Errors:\", errors);\r\n    console.log(\"Touched Fields:\", touchedFields);\r\n    console.log(\"Is Submitting:\", isSubmitting);\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                <label className=\"label\" htmlFor=\"name\">Name: </label>\r\n                <input id=\"name\" type=\"text\" {...register(\"name\")} autoComplete=\"name\" />\r\n                {errors.name && <div className=\"error-message\">{errors.name.message}</div>}\r\n            </div>\r\n            <br/>\r\n            <div>\r\n                <label className=\"label\" htmlFor=\"email\">Email: </label>\r\n                <input id=\"email\" type=\"email\" {...register(\"email\")} autoComplete=\"email\" />\r\n                {errors.email && <div className=\"error-message\">{errors.email.message}</div>}\r\n            </div>\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ReactHookFormExample;`}\r\n                </code>\r\n            </pre>\r\n\r\n            <h3>Output:</h3>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div>\r\n                    <label className=\"label\" htmlFor=\"name\">Name: </label>\r\n                    <input id=\"name\" type=\"text\" {...register(\"name\")} autoComplete=\"name\" />\r\n                    {errors.name && <div className=\"error-message\">{errors.name.message}</div>}\r\n                </div>\r\n                <br/>\r\n                <div>\r\n                    <label className=\"label\" htmlFor=\"email\">Email: </label>\r\n                    <input id=\"email\" type=\"email\" {...register(\"email\")} autoComplete=\"email\" />\r\n                    {errors.email && <div className=\"error-message\">{errors.email.message}</div>}\r\n                </div>\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n            <h1 className=\"output\">\r\n                You can use the browserâ€™s developer tools (Inspect) to view console messages for this example.\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReactHookFormExample;\r\n","const Summary = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Summary</h2>\r\n            <p>\r\n                Both Formik and React Hook Form have robust communities and documentation, so theyâ€™re good choices for most React projects.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Summary;","import {\r\n  FormLibraries,\r\n  FormikExample,\r\n  ReactHookFormExample,\r\n  Summary\r\n} from '../../components/forms/form_libraries';\r\n\r\nconst FormLibrariesPage = () => {\r\n  return (\r\n    <>\r\n      <FormLibraries />\r\n      <FormikExample />\r\n      <ReactHookFormExample />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormLibrariesPage;"],"names":["FormLibraries","_jsxs","children","_jsx","className","validationSchema","Yup","name","required","email","FormikExample","console","log","Formik","initialValues","onSubmit","values","alert","_ref","handleSubmit","errors","touched","Form","htmlFor","Field","id","type","autoComplete","ErrorMessage","component","ReactHookFormExample","register","formState","touchedFields","isSubmitting","watch","useForm","resolver","yupResolver","message","Summary","FormLibrariesPage","_Fragment"],"sourceRoot":""}