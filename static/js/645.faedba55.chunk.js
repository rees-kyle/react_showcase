"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[645],{1645:(e,n,i)=>{i.r(n),i.d(n,{default:()=>x});var r=i(579);const a=()=>(0,r.jsxs)("div",{children:[(0,r.jsx)("h1",{className:"underline",children:"Form Libraries"}),(0,r.jsx)("p",{children:"Using form libraries in React can greatly simplify form handling, especially for complex forms. Below are two of the most popular options."})]});i(5043);var o=i(3892),s=i(899),l=i(8691);i(3923);const t=s.Ik({name:s.Yj().required("Required"),email:s.Yj().email("Invalid email").required("Required")}),m=()=>(console.log("FormikExample component rendered"),(0,r.jsxs)("div",{children:[(0,r.jsx)("br",{}),(0,r.jsx)("hr",{}),(0,r.jsx)("h2",{children:"Formik"}),(0,r.jsx)("p",{children:"This is a comprehensive library that simplifies handling forms in React, especially for large forms or forms with a lot of validation requirements."}),(0,r.jsx)("h3",{children:"Benefits:"}),(0,r.jsx)("h4",{children:"State Management"}),(0,r.jsx)("p",{children:"Formik manages form state (e.g., values, errors) for you."}),(0,r.jsx)("h4",{children:"Validation"}),(0,r.jsx)("p",{children:"Built-in support for validation with Yup, making it easier to enforce validation rules."}),(0,r.jsx)("h4",{children:"Field Handling"}),(0,r.jsx)("p",{children:"Prebuilt components like 'Field' that automatically manage inputs."}),(0,r.jsx)("h4",{children:"Performance"}),(0,r.jsx)("p",{children:"Reduces unnecessary renders by optimizing form components."}),(0,r.jsx)("h3",{children:"Code:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{children:'import React from "react";\nimport { Formik, Form, Field, ErrorMessage } from "formik";\nimport * as Yup from "yup";\nimport { sanitizeInput } from "../../../utils/sanitizeInput";\nimport \'./../../../button.css\';\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required("Required"),\n  email: Yup.string().email("Invalid email").required("Required"),\n});\n\nconst FormikExample = () => {\n    console.log("FormikExample component rendered");\n\n    return (\n        <div>\n            <Formik\n                initialValues={{ name: "", email: "" }}\n                validationSchema={validationSchema}\n                onSubmit={(values) => {\n                    const sanitizedValues = {\n                        name: sanitizeInput(values.name),\n                        email: sanitizeInput(values.email),\n                    };\n\n                    alert("Form has been submitted!");\n                    console.log("Sanitized Formik Submitted:", sanitizedValues);\n                }}\n            >\n                {({ handleSubmit, values, errors, touched }) => {\n                    console.log("Current Form Values:", values);\n                    console.log("Validation Errors:", errors);\n                    console.log("Touched Fields:", touched);\n\n                    return (\n                        <Form onSubmit={handleSubmit}>\n                            <div>\n                                <label className="label" htmlFor="formik-name">Name: </label>\n                                <Field id="formik-name" type="text" name="name" autoComplete="name" />\n                                <ErrorMessage className="error-message" name="name" component="div" />\n                            </div>\n                            <br/>\n                            <div>\n                                <label className="label" htmlFor="formik-email">Email: </label>\n                                <Field id="formik-email" type="email" name="email" autoComplete="email" />\n                                <ErrorMessage className="error-message" name="email" component="div" />\n                            </div>\n\n                            <button type="submit">Submit</button>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </div>\n    );\n}\n\nexport default FormikExample;'})}),(0,r.jsx)("h3",{children:"Output:"}),(0,r.jsx)(o.l1,{initialValues:{name:"",email:""},validationSchema:t,onSubmit:e=>{const n={name:(0,l.o)(e.name),email:(0,l.o)(e.email)};alert("Form has been submitted!"),console.log("Sanitized Formik Submitted:",n)},children:e=>{let{handleSubmit:n,values:i,errors:a,touched:s}=e;return console.log("Current Form Values:",i),console.log("Validation Errors:",a),console.log("Touched Fields:",s),(0,r.jsxs)(o.lV,{onSubmit:n,children:[(0,r.jsxs)("div",{children:[(0,r.jsx)("label",{className:"label",htmlFor:"formik-name",children:"Name: "}),(0,r.jsx)(o.D0,{id:"formik-name",type:"text",name:"name",autoComplete:"name"}),(0,r.jsx)(o.Kw,{className:"error-message",name:"name",component:"div"})]}),(0,r.jsx)("br",{}),(0,r.jsxs)("div",{children:[(0,r.jsx)("label",{className:"label",htmlFor:"formik-email",children:"Email: "}),(0,r.jsx)(o.D0,{id:"formik-email",type:"email",name:"email",autoComplete:"email"}),(0,r.jsx)(o.Kw,{className:"error-message",name:"email",component:"div"})]}),(0,r.jsx)("button",{type:"submit",children:"Submit"})]})}}),(0,r.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."})]}));var d=i(4858),c=i(8403);const u=s.Ik({name:s.Yj().required("Required"),email:s.Yj().email("Invalid email").required("Required")}),h=()=>{console.log("ReactHookFormExample component rendered");const{register:e,handleSubmit:n,formState:{errors:i,touchedFields:a,isSubmitting:o},watch:s}=(0,d.mN)({resolver:(0,c.t)(u)});return console.log("Current Form Values:",s()),console.log("Validation Errors:",i),console.log("Touched Fields:",a),console.log("Is Submitting:",o),(0,r.jsxs)("div",{children:[(0,r.jsx)("br",{}),(0,r.jsx)("hr",{}),(0,r.jsx)("h2",{children:"React Hook Form"}),(0,r.jsx)("p",{children:"A performant, flexible, and easy-to-use form library for React that reduces re-renders and provides great developer experience."}),(0,r.jsx)("h3",{children:"Benefits:"}),(0,r.jsx)("h4",{children:"Minimal Rerenders"}),(0,r.jsx)("p",{children:"It minimizes rerenders, making it very efficient."}),(0,r.jsx)("h4",{children:"Easy Integration"}),(0,r.jsx)("p",{children:"Works well with existing validation libraries like Yup."}),(0,r.jsx)("h4",{children:"Ref-based Approach"}),(0,r.jsx)("p",{children:"Utilizes refs instead of onChange, leading to better performance with large forms."}),(0,r.jsx)("h4",{children:"Less Boilerplate"}),(0,r.jsx)("p",{children:"It requires less code for validation, error handling, and maintaining form state."}),(0,r.jsx)("h3",{children:"Code:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{children:'import React from "react";\nimport { useForm } from "react-hook-form";\nimport * as Yup from "yup";\nimport { yupResolver } from "@hookform/resolvers/yup";\nimport { sanitizeInput } from "../../../utils/sanitizeInput";\nimport "./../../../button.css";\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required("Required"),\n  email: Yup.string().email("Invalid email").required("Required"),\n});\n\nconst ReactHookFormExample = () => {\n  console.log("ReactHookFormExample component rendered");\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, touchedFields, isSubmitting },\n    watch,\n  } = useForm({ resolver: yupResolver(validationSchema) });\n\n  const onSubmit = (values) => {\n    const sanitizedValues = {\n      name: sanitizeInput(values.name),\n      email: sanitizeInput(values.email),\n    };\n\n    alert("Form has been submitted!");\n    console.log("Sanitized React Hook Form Submitted:", sanitizedValues);\n  };\n\n  console.log("Current Form Values:", watch());\n  console.log("Validation Errors:", errors);\n  console.log("Touched Fields:", touchedFields);\n  console.log("Is Submitting:", isSubmitting);\n\n\n  return (\n    <div>\n      <h3>Output:</h3>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div>\n          <label className="label" htmlFor="name">Name: </label>\n          <input id="name" type="text" {...register("name")} autoComplete="name" />\n          {errors.name && <div className="error-message">{errors.name.message}</div>}\n        </div>\n        <br />\n        <div>\n          <label className="label" htmlFor="email">Email: </label>\n          <input id="email" type="email" {...register("email")} autoComplete="email" />\n          {errors.email && <div className="error-message">{errors.email.message}</div>}\n        </div>\n        <button type="submit">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ReactHookFormExample;\n'})}),(0,r.jsx)("h3",{children:"Output:"}),(0,r.jsxs)("form",{onSubmit:n((e=>{const n={name:(0,l.o)(e.name),email:(0,l.o)(e.email)};alert("Form has been submitted!"),console.log("Sanitized React Hook Form Submitted:",n)})),children:[(0,r.jsxs)("div",{children:[(0,r.jsx)("label",{className:"label",htmlFor:"name",children:"Name: "}),(0,r.jsx)("input",{id:"name",type:"text",...e("name"),autoComplete:"name"}),i.name&&(0,r.jsx)("div",{className:"error-message",children:i.name.message})]}),(0,r.jsx)("br",{}),(0,r.jsxs)("div",{children:[(0,r.jsx)("label",{className:"label",htmlFor:"email",children:"Email: "}),(0,r.jsx)("input",{id:"email",type:"email",...e("email"),autoComplete:"email"}),i.email&&(0,r.jsx)("div",{className:"error-message",children:i.email.message})]}),(0,r.jsx)("button",{type:"submit",children:"Submit"})]}),(0,r.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."})]})},p=()=>(0,r.jsxs)("div",{children:[(0,r.jsx)("br",{}),(0,r.jsx)("hr",{}),(0,r.jsx)("h2",{children:"Summary"}),(0,r.jsx)("p",{children:"Both Formik and React Hook Form have robust communities and documentation, so they\u2019re good choices for most React projects."})]}),x=()=>(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a,{}),(0,r.jsx)(m,{}),(0,r.jsx)(h,{}),(0,r.jsx)(p,{})]})},8691:(e,n,i)=>{function r(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")}i.d(n,{o:()=>r})},3923:()=>{}}]);
//# sourceMappingURL=645.faedba55.chunk.js.map