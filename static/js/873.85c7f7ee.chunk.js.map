{"version":3,"file":"static/js/873.85c7f7ee.chunk.js","mappings":"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","sources":["components/styling/emotion/Emotion.js","components/styling/emotion/Setup.js","components/styling/emotion/Usage.js","components/styling/emotion/CSSProp.js","components/styling/emotion/StyledComponents.js","components/styling/emotion/Theming.js","components/styling/emotion/Summary.js","pages/styling/EmotionPage.js"],"sourcesContent":["const Emotion = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"underline\">Emotion</h1>\r\n      <p>\r\n        Emotion is a powerful CSS-in-JS library for styling components in React. \r\n        It allows you to write CSS directly within your JavaScript\r\n        and can be particularly helpful in creating dynamic and themeable components.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Emotion;","const Setup = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Setup</h2>\r\n      <p>\r\n        To install Emotion, you can use either npm or yarn in BASH.\r\n      </p>\r\n    \r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`npm install @emotion/react @emotion/styled`}\r\n        </code>\r\n      </pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Setup;","const Usage = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Using Emotion in React</h2>\r\n      <p>\r\n        There are two primary ways to use Emotion:\r\n      </p>\r\n      <h3>@emotion/react</h3>\r\n      <p>Used for the css prop and creating styled components.</p>\r\n\r\n      <h3>@emotion/styled</h3>\r\n      <p>Used for building styled components similar to the Styled Components library.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Usage;","/** @jsxImportSource @emotion/react */\r\n\r\n/*\r\nThis pragma tells the compiler to use Emotion's JSX transformation,\r\nenabling the use of the `css` prop for styling\r\nwithout needing to import the `css` function in every component.\r\n*/\r\n\r\nimport { css } from '@emotion/react'; // Importing Emotion for the `css` prop functionality\r\n\r\nconst CSSProp = () => (\r\n  <div>\r\n    <br/>\r\n    <hr/>\r\n    <h2>The 'CSS' Prop</h2>\r\n    <p>The 'css' prop allows you to add CSS styles directly to your component.</p>\r\n\r\n    <h3>Code:</h3>\r\n    <pre>\r\n      <code>\r\n        {`/** @jsxImportSource @emotion/react */\r\n\r\nimport { css } from '@emotion/react';\r\n\r\nconst CSSProp = () => (\r\n  <div\r\n    css={css\\`\r\n      background-color: #CCCCCC;\r\n      padding: 20px;\r\n      border-radius: 5px;\r\n      text-align: center;\r\n      color: rgb(52, 52, 52);\r\n      font-weight: bold;\r\n      font-size: 18px;\r\n    \\`}\r\n  >\r\n    Hello Emotion!\r\n  </div>\r\n);\r\n\r\nexport default CSSProp;\r\n`}\r\n      </code>\r\n    </pre>\r\n\r\n\r\n    <h3>Output:</h3>\r\n    <div\r\n      css={css`\r\n        background-color: #CCCCCC;\r\n        padding: 20px;\r\n        border-radius: 5px;\r\n        text-align: center;\r\n        color: rgb(52, 52, 52);\r\n        font-weight: bold;\r\n        font-size: 18px;\r\n      `}\r\n    >\r\n      Hello Emotion!\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default CSSProp;","import styled from '@emotion/styled'; // Importing the styled function from Emotion\r\n\r\n// Creating a styled button component using Emotion\r\nconst Button = styled.button`\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 0.5rem 1rem;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 1.2rem;\r\n  margin: 0rem 1rem;\r\n  margin-bottom: 2rem;\r\n  cursor: pointer;\r\n  border-radius: 0.3rem;\r\n\r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n`;\r\n\r\n\r\n// Defining the component\r\nconst StyledComponents = () => (\r\n  <div>\r\n    <br/>\r\n    <hr/>\r\n    <h2>Styled Components with Emotion</h2>\r\n    <p>You can also create reusable styled components with '@emotion/styled'.</p>\r\n\r\n    <h3>Code:</h3>\r\n    <pre>\r\n      <code>\r\n        {`import styled from '@emotion/styled';\r\n\r\nconst Button = styled.button\\`\r\n  background-color: #4CAF50;\r\n  border: none;\r\n  color: white;\r\n  padding: 0.5rem 1rem;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 1.2rem;\r\n  margin: 0rem 1rem;\r\n  margin-bottom: 2rem;\r\n  cursor: pointer;\r\n  border-radius: 0.3rem;\r\n\r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n\\`;\r\n\r\n\r\nconst StyledComponents = () => (\r\n  <div>\r\n    <Button>Click Me</Button>\r\n  </div>\r\n);\r\n\r\nexport default StyledComponents;\r\n`}\r\n      </code>\r\n    </pre>\r\n\r\n    <h3>Output:</h3>\r\n    <Button>Click Me</Button>\r\n  </div>\r\n);\r\n\r\nexport default StyledComponents; // Exporting the component","import { ThemeProvider } from '@emotion/react';  // Importing ThemeProvider from Emotion to manage themes\r\nimport styled from '@emotion/styled'; // Import styled from Emotion\r\n\r\n// Defining a theme object with primary and secondary colors\r\nconst theme = {\r\n  colors: {\r\n    primary: '#9067C6',     // Primary color for the button\r\n    secondary: '#7A54A3'    // Secondary color for the button hover effect\r\n  }\r\n};\r\n\r\n// Creating a styled button component using Emotion\r\nconst Button = styled.button`\r\n  padding: 0.5rem 1rem;\r\n  background-color: ${({ theme }) => theme.colors.primary};\r\n  border: none;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 1.2rem;\r\n  margin: 0rem 1rem;\r\n  margin-bottom: 2rem;\r\n  cursor: pointer;\r\n  border-radius: 0.3rem;\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.colors.secondary};\r\n  }\r\n`;\r\n\r\n// Theming component\r\nconst Theming = () => (\r\n  // Wrapping the Button component in ThemeProvider to pass the theme\r\n  <ThemeProvider theme={theme}>\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Theming with Emotion</h2>\r\n      <p>Emotion supports themes that can be passed through React’s ThemeProvider.</p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`import { ThemeProvider } from '@emotion/react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst theme = {\r\n  colors: {\r\n    primary: '#9067C6',\r\n    secondary: '#7A54A3'\r\n  }\r\n};\r\n\r\nconst Button = styled.button\\`\r\n  padding: 0.5rem 1rem;\r\n  background-color: \\${({ theme }) => theme.colors.primary};\\\r\n  \\n  border: none;\r\n  color: white;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 1.2rem;\r\n  margin: 0rem 1rem;\r\n  margin-bottom: 2rem;\r\n  cursor: pointer;\r\n  border-radius: 0.3rem;\r\n\r\n  &:hover {\r\n    background-color: \\${({ theme }) => theme.colors.secondary};\\\r\n    \\n  }\r\n\\`;\r\n\r\n\r\nconst Theming = () => (\r\n  <ThemeProvider theme={theme}>\r\n    <div>\r\n      <Button>Click Me</Button>\r\n    </div>\r\n  </ThemeProvider>\r\n);\r\n\r\nexport default Theming;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      <Button>Click Me</Button>\r\n    </div>\r\n  </ThemeProvider>\r\n);\r\n\r\nexport default Theming;","const Summary = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Summary</h2>\r\n            <p>\r\n                Emotion’s flexibility with themes, the 'css' prop,\r\n                and styled components makes it a versatile tool for styling React applications.\r\n                This approach helps keep styles scoped and reduces the potential for styling conflicts,\r\n                especially in large projects.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Summary;","import {\r\n  Emotion,\r\n  Setup,\r\n  Usage,\r\n  CSSProp,\r\n  StyledComponents,\r\n  Theming,\r\n  Summary\r\n} from '../../components/styling/emotion';\r\n\r\nconst EmotionPage = () => {\r\n  return (\r\n    <>\r\n      <Emotion />\r\n      <Setup />\r\n      <Usage />\r\n      <CSSProp />\r\n      <StyledComponents />\r\n      <Theming />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EmotionPage;"],"names":["Emotion","_jsxs","children","_jsx","className","Setup","Usage","CSSProp","css","Button","styled","button","StyledComponents","theme","colors","primary","secondary","_ref","_ref2","Theming","ThemeProvider","Summary","EmotionPage","_Fragment"],"sourceRoot":""}