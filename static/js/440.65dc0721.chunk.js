"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[440],{3440:(e,n,t)=>{t.r(n),t.d(n,{default:()=>h});var r=t(579);const s=()=>(0,r.jsxs)("div",{children:[(0,r.jsx)("h1",{className:"underline",children:"Component Testing"}),(0,r.jsx)("p",{children:"In React, component testing focuses on verifying that individual UI pieces behave correctly. Tools like React Testing Library help test components by interacting with them like a user would. It ensures that components render, handle events, and display the right output, making the app more reliable and easier to maintain."})]}),i=()=>(0,r.jsxs)("div",{children:[(0,r.jsx)("br",{}),(0,r.jsx)("hr",{}),(0,r.jsx)("h2",{children:"Setup"}),(0,r.jsx)("h3",{children:"Code:"}),(0,r.jsx)("p",{children:"If you haven\u2019t installed it yet, add 'React Testing Library' to your project using BASH."}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{children:"npm install @testing-library/react"})})]}),o=()=>(0,r.jsxs)("div",{children:[(0,r.jsx)("br",{}),(0,r.jsx)("hr",{}),(0,r.jsx)("h2",{children:"Basic Concepts"}),(0,r.jsx)("h3",{children:"Render"}),(0,r.jsx)("p",{children:"Use the 'render' function from RTL to display your component in a virtual DOM. This allows you to interact with and test it."}),(0,r.jsx)("h3",{children:"Queries"}),(0,r.jsx)("p",{children:"RTL provides various queries (like 'getByText', 'getByRole', 'getByTestId', etc.) to select and interact with elements within the rendered component."}),(0,r.jsx)("h3",{children:"User Events"}),(0,r.jsx)("p",{children:"You can simulate user interactions using 'userEvent', like clicking, typing, etc."})]});t(5043),t(3923);const l=e=>{let{onClick:n,label:t,type:s="button",disabled:i=!1,className:o=""}=e;return(0,r.jsx)("button",{onClick:n,type:s,disabled:i,className:o,children:t})},c=()=>(0,r.jsxs)("div",{children:[(0,r.jsx)("br",{}),(0,r.jsx)("hr",{}),(0,r.jsx)("h2",{children:"Writing a Simple Test"}),(0,r.jsx)("p",{children:"Here's a basic test example for a button component."}),(0,r.jsx)("h3",{children:"Code:"}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{children:"// MyButton.js\nimport React from 'react';\nimport './../../../button.css';\n\nconst MyButton = ({ onClick, label, type = \"button\", disabled = false, className = \"\" }) => (\n  <button onClick={onClick} type={type} disabled={disabled} className={className}>\n    {label}\n  </button>\n);\n\nexport default MyButton;\n"})}),(0,r.jsx)("br",{}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{children:"// button.css\nbutton {\n    position: relative;\n    font-weight: bold;\n    left: 1rem;\n    top: 1rem;\n    margin-bottom: 2rem;\n    padding: 1.25rem;\n    border: .0625rem solid green;\n    border-radius: .3125rem;\n    background-color: #000000;\n    color: rgb(214, 214, 214);\n    font-size: 1rem;\n    font-weight: bold;\n    width: 10rem;\n    box-shadow: 0.625rem 0.625rem 0.0625rem rgba(0, 0, 0, 0.5);\n}\n\nbutton:hover {\n    outline: none;\n    box-shadow: 0 0 1rem rgba(255, 255, 255, 0.5);\n}\n\nbutton:active {\n    background-color: green;\n    box-shadow: 0.312rem 0.312rem 0.0312rem rgba(0, 0, 0, 0.5);\n}\n"})}),(0,r.jsx)("br",{}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{children:"// Write.js\nimport React from 'react';\nimport MyButton from './MyButton';\n\nconst Write = () => {\n  const handleButtonClick = () => {\n    alert('Button was clicked!');\n  };\n\n  return (\n    <div>\n      <MyButton onClick={handleButtonClick} label=\"Click Me\" />\n    </div>\n  );\n}\n"})}),(0,r.jsx)("br",{}),(0,r.jsx)("pre",{children:(0,r.jsx)("code",{children:"// MyButton.test.js\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport MyButton from './MyButton';\n\ntest('renders button with label and responds to click', () => {\nconst handleClick = jest.fn();\n\nrender(<MyButton onClick={handleClick} label=\"Click Me\" />);\n\nconst button = screen.getByText(/click me/i);\n\nuserEvent.click(button);\n\n\nexpect(button).toBeInTheDocument();\nexpect(handleClick).toHaveBeenCalledTimes(1);\n});\n"})}),(0,r.jsx)("h3",{children:"Output:"}),(0,r.jsx)(l,{onClick:()=>{alert("Button was clicked!")},label:"Click Me"})]}),d=()=>(0,r.jsxs)("div",{children:[(0,r.jsx)("br",{}),(0,r.jsx)("hr",{}),(0,r.jsx)("h2",{children:"Common Patterns"}),(0,r.jsx)("h3",{children:"Testing Props"}),(0,r.jsx)("p",{children:"Check that component props change behavior or output."}),(0,r.jsx)("h3",{children:"State Changes"}),(0,r.jsx)("p",{children:"For stateful components, confirm that they render different content based on state."}),(0,r.jsx)("h3",{children:"Conditional Rendering"}),(0,r.jsx)("p",{children:"Ensure elements render or are hidden based on conditions."}),(0,r.jsx)("h3",{children:"Async Testing"}),(0,r.jsx)("p",{children:"RTL has utilities like 'waitFor' to handle asynchronous code."})]}),a=()=>(0,r.jsxs)("div",{children:[(0,r.jsx)("br",{}),(0,r.jsx)("hr",{}),(0,r.jsx)("h2",{children:"Helpful RTL Utilities"}),(0,r.jsx)("h3",{children:"'screen'"}),(0,r.jsx)("p",{children:"An alternative to destructuring 'getBy' and 'findBy' from render; it provides access to all queries globally."}),(0,r.jsx)("h3",{children:"'waitFor'"}),(0,r.jsx)("p",{children:"Waits for asynchronous updates to complete in the component."}),(0,r.jsx)("h3",{children:"'userEvent"}),(0,r.jsx)("p",{children:"Mocks user actions like typing, clicking, etc."})]}),h=()=>(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s,{}),(0,r.jsx)(i,{}),(0,r.jsx)(o,{}),(0,r.jsx)(c,{}),(0,r.jsx)(d,{}),(0,r.jsx)(a,{})]})},3923:()=>{}}]);
//# sourceMappingURL=440.65dc0721.chunk.js.map