{"version":3,"file":"static/js/641.77009938.chunk.js","mappings":"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","sources":["components/typescript/basic_concepts/BasicConcepts.tsx","components/typescript/basic_concepts/Setup.tsx","components/typescript/basic_concepts/TypingFunctionalComponents.tsx","components/typescript/basic_concepts/Button.tsx","components/typescript/basic_concepts/TypingProps.tsx","components/typescript/basic_concepts/UseStateWithTypes.tsx","components/typescript/basic_concepts/TypingUseEffectDependencies.tsx","components/typescript/basic_concepts/SimpleExample.tsx","components/typescript/basic_concepts/LoadingSpinner.tsx","components/typescript/basic_concepts/ComplexExample.tsx","components/typescript/basic_concepts/EventHandling.tsx","components/typescript/basic_concepts/TypingRefs.tsx","components/typescript/basic_concepts/ThemeContext.tsx","components/typescript/basic_concepts/ThemeDisplay.tsx","components/typescript/basic_concepts/TypingContextAndCustomHooks.tsx","components/typescript/basic_concepts/WithLogging.tsx","components/typescript/basic_concepts/HelloWithLogging.tsx","components/typescript/basic_concepts/Hello.tsx","components/typescript/basic_concepts/TypingHigherOrderComponents.tsx","components/typescript/basic_concepts/List.tsx","components/typescript/basic_concepts/UsingGenericsInComponents.tsx","components/typescript/basic_concepts/Summary.tsx","pages/typescript/BasicConceptsPage.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst BasicConcepts: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"underline\">Basic Concepts</h1>\r\n      <p>\r\n        TypeScript is a programming language that adds types to JavaScript.\r\n        It helps find mistakes while coding and makes projects easier to understand and manage.\r\n        It turns into regular JavaScript so it can run anywhere JavaScript runs.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BasicConcepts;","import React from 'react';\r\n\r\nconst Setup: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Setting Up TypeScript in a React Project</h2>\r\n      <h3>Code:</h3>\r\n      <p>Run the following command in BASH to install TypeScript and React type definitions.</p>\r\n      <pre>\r\n        <code>\r\n          {`npm install --save-dev @types/react @types/react-dom typescript`}\r\n        </code>\r\n      </pre>\r\n\r\n      <p>Run the following command in BASH to generate a TypeScript config file.</p>\r\n      <pre>\r\n        <code>\r\n          {`npx tsc --init`}\r\n        </code>\r\n      </pre>\r\n\r\n      <p>Here is a simple config file that will work well with React and TypeScript.</p>\r\n      <pre>\r\n        <code>\r\n          {`{\r\n  \"compilerOptions\": {\r\n    \"target\": \"es5\",\r\n    \"lib\": [\"dom\", \"es2015\"],\r\n    \"allowJs\": true,\r\n    \"jsx\": \"react-jsx\",\r\n    \"moduleResolution\": \"node\",\r\n    \"module\": \"esnext\",\r\n    \"strict\": true,\r\n    \"esModuleInterop\": true,\r\n    \"skipLibCheck\": true,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"noImplicitAny\": true\r\n  },\r\n  \"include\": [\r\n    \"src/**/*.ts\",\r\n    \"src/**/*.tsx\"\r\n  ],\r\n  \"exclude\": [\r\n    \"node_modules\"\r\n  ]\r\n}\r\n`}\r\n        </code>\r\n      </pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Setup;","// Importing React to use JSX and type definitions\r\nimport React from 'react';\r\n\r\n// First define a type for the component’s props\r\ntype MyComponentProps = {\r\n  message: string;\r\n};\r\n\r\n// Example using React.FC\r\n// Defining the component using React.FC, which automatically types 'children' and other common props\r\nconst MyComponentWithFC: React.FC<MyComponentProps> = ({ message }) => {\r\n  return <h1 className=\"output\">{message}</h1>;\r\n};\r\n\r\n// Example without using React.FC\r\n// Defining the component without React.FC, explicitly typing the props\r\nconst MyComponentWithoutFC = ({ message }: MyComponentProps) => {\r\n  return <h1 className=\"output\">{message}</h1>;\r\n};\r\n\r\n\r\nconst TypingFunctionalComponents: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Typing Functional Components</h2>\r\n      <p>\r\n        When creating functional components in React with TypeScript,\r\n        there are a couple of common approaches you can take to type your components properly.\r\n        Here’s a look at two methods you can use.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingFunctionalComponents;\r\n\r\n\r\nexport const WithReactFC = () => {\r\n  return (\r\n    <div>\r\n     <h3>With React.FC</h3>\r\n      <p>\r\n        One approach is to use React.FC (or React.FunctionComponent),\r\n        which provides some built-in typing benefits like automatically handling children props and default props.\r\n      </p>\r\n\r\n      <h4>Code:</h4>\r\n      <pre>\r\n        <code>\r\n          {`import React from 'react';\r\n\r\nconst MyComponent: React.FC<{ message: string }> = ({ message }) => {\r\n  return <h1 className=\"output\">{message}</h1>;\r\n};\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h4>Output:</h4>\r\n      <MyComponentWithFC message=\"This is from the component using React.FC\" />\r\n      <br/>\r\n      <hr/>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const WithoutReactFC = () => {\r\n  return (\r\n    <div>\r\n      <h3>Without React.FC</h3>\r\n      <p>\r\n        Another approach is to define your component’s prop types separately without using React.FC.\r\n        This can sometimes give you a bit more control and clarity, especially in larger projects.\r\n      </p>\r\n\r\n      <h4>Code:</h4>\r\n      <pre>\r\n        <code>\r\n          {`import React from 'react';\r\n\r\ntype MyComponentProps = {\r\n  message: string;\r\n};\r\n\r\nconst MyComponent = ({ message }: MyComponentProps) => {\r\n  return <h1 className=\"output\">{message}</h1>;\r\n};\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h4>Output:</h4>\r\n      <MyComponentWithoutFC message=\"This is from the component without using React.FC\" />\r\n    </div>\r\n  );\r\n};","// Define a type for the Button component's props\r\ntype ButtonProps = {\r\nlabel: string;          // Label text to display on the button\r\nonClick: () => void;    // Function to handle button click events\r\n};\r\n\r\n// Define the Button component, typing its props with ButtonProps\r\nconst Button: React.FC<ButtonProps> = ({ label, onClick }) => {\r\n// Renders a button element with an onClick event and label\r\nreturn <button type=\"button\" onClick={onClick}>{label}</button>;\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from './Button';\r\nimport '../../../button.css';\r\n\r\nconst TypingProps: React.FC = () => {\r\n  const handleClick = () => {\r\n    alert('Button was clicked!');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Typing Props</h2>\r\n      <p>\r\n        When working with props in React using TypeScript,\r\n        you can define a separate type or interface\r\n        to describe the expected shape of the props object.\r\n        This helps ensure your components receive the correct data\r\n        and improves code readability and maintainability.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// Button.tsx\r\ntype ButtonProps = {\r\nlabel: string;\r\nonClick: () => void;\r\n};\r\n\r\nconst Button: React.FC<ButtonProps> = ({ label, onClick }) => {\r\nreturn <button type=\"button\" onClick={onClick}>{label}</button>;\r\n};\r\n\r\nexport default Button;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// TypingProps.tsx\r\nimport React from 'react';\r\nimport Button from './Button';\r\nimport '../../../button.css';\r\n\r\nconst TypingProps: React.FC = () => {\r\n  const handleClick = () => {\r\n    alert('Button was clicked!');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button label=\"Click Me\" onClick={handleClick} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingProps;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      <Button label=\"Click Me\" onClick={handleClick} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingProps;","import React, { useState, useEffect } from 'react';\r\nimport '../../../button.css';\r\n\r\nconst UseStateWithTypes: React.FC = () => {\r\n  const [count, setCount] = useState<number>(0);\r\n  const [user, setUser] = useState<{ name: string; age: number } | null>(null);\r\n\r\n  // Log when count changes\r\n  useEffect(() => {\r\n    console.log('Count updated:', count);\r\n  }, [count]);\r\n\r\n  // Log when user changes\r\n  useEffect(() => {\r\n    console.log('User updated:', user);\r\n  }, [user]);\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Using 'useState' with Types</h2>\r\n      <p>\r\n        TypeScript can automatically infer the type of state in useState,\r\n        but you can also specify it yourself,\r\n        especially when the state is null or needs a specific structure.\r\n        This helps with clarity and type safety.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`import React, { useState, useEffect } from 'react';\r\nimport '../../../button.css';\r\n\r\nconst UseStateWithTypes: React.FC = () => {\r\n  const [count, setCount] = useState<number>(0);\r\n  const [user, setUser] = useState<{ name: string; age: number } | null>(null);\r\n\r\n  useEffect(() => {\r\n    console.log('Count updated:', count);\r\n  }, [count]);\r\n\r\n  useEffect(() => {\r\n    console.log('User updated:', user);\r\n  }, [user]);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"output\">Count: {count}</h1>\r\n      <button type=\"button\" onClick={() => setCount(prev => prev + 1)}>\r\n        Increment Count\r\n      </button>\r\n      <h1 className=\"output\">User: {user ? \\`\\${user.name}, Age: \\${user.age}\\` : 'No user set'}</h1>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => setUser({ name: 'Alice', age: 30 })}\r\n      >\r\n        Set User\r\n      </button>\r\n      <br/>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          console.log('User cleared');\r\n          setUser(null);\r\n        }}\r\n      >\r\n        Clear User\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UseStateWithTypes;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      <h1 className=\"output\">Count: {count}</h1>\r\n      <button type=\"button\" onClick={() => setCount(prev => prev + 1)}>\r\n        Increment Count\r\n      </button>\r\n      <h1 className=\"output\">User: {user ? `${user.name}, Age: ${user.age}` : 'No user set'}</h1>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => setUser({ name: 'Alice', age: 30 })}\r\n      >\r\n        Set User\r\n      </button>\r\n      <br/>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          console.log('User cleared');\r\n          setUser(null);\r\n        }}\r\n      >\r\n        Clear User\r\n      </button>\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n      <p>\r\n        This example shows how to use 'useState' with TypeScript.\r\n        It demonstrates how TypeScript can infer the type of state\r\n        or how you can explicitly specify types for state variables.\r\n        The 'count' state is typed as a number,\r\n        and the 'user' state is typed as an object or 'null'.\r\n        This example also shows how to manage and update state in a React component\r\n        while ensuring type safety.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UseStateWithTypes;\r\n","import React from 'react';\r\n\r\nconst TypingUseEffectDependencies: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Typing 'useEffect' Dependencies</h2>\r\n      <p>\r\n        When you use useEffect in React + TypeScript,\r\n        dependencies are often simple values (like strings or numbers),\r\n        and TypeScript infers the types automatically.\r\n        But when the dependency is a more complex object (e.g., functions, custom types),\r\n        explicit typing helps avoid bugs like missing dependencies or incorrect updates.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingUseEffectDependencies;","import { useEffect, useState } from 'react';\r\nimport '../../../button.css';\r\n\r\nfunction SimpleExample() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    console.log(`Count is: ${count}`);\r\n  }, [count]); // TypeScript knows count is a number\r\n\r\n  return (\r\n    <div>\r\n      <h3>Simple Example Without Manual Typing</h3>\r\n      <h4>Code:</h4>\r\n      <pre>\r\n        <code>\r\n          {`import { useEffect, useState } from 'react';\r\nimport '../../../button.css';\r\n\r\nfunction SimpleExample() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    console.log(\\`Count is: ${count}\\`);\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={() => setCount(count + 1)}>Increment</button>;\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SimpleExample;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <p>TypeScript knows 'count' is a number.</p>\r\n\r\n      <h4>Output:</h4>\r\n      <button type=\"button\" onClick={() => setCount(count + 1)}>Increment</button>;\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SimpleExample;","import React from 'react';\r\n\r\n// LoadingSpinner Component\r\nconst LoadingSpinner: React.FC = () => {\r\n  const styles: { [key: string]: React.CSSProperties } = {\r\n    spinnerContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      padding: '2.5rem',\r\n    },\r\n    spinner: {\r\n      marginLeft: '1rem',\r\n      width: '2.5rem',\r\n      height: '2.5rem',\r\n      border: '0.25rem solid #ccc',\r\n      borderTop: '0.25rem solid #007bff',\r\n      borderRadius: '50%',\r\n      animation: 'spin 1s linear infinite',\r\n    },\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const styleSheet = document.styleSheets[0];\r\n    const keyframes = `\r\n      @keyframes spin {\r\n        0% { transform: rotate(0deg); }\r\n        100% { transform: rotate(360deg); }\r\n      }\r\n    `;\r\n    styleSheet.insertRule(keyframes, styleSheet.cssRules.length);\r\n  }, []);\r\n\r\n  return (\r\n    <div style={styles.spinnerContainer}>\r\n      <div style={styles.spinner}></div>\r\n      <p>Loading...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;","import { useEffect, useCallback, useState, useRef } from 'react';\r\nimport LoadingSpinner from './LoadingSpinner';\r\n\r\ntype FetchData = () => Promise<void>;\r\n\r\nfunction ComplexExample() {\r\n  const [data, setData] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [hasFetched, setHasFetched] = useState<boolean>(false);\r\n  const observerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const fetchData: FetchData = useCallback(async () => {\r\n    console.log('[fetchData] Fetching data...');\r\n    try {\r\n      setLoading(true);\r\n      await new Promise((resolve) => setTimeout(resolve, 2000)); // Simulate 2 second delay\r\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\r\n      const result = await response.json();\r\n      console.log('[fetchData] Data fetched:', result.title); // Keep logging the title\r\n      setData('fetched'); // Just a placeholder to trigger display\r\n    } catch (error) {\r\n      console.error('[fetchData] Fetch error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!observerRef.current || hasFetched) return;\r\n\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        if (entries[0].isIntersecting && !hasFetched) {\r\n          console.log('[IntersectionObserver] Spinner is in view, starting fetch...');\r\n          fetchData();\r\n          setHasFetched(true);\r\n        }\r\n      },\r\n      { threshold: 0.1 }\r\n    );\r\n\r\n    observer.observe(observerRef.current);\r\n\r\n    return () => observer.disconnect();\r\n  }, [fetchData, hasFetched]);\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h3>More Complex Example With a Typed Dependency</h3>\r\n      <h4>Code:</h4>\r\n      <pre>\r\n        <code>\r\n          {`import { useEffect, useCallback, useState, useRef } from 'react';\r\nimport LoadingSpinner from './LoadingSpinner';\r\n\r\ntype FetchData = () => Promise<void>;\r\n\r\nfunction ComplexExample() {\r\n  const [data, setData] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [hasFetched, setHasFetched] = useState<boolean>(false);\r\n  const observerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const fetchData: FetchData = useCallback(async () => {\r\n    console.log('[fetchData] Fetching data...');\r\n    try {\r\n      setLoading(true);\r\n      await new Promise((resolve) => setTimeout(resolve, 2000));\r\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\r\n      const result = await response.json();\r\n      console.log('[fetchData] Data fetched:', result.title);\r\n      setData('fetched');\r\n    } catch (error) {\r\n      console.error('[fetchData] Fetch error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!observerRef.current || hasFetched) return;\r\n\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        if (entries[0].isIntersecting && !hasFetched) {\r\n          console.log('[IntersectionObserver] Spinner is in view, starting fetch...');\r\n          fetchData();\r\n          setHasFetched(true);\r\n        }\r\n      },\r\n      { threshold: 0.1 }\r\n    );\r\n\r\n    observer.observe(observerRef.current);\r\n\r\n    return () => observer.disconnect();\r\n  }, [fetchData, hasFetched]);\r\n\r\n  return (\r\n    <div>\r\n      <div ref={observerRef}>\r\n        {loading || !data ? <LoadingSpinner /> : <h1 className=\"output\">Data fetched.</h1>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ComplexExample;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h4>Output:</h4>\r\n      <div ref={observerRef}>\r\n        {loading || !data ? <LoadingSpinner /> : <h1 className=\"output\">Data fetched.</h1>}\r\n      </div>\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ComplexExample;","import React from 'react'; // Importing React to create components\r\nimport '../../../button.css';\r\n\r\n// Define the EventHandling component\r\nconst EventHandling = () => {\r\n  \r\n  // handleClick function is triggered when the button is clicked\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    console.log('Button clicked'); // Log a message to the console\r\n  };\r\n\r\n  // handleChange function is triggered when the input value changes\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    console.log(event.target.value); // Log the current input value to the console\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Event Handling</h2>\r\n      <p>\r\n        In React, event handling lets you respond to user actions like clicks or typing.\r\n        You can attach event handlers to elements to manage these actions.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`import React from 'react';\r\nimport '../../../button.css';\r\n\r\nconst EventHandling = () => {\r\n  \r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    console.log('Button clicked');\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    console.log(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        id=\"event-handling\"\r\n        type=\"text\"\r\n        onChange={handleChange}\r\n      />\r\n      \r\n      <button data-testid=\"my-button\" onClick={handleClick}>\r\n        Click Me\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventHandling;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      {/* Input field with an onChange event handler */}\r\n      <input\r\n        id=\"event-handling\"\r\n        type=\"text\"\r\n        onChange={handleChange} // Trigger handleChange on input change\r\n      />\r\n      \r\n      {/* Button with an onClick event handler */}\r\n      <button data-testid=\"my-button\" onClick={handleClick}>\r\n        Click Me\r\n      </button>\r\n\r\n      <h1 className=\"output\">\r\n          You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n      <p>\r\n        In this example, 'handleClick' logs a message when the button is clicked,\r\n        and 'handleChange' logs the input value when it changes.\r\n        These handlers are connected to the 'onClick' and 'onChange' events of the button and input.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventHandling;","import React, { useRef } from 'react'; // Importing React and useRef hook from React\r\nimport '../../../button.css';\r\n\r\nconst TypingRefs = () => {\r\n  // Create a ref to store the reference to the input element\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // Function to focus the input element when called\r\n  const focusInput = () => {\r\n    // Check if the ref is not null\r\n    if (inputRef.current) {\r\n      // Focus the input element\r\n      inputRef.current.focus();\r\n      console.log('Input focused!');\r\n    } else {\r\n      // Log an error if the ref is null\r\n      console.log('Input ref is null');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Typing Refs</h2>\r\n      <p>\r\n        In React, refs let you directly access DOM elements.\r\n        The 'useRef' hook is used to create refs in functional components,\r\n        and unlike state, refs don’t cause re-renders.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`import React, { useRef } from 'react';\r\nimport '../../../button.css';\r\n\r\nconst TypingRefs = () => {\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const focusInput = () => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n      console.log('Input focused!');\r\n    } else {\r\n      console.log('Input ref is null');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        id=\"typing-refs\"\r\n        type=\"text\"\r\n        ref={inputRef}\r\n      />\r\n      <button onClick={focusInput}>\r\n        Focus Input\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingRefs;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      {/* Input field with a reference assigned to inputRef */}\r\n      <input\r\n        id=\"typing-refs\"\r\n        type=\"text\"\r\n        ref={inputRef}\r\n      />\r\n      {/* Button to trigger the focusInput function when clicked */}\r\n      <button onClick={focusInput}>\r\n        Focus Input\r\n      </button>\r\n\r\n      <h1 className=\"output\">\r\n          You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n      <p>\r\n        This example uses 'useRef' to create a reference to the input field.\r\n        When the button is clicked, the input field is focused using the ref.\r\n        If the ref is valid, the input gets focused; otherwise, a message is logged.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingRefs;","import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ntype Theme = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nconst useTheme = (): ThemeContextType => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nconst ThemeProvider = ({ children }: ThemeProviderProps) => {\r\n  const [theme, setTheme] = useState<Theme>('light');\r\n\r\n  const toggleTheme = () => {\r\n    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(`Current theme: ${theme}`);\r\n  }, [theme]); // log current theme whenever it changes\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport { ThemeProvider, useTheme };","import React from 'react';\r\nimport { useTheme } from './ThemeContext';\r\nimport '../../../button.css';\r\n\r\nconst ThemeDisplay = () => {\r\n  const { theme, toggleTheme } = useTheme();\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={toggleTheme}>Toggle Theme</button>\r\n      <h1 className=\"output\">Current theme: {theme}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThemeDisplay;","import React from 'react';\r\nimport { ThemeProvider } from './ThemeContext';\r\nimport ThemeDisplay from './ThemeDisplay';\r\n\r\nconst TypingContextAndCustomHooks = () => {\r\n  return (\r\n    <ThemeProvider>\r\n      <div>\r\n        <br/>\r\n        <hr/>\r\n        <h2>Typing Context and Custom Hooks</h2>\r\n        <p>\r\n          In React, Context allows you to share data (like themes) across components without passing props.\r\n          Custom Hooks help you reuse logic, making your code cleaner.\r\n        </p>\r\n\r\n        <h3>Code:</h3>\r\n        <pre>\r\n          <code>\r\n            {`// ThemeContext.tsx\r\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ntype Theme = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nconst useTheme = (): ThemeContextType => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nconst ThemeProvider = ({ children }: ThemeProviderProps) => {\r\n  const [theme, setTheme] = useState<Theme>('light');\r\n\r\n  const toggleTheme = () => {\r\n    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\\`Current theme: \\${theme}\\`);\r\n  }, [theme]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport { ThemeProvider, useTheme };\r\n`}\r\n          </code>\r\n        </pre>\r\n        <br/>\r\n        <pre>\r\n          <code>\r\n            {`// ThemeDisplay.tsx\r\nimport React from 'react';\r\nimport { useTheme } from './ThemeContext';\r\nimport '../../../button.css';\r\n\r\nconst ThemeDisplay = () => {\r\n  const { theme, toggleTheme } = useTheme();\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={toggleTheme}>Toggle Theme</button>\r\n      <h1 className=\"output\">Current theme: {theme}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThemeDisplay;\r\n`}\r\n          </code>\r\n        </pre>\r\n        <br/>\r\n        <pre>\r\n          <code>\r\n            {`// TypingContextAndCustomHooks.tsx\r\nimport React from 'react';\r\nimport { ThemeProvider } from './ThemeContext';\r\nimport ThemeDisplay from './ThemeDisplay';\r\n\r\nconst TypingContextAndCustomHooks = () => {\r\n  return (\r\n    <ThemeProvider>\r\n      <div>\r\n        <ThemeDisplay />\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default TypingContextAndCustomHooks;\r\n`}\r\n          </code>\r\n        </pre>\r\n        <h3>Output:</h3>\r\n        <ThemeDisplay />\r\n\r\n        <h1 className=\"output\">\r\n          You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n        </h1>\r\n        <p>\r\n          We create a 'ThemeContext' to hold the current theme and a 'toggleTheme' function to switch between light and dark modes.\r\n          The 'useTheme' hook gives access to the theme and the toggle function. The 'ThemeProvider' provides this state to the app.\r\n        </p>\r\n        <p>\r\n          The 'ThemeDisplay' component shows the current theme and lets the user toggle it with a button.\r\n        </p>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default TypingContextAndCustomHooks;","import React from 'react';\r\n\r\n// Higher-order component that logs when a component is rendered\r\nfunction WithLogging<T extends React.ComponentType<any>>(Component: T) {\r\n  return (props: React.ComponentProps<T>) => {\r\n    console.log('Rendering', Component.name); // Log component render\r\n    return <Component {...props} />; // Render the wrapped component\r\n  };\r\n}\r\n\r\nexport default WithLogging;","import React from 'react';\r\nimport Hello from './Hello';\r\nimport WithLogging from './WithLogging';\r\n\r\n// Wrap Hello component with logging behavior\r\nconst HelloWithLogging = WithLogging(Hello);\r\n\r\nexport default HelloWithLogging;","import React from 'react';\r\n\r\n// Define props type for Hello component\r\ntype HelloProps = { \r\n  name: string; \r\n};\r\n\r\n// Simple functional component that displays a greeting\r\nconst Hello: React.FC<HelloProps> = ({ name }) => {\r\n  return <h1 className=\"output\">Hello, {name}!</h1>; // Render heading\r\n};\r\n\r\nexport default Hello;","import React from 'react';\r\nimport HelloWithLogging from './HelloWithLogging';  // Import the component with logging\r\n\r\nfunction TypingHigherOrderComponents() {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Typing Higher-Order Components (HOCs)</h2>\r\n      <p>\r\n        Higher-Order Components (HOCs) are a powerful pattern in React used to enhance or modify components without altering their original implementations.\r\n        They are functions that take a component as an argument and return a new component with extended behavior.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// WithLogging.tsx\r\nimport React from 'react';\r\n\r\nfunction WithLogging<T extends React.ComponentType<any>>(Component: T) {\r\n  return (props: React.ComponentProps<T>) => {\r\n    console.log('Rendering', Component.name);\r\n    return <Component {...props} />;\r\n  };\r\n}\r\n\r\nexport default WithLogging;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// Hello.tsx\r\nimport React from 'react';\r\n\r\ntype HelloProps = { \r\n  name: string; \r\n};\r\n\r\nconst Hello: React.FC<HelloProps> = ({ name }) => {\r\n  return <h1 className=\"output\">Hello, {name}!</h1>;\r\n};\r\n\r\nexport default Hello;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// HelloWithLogging.tsx\r\nimport React from 'react';\r\nimport Hello from './Hello';\r\nimport WithLogging from './WithLogging';\r\n\r\n// Create the wrapped component\r\nconst HelloWithLogging = WithLogging(Hello);\r\n\r\nexport default HelloWithLogging;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// TypingHigherOrderComponents.tsx\r\nimport React from 'react';\r\nimport HelloWithLogging from './HelloWithLogging';\r\n\r\nfunction TypingHigherOrderComponents() {\r\n  return (\r\n    <div>\r\n      <HelloWithLogging name=\"World\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TypingHigherOrderComponents;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      <HelloWithLogging name=\"World\" />  {/* Render the wrapped component with a \"name\" prop */}\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n      <p>\r\n        In this example,\r\n        we create a simple HOC called 'WithLogging' that wraps any given component and logs a message to the console whenever it renders.\r\n        By applying 'WithLogging' to a 'Hello' component,\r\n        we demonstrate how HOCs can add functionality such as logging while keeping the original component clean and focused on its primary task.\r\n        This approach promotes reusability and separation of concerns in React applications.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TypingHigherOrderComponents;","import React from 'react';\r\n\r\n// Define a generic type 'ListProps' that takes any type 'T'\r\ntype ListProps<T> = {\r\n  items: T[]; // Array of items of type T\r\n  renderItem: (item: T) => JSX.Element; // Function to render each item\r\n};\r\n\r\n// Generic List component using type parameter T\r\nexport const List = <T,>({ items, renderItem }: ListProps<T>) => {\r\n  console.log('Rendering List component with items:', items);\r\n\r\n  return (\r\n    <ul className=\"output\">\r\n      {items.map((item, index) => {\r\n        console.log(`Rendering item at index ${index}:`, item);\r\n        return renderItem(item);\r\n      })}\r\n    </ul>\r\n  );\r\n};","import React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { List } from './List';\r\n\r\nconst UsingGenericsInComponents = () => {\r\n  // An array of fruits to display\r\n  const fruits: string[] = ['Apple', 'Banana', 'Cherry'];\r\n\r\n  // Reference to the container DOM element\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  // State to track if the list has already been rendered once\r\n  const [hasRendered, setHasRendered] = useState(false);\r\n\r\n  // Stable renderItem function using useCallback to avoid re-creating it on every render\r\n  const renderFruit = useCallback((item: string) => {\r\n    console.log('Rendering individual item in renderItem:', item);\r\n    return <h1 key={item}>{item}</h1>;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Store the current ref in a local variable to avoid ESLint warning\r\n    const currentRef = containerRef.current;\r\n\r\n    // Create an IntersectionObserver to check if the component is in the viewport\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        if (entry.isIntersecting) {\r\n          // Component is in view\r\n          console.log('UsingGenericsInComponents is in the viewport');\r\n          setHasRendered(true);\r\n        } else {\r\n          // Component is out of view\r\n          console.log('UsingGenericsInComponents is NOT in the viewport');\r\n        }\r\n      },\r\n      { threshold: 0.1 }\r\n    );\r\n\r\n    if (currentRef) {\r\n      observer.observe(currentRef);\r\n    }\r\n\r\n    return () => {\r\n      if (currentRef) {\r\n        observer.unobserve(currentRef); // Clean up observer with the same ref\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={containerRef}>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Using Generics in Components</h2>\r\n      <p>\r\n        Generics in React let you build components that work with different types of data while keeping your code safe and reusable.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// List.tsx\r\nimport React from 'react';\r\n\r\ntype ListProps<T> = {\r\n  items: T[];\r\n  renderItem: (item: T) => JSX.Element;\r\n};\r\n\r\nexport const List = <T,>({ items, renderItem }: ListProps<T>) => {\r\n  console.log('Rendering List component with items:', items);\r\n\r\n  return (\r\n    <ul className=\"output\">\r\n      {items.map((item, index) => {\r\n        console.log(\\`Rendering item at index \\${index}:\\`, item);\r\n        return renderItem(item);\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// UsingGenericsInComponents.tsx\r\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { List } from './List';\r\n\r\nconst UsingGenericsInComponents = () => {\r\n  const fruits: string[] = ['Apple', 'Banana', 'Cherry'];\r\n\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const [hasRendered, setHasRendered] = useState(false);\r\n\r\n  const renderFruit = useCallback((item: string) => {\r\n    console.log('Rendering individual item in renderItem:', item);\r\n    return <h1 key={item}>{item}</h1>;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const currentRef = containerRef.current;\r\n\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        if (entry.isIntersecting) {\r\n          console.log('UsingGenericsInComponents is in the viewport');\r\n          setHasRendered(true);\r\n        } else {\r\n          console.log('UsingGenericsInComponents is NOT in the viewport');\r\n        }\r\n      },\r\n      { threshold: 0.1 }\r\n    );\r\n\r\n    if (currentRef) {\r\n      observer.observe(currentRef);\r\n    }\r\n\r\n    return () => {\r\n      if (currentRef) {\r\n        observer.unobserve(currentRef);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={containerRef}>\r\n      {hasRendered && <List items={fruits} renderItem={renderFruit} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsingGenericsInComponents;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      {hasRendered && <List items={fruits} renderItem={renderFruit} />}\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n      <p>\r\n        This example shows how to make a reusable list component in React using TypeScript generics.\r\n        The 'List' component works with any type of data and takes two props: an array of items and a function to render each item.\r\n        To improve performance, the list only shows up when the component scrolls into view, using the 'IntersectionObserver'. \r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsingGenericsInComponents;","import React from 'react';\r\n\r\nconst Summary: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Summary</h2>\r\n      <p>\r\n        With these concepts,\r\n        you’ll have a solid foundation for working with TypeScript in React,\r\n        enabling stronger code structure and reducing bugs.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;","import React from 'react';\r\nimport {\r\n  BasicConcepts,\r\n  Setup,\r\n  TypingFunctionalComponents,\r\n  WithReactFC,\r\n  WithoutReactFC,\r\n  TypingProps,\r\n  UseStateWithTypes,\r\n  TypingUseEffectDependencies,\r\n  SimpleExample,\r\n  ComplexExample,\r\n  EventHandling,\r\n  TypingRefs,\r\n  TypingContextAndCustomHooks,\r\n  TypingHigherOrderComponents,\r\n  UsingGenericsInComponents,\r\n  Summary\r\n} from '../../components/typescript/basic_concepts';\r\n\r\nconst BasicConceptsPage = () => {\r\n  return (\r\n    <>\r\n      <BasicConcepts />\r\n      <Setup />\r\n      <TypingFunctionalComponents />\r\n      <WithReactFC />\r\n      <WithoutReactFC />\r\n      <TypingProps />\r\n      <UseStateWithTypes />\r\n      <TypingUseEffectDependencies />\r\n      <SimpleExample />\r\n      <ComplexExample />\r\n      <EventHandling />\r\n      <TypingRefs />\r\n      <TypingContextAndCustomHooks />\r\n      <TypingHigherOrderComponents />\r\n      <UsingGenericsInComponents />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BasicConceptsPage;"],"names":["BasicConcepts","_jsxs","children","_jsx","className","Setup","MyComponentWithFC","_ref","message","MyComponentWithoutFC","_ref2","TypingFunctionalComponents","WithReactFC","WithoutReactFC","label","onClick","type","TypingProps","Button","handleClick","alert","UseStateWithTypes","count","setCount","useState","user","setUser","useEffect","console","log","prev","name","age","TypingUseEffectDependencies","LoadingSpinner","styles","spinnerContainer","display","flexDirection","alignItems","justifyContent","padding","spinner","marginLeft","width","height","border","borderTop","borderRadius","animation","React","styleSheet","document","styleSheets","insertRule","cssRules","length","style","data","setData","loading","setLoading","hasFetched","setHasFetched","observerRef","useRef","fetchData","useCallback","async","Promise","resolve","setTimeout","response","fetch","result","json","title","error","current","observer","IntersectionObserver","entries","isIntersecting","threshold","observe","disconnect","ref","EventHandling","id","onChange","event","target","value","TypingRefs","inputRef","focusInput","focus","ThemeContext","createContext","undefined","ThemeProvider","theme","setTheme","Provider","toggleTheme","ThemeDisplay","useTheme","context","useContext","Error","TypingContextAndCustomHooks","Component","props","WithLogging","HelloWithLogging","List","items","renderItem","map","item","index","UsingGenericsInComponents","containerRef","hasRendered","setHasRendered","renderFruit","currentRef","entry","unobserve","Summary","BasicConceptsPage","_Fragment","SimpleExample","ComplexExample","TypingHigherOrderComponents"],"sourceRoot":""}