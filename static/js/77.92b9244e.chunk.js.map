{"version":3,"file":"static/js/77.92b9244e.chunk.js","mappings":"yIAAA,MAYA,EAZsBA,KAElBC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWF,SAAC,oBAC1BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wP,sBCAT,MAAMG,EAAcC,EAAAA,MAAW,IACtB,IAAIC,SAAQC,IACjBC,YAAW,KACTD,EAAQ,8BAAwB,GAC/B,IAAK,MAgHZ,QA5GA,WACE,MAAOE,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,GAM/C,OACEX,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qDACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kKAMHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,QAAAD,SACG,6SAmBLC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,QAAAD,SACG,+0BAsCLC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aAEJC,EAAAA,EAAAA,KAAA,UAAQU,KAAK,SAASC,QAhFAC,KACxBJ,GAAe,EAAK,EA+E+BT,SAAC,sBAGjDQ,IACCT,EAAAA,EAAAA,MAACe,EAAAA,SAAQ,CAACC,UAAUd,EAAAA,EAAAA,KAAA,MAAIC,UAAU,SAAQF,SAAC,eAAgBA,SAAA,CACxDgB,QAAQC,IAAI,mCACbhB,EAAAA,EAAAA,KAACE,EAAW,QAIhBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,SAAQF,SAAC,yGAIvBC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kUAST,ECbA,EAzGoBkB,KAEhBnB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kDACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uKAMHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,QAAAD,SACG,+nKA8ELC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wgBChFT,EAdgBmB,KAEZpB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+CACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gMCUT,EAhBgBoB,KAEZrB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2PCcT,EAZ0BqB,KAEtBtB,EAAAA,EAAAA,MAAAuB,EAAAA,SAAA,CAAAtB,SAAA,EACEC,EAAAA,EAAAA,KAACH,EAAa,KACdG,EAAAA,EAAAA,KAACsB,EAAoB,KACrBtB,EAAAA,EAAAA,KAACiB,EAAW,KACZjB,EAAAA,EAAAA,KAACkB,EAAO,KACRlB,EAAAA,EAAAA,KAACmB,EAAO,M","sources":["components/performance_optimization/code_splitting/CodeSplitting.js","components/performance_optimization/code_splitting/ReactLazyAndSuspense.js","components/performance_optimization/code_splitting/ReactRouter.js","components/performance_optimization/code_splitting/Webpack.js","components/performance_optimization/code_splitting/Summary.js","pages/performance_optimization/CodeSplittingPage.js"],"sourcesContent":["const CodeSplitting = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"underline\">Code Splitting</h1>\r\n      <p>\r\n        In React, performance optimization is key, especially for larger applications. Code splitting is one effective method.\r\n        It allows you to break down your code into smaller chunks and load them only when needed, reducing the initial load time.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeSplitting;","import React, { Suspense, useState } from 'react';\r\nimport './../../../button.css';\r\n\r\n// Lazy load with artificial 1 second delay\r\nconst UserProfile = React.lazy(() => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(import('./UserProfile'));\r\n    }, 1000); // 1 second delay\r\n  });\r\n});\r\n\r\nfunction ReactLazyAndSuspense() {\r\n  const [showProfile, setShowProfile] = useState(false);\r\n\r\n  const handleShowProfile = () => {\r\n    setShowProfile(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Code Splitting with 'React.lazy' and 'Suspense'</h2>\r\n      <p>\r\n        These allow you to split your code at the component level.\r\n        Instead of loading all components up front,\r\n        you can load them only when they are actually needed.\r\n      </p>\r\n     \r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// UserProfile.js\r\nimport React from 'react';\r\n\r\nconsole.log(\"UserProfile file loaded\");\r\n\r\nfunction UserProfile() {\r\n  console.log(\"UserProfile rendered\");\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"output\">User Profile Loaded.</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserProfile;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// ReactLazyAndSuspense.js\r\nimport React, { Suspense, useState } from 'react';\r\nimport './../../../button.css';\r\n\r\nconst UserProfile = React.lazy(() => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(import('./UserProfile'));\r\n    }, 1000);\r\n  });\r\n});\r\n\r\nfunction ReactLazyAndSuspense() {\r\n  const [showProfile, setShowProfile] = useState(false);\r\n\r\n  const handleShowProfile = () => {\r\n    setShowProfile(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={handleShowProfile}>Load User Profile</button>\r\n\r\n      {showProfile && (\r\n        <Suspense fallback={<h1 className=\"output\">Loading...</h1>}>\r\n          {console.log(\"Suspense is showing loading...\")}\r\n          <UserProfile />\r\n        </Suspense>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReactLazyAndSuspense;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      {/* Button to load the UserProfile */}\r\n      <button type=\"button\" onClick={handleShowProfile}>Load User Profile</button>\r\n\r\n      {/* Only show UserProfile after button is clicked */}\r\n      {showProfile && (\r\n        <Suspense fallback={<h1 className=\"output\">Loading...</h1>}>\r\n          {console.log(\"Suspense is showing loading...\")}\r\n          <UserProfile />\r\n        </Suspense>\r\n      )}\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n\r\n      <p>\r\n        This example uses React.lazy and Suspense to load the UserProfile only when needed.\r\n        When the button is clicked, \"Loading...\" appears for 1 second, \r\n        then the profile shows up. Console logs help track what’s happening.\r\n        The benefit is faster initial loading,\r\n        because parts of the app are only loaded when required.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReactLazyAndSuspense;","const ReactRouter = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Route-Based Code Splitting with React Router</h2>\r\n      <p>\r\n        In applications using React Router,\r\n        you can split code at the route level to load only the required components for each route.\r\n        This is ideal for multi-page apps.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// App.js\r\nimport React, { Suspense } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport Header from './components/header/Header';\r\nimport Navbar from './components/navbar/Navbar';\r\n\r\nconst ProjectOverview = React.lazy(() => import('./pages/ProjectOverview'));\r\nconst ComponentsAndProps = React.lazy(() => import('./pages/basics/ComponentsAndProps'));\r\nconst JSXSyntaxPage = React.lazy(() => import('./pages/basics/JSXSyntaxPage'));\r\nconst StateManagementInFunctionalComponents = React.lazy(() => import('./pages/basics/StateManagementInFunctionalComponents'));\r\nconst ErrorHandlingAndLoadingStatesPage = React.lazy(() => import('./pages/api_interaction/ErrorHandlingAndLoadingStatesPage'));\r\nconst FetchingDataPage = React.lazy(() => import('./pages/api_interaction/FetchingDataPage'));\r\nconst HooksPage = React.lazy(() => import('./pages/component_lifecycle/HooksPage'));\r\nconst LifecycleMethodsPage = React.lazy(() => import('./pages/component_lifecycle/LifecycleMethodsPage'));\r\nconst DeploymentOptionsPage = React.lazy(() => import('./pages/deployment/DeploymentOptionsPage'));\r\nconst ControlledVsUncontrolledComponentsPage = React.lazy(() => import('./pages/forms/ControlledVsUncontrolledComponentsPage'));\r\nconst FormLibrariesPage = React.lazy(() => import('./pages/forms/FormLibrariesPage'));\r\nconst CustomHooksPage = React.lazy(() => import('./pages/hooks/CustomHooksPage'));\r\nconst UseContextPage = React.lazy(() => import('./pages/hooks/UseContextPage'));\r\nconst UseStateAndUseEffectPage = React.lazy(() => import('./pages/hooks/UseStateAndUseEffectPage'));\r\nconst CodeSplittingPage = React.lazy(() => import('./pages/performance_optimization/CodeSplittingPage'));\r\nconst MemoizationPage = React.lazy(() => import('./pages/performance_optimization/MemoizationPage'));\r\nconst UseMemoAndUseCallbackPage = React.lazy(() => import('./pages/performance_optimization/UseMemoAndUseCallbackPage'));\r\nconst ReactRouterPage = React.lazy(() => import('./pages/routing/ReactRouterPage'));\r\nconst ContextAPIPage = React.lazy(() => import('./pages/state_management/ContextAPIPage'));\r\nconst ReduxPage = React.lazy(() => import('./pages/state_management/ReduxPage'));\r\nconst CSSModulesPage = React.lazy(() => import('./pages/styling/CSSModulesPage'));\r\nconst EmotionPage = React.lazy(() => import('./pages/styling/EmotionPage'));\r\nconst StyledComponentsPage = React.lazy(() => import('./pages/styling/StyledComponentsPage'));\r\nconst ComponentTestingPage = React.lazy(() => import('./pages/testing/ComponentTestingPage'));\r\nconst UnitTestingPage = React.lazy(() => import('./pages/testing/UnitTestingPage'));\r\nconst BasicConceptsPage = React.lazy(() => import('./pages/typescript/BasicConceptsPage'));\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Router basename=\"/react_showcase\">\r\n        <Header />\r\n        <Navbar />\r\n        <Suspense fallback={<></>}>\r\n          <Routes>\r\n            <Route path=\"/project-overview\" element={<ProjectOverview />} />\r\n            <Route path=\"/error-handling-and-loading-states\" element={<ErrorHandlingAndLoadingStatesPage />} />\r\n            <Route path=\"/fetching-data\" element={<FetchingDataPage />} />\r\n            <Route path=\"/jsx-syntax\" element={<JSXSyntaxPage />} />\r\n            <Route path=\"/components-and-props\" element={<ComponentsAndProps />} />\r\n            <Route path=\"/state-management-in-functional-components\" element={<StateManagementInFunctionalComponents />} />\r\n            <Route path=\"/hooks\" element={<HooksPage />} />\r\n            <Route path=\"/lifecycle-methods\" element={<LifecycleMethodsPage />} />\r\n            <Route path=\"/deployment-options\" element={<DeploymentOptionsPage />} />\r\n            <Route path=\"/controlled-vs-uncontrolled-components\" element={<ControlledVsUncontrolledComponentsPage />} />\r\n            <Route path=\"/form-libraries\" element={<FormLibrariesPage />} />\r\n            <Route path=\"/custom-hooks\" element={<CustomHooksPage />} />\r\n            <Route path=\"/usecontext\" element={<UseContextPage />} />\r\n            <Route path=\"/usestate-and-useeffect\" element={<UseStateAndUseEffectPage />} />\r\n            <Route path=\"/code-splitting\" element={<CodeSplittingPage />} />\r\n            <Route path=\"/memoization\" element={<MemoizationPage />} />\r\n            <Route path=\"/usememo-and-usecallback\" element={<UseMemoAndUseCallbackPage />} />\r\n            <Route path=\"/react-router\" element={<ReactRouterPage />} />\r\n            <Route path=\"/context-api\" element={<ContextAPIPage />} />\r\n            <Route path=\"/redux\" element={<ReduxPage />} />\r\n            <Route path=\"/css-modules\" element={<CSSModulesPage />} />\r\n            <Route path=\"/emotion\" element={<EmotionPage />} />\r\n            <Route path=\"/styled-components\" element={<StyledComponentsPage />} />\r\n            <Route path=\"/component-testing\" element={<ComponentTestingPage />} />\r\n            <Route path=\"/unit-testing\" element={<UnitTestingPage />} />\r\n            <Route path=\"/basic-concepts\" element={<BasicConceptsPage />} />\r\n          </Routes>\r\n        </Suspense>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <p>\r\n        This React app uses React Router for navigation and React.lazy() with Suspense to load pages only when needed.\r\n        Each page component is lazy-loaded, which helps reduce the initial load time.\r\n        All routes are wrapped in a Suspense component, which can show a loading state while a page is loading (though here it’s empty).\r\n        The app uses a 'basename' of '/react_showcase', which is useful when deploying to a subfolder.\r\n        Each route points to a different page in your project, making the app organized and efficient.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReactRouter;","const Webpack = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Using Webpack for Advanced Code Splitting</h2>\r\n      <p>\r\n        Webpack, which is commonly used with React, can handle more advanced forms of code splitting,\r\n        such as creating separate bundles for different sections of the app or even for libraries.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Webpack;","const Summary = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Summary</h2>\r\n      <p>\r\n        By incorporating code splitting, you’ll be able to make your app more efficient,\r\n        improving load times and user experience.\r\n        This technique is especially valuable in large applications,\r\n        helping you scale React performance as your app grows.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;","import {\r\n  CodeSplitting,\r\n  ReactLazyAndSuspense,\r\n  ReactRouter,\r\n  Webpack,\r\n  Summary\r\n} from '../../components/performance_optimization/code_splitting';\r\n\r\nconst CodeSplittingPage = () => {\r\n  return (\r\n    <>\r\n      <CodeSplitting />\r\n      <ReactLazyAndSuspense />\r\n      <ReactRouter />\r\n      <Webpack />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CodeSplittingPage;"],"names":["CodeSplitting","_jsxs","children","_jsx","className","UserProfile","React","Promise","resolve","setTimeout","showProfile","setShowProfile","useState","type","onClick","handleShowProfile","Suspense","fallback","console","log","ReactRouter","Webpack","Summary","CodeSplittingPage","_Fragment","ReactLazyAndSuspense"],"sourceRoot":""}