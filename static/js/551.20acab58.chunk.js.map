{"version":3,"file":"static/js/551.20acab58.chunk.js","mappings":"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","sources":["components/forms/controlled_vs_uncontrolled_components/ControlledVsUncontrolledComponents.js","components/forms/controlled_vs_uncontrolled_components/Controlled.js","components/forms/controlled_vs_uncontrolled_components/Uncontrolled.js","components/forms/controlled_vs_uncontrolled_components/ChoosingBetween.js","components/forms/controlled_vs_uncontrolled_components/Summary.js","pages/forms/ControlledVsUncontrolledComponentsPage.js"],"sourcesContent":["const ControlledVsUncontrolledComponents = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"underline\">Controlled Vs Uncontrolled Components</h1>\r\n      <p>\r\n        In React, forms can be managed using either controlled or uncontrolled components,\r\n        each with its own advantages and use cases.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ControlledVsUncontrolledComponents;","import React, { useState } from 'react';\r\nimport './../../../button.css';\r\n\r\n// Define the Controlled component\r\nfunction Controlled() {\r\n    // Declare a state variable 'inputValue' to hold the input field value\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // Handle input change and update state\r\n    const handleChange = (event) => {\r\n        setInputValue(event.target.value); // Update 'inputValue' with the current input value\r\n        console.log(`Input changed: ${event.target.value}`); // Log the updated input value\r\n    };\r\n\r\n    // Handle form submission\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault(); // Prevent the default form submission behavior\r\n        console.log(`Form submitted with value: ${inputValue}`); // Log the submitted value\r\n        alert(`Submitted value: ${inputValue}`); // Display the submitted value in an alert\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Controlled Components</h2>\r\n            <p>\r\n                In controlled components, the form data is handled by the state of the React component.\r\n                The input elements' values are controlled by React,\r\n                meaning they rely on state to determine their values.\r\n            </p>\r\n            <p>\r\n                You bind the input field's value to a state variable \r\n                and update the state using an event handler when the input changes.\r\n            </p>\r\n\r\n            <h3>Code:</h3>\r\n            <pre>\r\n                <code>\r\n                    {\"import React, { useState } from 'react';\\n\" +\r\n                    \"import './../../../button.css';\\n\\n\" +\r\n                    \"function Controlled() {\\n\" +\r\n                    \"    const [inputValue, setInputValue] = useState('');\\n\\n\" +\r\n                    \"    const handleChange = (event) => {\\n\" +\r\n                    \"        setInputValue(event.target.value);\\n\" +\r\n                    \"        console.log('Input changed: ' + event.target.value);\\n\" +\r\n                    \"    };\\n\\n\" +\r\n                    \"    const handleSubmit = (event) => {\\n\" +\r\n                    \"        event.preventDefault();\\n\" +\r\n                    \"        console.log('Form submitted with value: ' + inputValue);\\n\" +\r\n                    \"        alert('Submitted value: ' + inputValue);\\n\" +\r\n                    \"    };\\n\\n\\n\" +\r\n                    \"    return (\\n\" +\r\n                    \"        <div>\\n\" +\r\n                    \"            <form onSubmit={handleSubmit}>\\n\" +\r\n                    \"                <input \\n\" +\r\n                    \"                    type='text' \\n\" +\r\n                    \"                    id='user-input' \\n\" +\r\n                    \"                    value={inputValue}\\n\" +\r\n                    \"                    onChange={handleChange}\\n\" +\r\n                    \"                />\\n\" +\r\n                    \"                <button type='submit'>Submit</button>\\n\" +\r\n                    \"            </form>\\n\" +\r\n                    \"        </div>\\n\" +\r\n                    \"    );\\n\" +\r\n                    \"}\\n\\n\" +\r\n                    \"export default Controlled;\"}\r\n                </code>\r\n            </pre>\r\n\r\n            <h3>Output:</h3>\r\n            <form onSubmit={handleSubmit}> {/* Attach handleSubmit to form's onSubmit event */}\r\n                <input \r\n                    type=\"text\" \r\n                    id='user-input'\r\n                    value={inputValue} // Bind input value to the state variable 'inputValue'\r\n                    onChange={handleChange} // Attach handleChange to input's onChange event\r\n                />\r\n                <button type=\"submit\">Submit</button> {/* Button to submit the form */}\r\n            </form>\r\n            <h1 className=\"output\">\r\n                You can use the browserâ€™s developer tools (Inspect) to view console messages for this example.\r\n            </h1>\r\n\r\n            <h3>Advantages:</h3>\r\n            <p>\r\n                Easier to manage and validate form data.\r\n            </p>\r\n            <p>\r\n                Provides a single source of truth, as the input value is stored in the state.\r\n            </p>\r\n            <p>\r\n                Makes it easier to implement dynamic validation, conditional rendering, and other features.\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Controlled; // Export the component for use in other files","import React, { useRef } from 'react';\r\nimport './../../../button.css';\r\n\r\n// Define the Uncontrolled component\r\nfunction Uncontrolled() {\r\n    // Create a reference to the input element using useRef hook\r\n    const inputRef = useRef(null);\r\n\r\n    // Handle the form submission\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault(); // Prevent the default form submission behavior\r\n        console.log(\"Form submitted!\"); // Log form submission event\r\n        console.log(\"Current input value:\", inputRef.current.value); // Log the input value\r\n        alert(`Submitted value: ${inputRef.current.value}`); // Alert the current value of the input\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Uncontrolled Components</h2>\r\n            <p>\r\n                In uncontrolled components, the form data is managed by the DOM itself.\r\n                You use refs to access the form elements directly, and React does not control the input's value.\r\n            </p>\r\n            <p>\r\n                You access the input values using refs instead of using state to store the input values.\r\n            </p>\r\n\r\n            <h3>Code:</h3>\r\n            <pre>\r\n                <code>\r\n                    {\"import React, { useRef } from 'react';\\n\" +\r\n                    \"import './../../../button.css';\\n\\n\" +\r\n                    \"function Uncontrolled() {\\n\" +\r\n                    \"    const inputRef = useRef(null);\\n\\n\" +\r\n                    \"    const handleSubmit = (event) => {\\n\" +\r\n                    \"        event.preventDefault();\\n\" +\r\n                    \"        console.log('Form submitted!');\\n\" +\r\n                    \"        console.log('Current input value:', inputRef.current.value);\\n\" +\r\n                    \"        alert('Submitted value: ' + inputRef.current.value);\\n\" +\r\n                    \"    };\\n\\n\\n\" +\r\n                    \"    return (\\n\" +\r\n                    \"        <div>\\n\" +\r\n                    \"            <form onSubmit={handleSubmit}>\\n\" +\r\n                    \"                <input \\n\" +\r\n                    \"                    type='text' \\n\" +\r\n                    \"                    ref={inputRef} \\n\" +\r\n                    \"                    id='user-input' \\n\" +\r\n                    \"                    name='userInput' \\n\" +\r\n                    \"                />\\n\" +\r\n                    \"                <button type='submit'>Submit</button>\\n\" +\r\n                    \"            </form>\\n\" +\r\n                    \"        </div>\\n\" +\r\n                    \"    );\\n\" +\r\n                    \"}\\n\\n\" +\r\n                    \"export default Uncontrolled;\"}\r\n                </code>\r\n            </pre>\r\n\r\n            <h3>Output:</h3>\r\n            <form onSubmit={handleSubmit}>\r\n                {/* Input field is referenced by inputRef */}\r\n                <input\r\n                    type=\"text\"\r\n                    ref={inputRef}\r\n                    id=\"user-input\"\r\n                    name=\"userInput\"\r\n                />\r\n                {/* Submit button */}\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n            <h1 className=\"output\">\r\n                You can use the browserâ€™s developer tools (Inspect) to view console messages for this example.\r\n            </h1>\r\n\r\n            <h3>Advantages:</h3>\r\n            <p>\r\n                Simpler for quick forms without needing to manage state.\r\n            </p>\r\n            <p>\r\n                Can be useful for integrating with non-React libraries or existing codebases.\r\n            </p>\r\n            <p>\r\n                Less boilerplate code for forms with many inputs.\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Uncontrolled;","const ChoosingBetween = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Choosing Between Controlled and Uncontrolled Components</h2>\r\n      <h3>Controlled</h3>\r\n      <p>\r\n        Use Controlled Components when you need to manage form data closely,\r\n        such as for complex forms, validation, or when you want to have a clear flow of data.\r\n      </p>\r\n\r\n      <h3>Uncontrolled</h3>\r\n      <p>\r\n        Use Uncontrolled Components for simple forms or when you're integrating with third-party libraries,\r\n        where you don't need to manage the input state actively.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChoosingBetween;\r\n","const Summary = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Summary</h2>\r\n      <p>\r\n        In practice, many developers prefer controlled components for their consistency and ease of validation,\r\n        while uncontrolled components can be handy for less complex scenarios.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;","import {\r\n  ControlledVsUncontrolledComponents,\r\n  Controlled,\r\n  Uncontrolled,\r\n  ChoosingBetween,\r\n  Summary\r\n} from '../../components/forms/controlled_vs_uncontrolled_components';\r\n\r\nconst ControlledVsUncontrolledComponentsPage = () => {\r\n  return (\r\n    <>\r\n      <ControlledVsUncontrolledComponents />\r\n      <Controlled />\r\n      <Uncontrolled />\r\n      <ChoosingBetween />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ControlledVsUncontrolledComponentsPage;"],"names":["ControlledVsUncontrolledComponents","_jsxs","children","_jsx","className","inputValue","setInputValue","useState","onSubmit","event","preventDefault","console","log","alert","type","id","value","onChange","target","inputRef","useRef","current","ref","name","ChoosingBetween","Summary","ControlledVsUncontrolledComponentsPage","_Fragment","Controlled","Uncontrolled"],"sourceRoot":""}