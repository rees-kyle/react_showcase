{"version":3,"file":"static/js/233.3f0e5b1c.chunk.js","mappings":"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","sources":["components/basics/state_management_in_functional_components/FunctionalState.js","components/basics/state_management_in_functional_components/UseState.js","components/basics/state_management_in_functional_components/MultiState.js","components/basics/state_management_in_functional_components/ObjectStateHandler.js","components/basics/state_management_in_functional_components/StateImportance.js","pages/basics/StateManagementInFunctionalComponents.js"],"sourcesContent":["const FunctionalState = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"underline\">State Management in Functional Components</h1>\r\n            <p>\r\n                In React, state management allows components to manage and update data that affects the UI.\r\n                With functional components, this is typically handled using the 'useState' hook,\r\n                which enables the component to remember values between renders.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FunctionalState;","import { useState } from \"react\";\r\nimport './../../../button.css';\r\n\r\nconst UseState = () => {\r\n    // declare a state variable and a function to update it.\r\n    const [count, setCount] = useState(0); // initializing 'count' to 0.\r\n    // count: the current state variable, which holds the current value.\r\n    // setCount: the function called to update the state.\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>useState Hook</h2>\r\n            <p>\r\n                The useState hook allows you to add state to a functional component.\r\n                You initialize it by passing the initial state value, and it returns two values:\r\n            </p>\r\n            <p>\r\n                <strong>The current state</strong> is a variable holding the state value.\r\n            </p>\r\n            <p>\r\n                <strong>A function to update the state</strong> is a function that lets you change the state value.\r\n            </p>\r\n\r\n            <h3>Code:</h3>\r\n            <pre>\r\n                <code>\r\n                    {`import { useState } from \"react\";\r\nimport './use-state.css';\r\n\r\nconst UseState = () => {\r\n    const [count, setCount] = useState(0);\r\n\r\n    return (\r\n        <div>\r\n            <button type=\"button\" onClick={() => setCount(count + 1)}>Click me!</button>\r\n            <h1 className=\"output\">You clicked {count} times!</h1>\r\n        </div>\r\n    );\r\n};\r\n`}\r\n                </code>\r\n            </pre>\r\n\r\n            <h3>Output:</h3>\r\n            <button type=\"button\" onClick={() => setCount(count + 1)}>Click me!</button>\r\n            <h1 className=\"output\">You clicked {count} times!</h1>\r\n            <p>When the state is updated, the component re-renders to reflect the new state.</p>\r\n\r\n            <h3>Key Points:</h3>\r\n            <p>\r\n                Each call to useState creates a piece of state that's tied to the specific component instance.\r\n            </p>\r\n            <p>\r\n                React ensures that the state is preserved between renders.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UseState;","import { useState } from \"react\";\r\n\r\nfunction MultiState() {\r\n    const [name, setName] = useState(\"John\");\r\n    const [age, setAge] = useState(25);\r\n\r\n    const toggleName = () => {\r\n        setName(name === \"John\" ? \"Jane\" : \"John\");\r\n    };\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Example with Multiple State Variables:</h2>\r\n\r\n            <h3>Code:</h3>\r\n            <pre>\r\n                <code>\r\n                    {`import { useState } from \"react\";\r\n\r\nfunction MultiState() {\r\n    const [name, setName] = useState(\"John\");\r\n    const [age, setAge] = useState(25);\r\n\r\n    const toggleName = () => {\r\n        setName(name === \"John\" ? \"Jane\" : \"John\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"output\">Name: {name}</h1>\r\n            <h1 className=\"output\">Age: {age}</h1>\r\n            <button type=\"button\" onClick={() => setAge(age + 1)}>\r\n                Increment Age\r\n            </button>\r\n            <br/>\r\n            <button type=\"button\" onClick={toggleName}>\r\n                Toggle Name\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n`}\r\n                </code>\r\n            </pre>\r\n\r\n            <h3>Output:</h3>\r\n            <h1 className=\"output\">Name: {name}</h1>\r\n            <h1 className=\"output\">Age: {age}</h1>\r\n            <button type=\"button\" onClick={() => setAge(age + 1)}>\r\n                Increment Age\r\n            </button>\r\n            <br/>\r\n            <button type=\"button\" onClick={toggleName}>\r\n                Toggle Name\r\n            </button>\r\n\r\n            <p> \r\n                In this example, 'name' and 'age' are two separate pieces of state.\r\n                Each can be updated independently.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MultiState;","import { useState } from \"react\";\r\n\r\nfunction ObjectStateHandler() {\r\n  const [settings, setSettings] = useState({ theme: 'light', notifications: true });\r\n\r\n    const toggleTheme = () => {\r\n        setSettings({\r\n            ...settings, // Spread the current settings to preserve other properties\r\n            theme: settings.theme === 'light' ? 'dark' : 'light' }); // Toggle between 'light' and 'dark' theme\r\n    };\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Handling Objects in State</h2>\r\n            <p>\r\n                State can also be an object,\r\n                and you can update specific properties within that object using the spread operator.\r\n            </p>\r\n\r\n            <h3>Code:</h3>\r\n            <pre>\r\n                <code>\r\n                    {`import { useState } from \"react\";\r\n\r\nfunction ObjectStateHandler() {\r\n  const [settings, setSettings] = useState({ theme: 'light', notifications: true });\r\n\r\n    const toggleTheme = () => {\r\n        setSettings({\r\n            ...settings, // Spread the current settings to preserve other properties\r\n            theme: settings.theme === 'light' ? 'dark' : 'light' }); // Toggle between 'light' and 'dark' theme\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"output\">Theme: {settings.theme}</h1>\r\n            <button type=\"button\" onClick={toggleTheme}>\r\n                Toggle Theme\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n`}\r\n                </code>\r\n            </pre>\r\n\r\n            <h3>Output:</h3>\r\n            <h1 className=\"output\">Theme: {settings.theme}</h1>\r\n            <button type=\"button\" onClick={toggleTheme}>\r\n                Toggle Theme\r\n            </button>\r\n\r\n            <p> \r\n                Here, 'setSettings' updates only the 'theme' property,\r\n                while keeping the 'notifications' property unchanged by spreading 'settings'.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ObjectStateHandler;","const StateImportance = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Why State Management is Important</h2>\r\n            <p> \r\n                It allows you to create dynamic and interactive user interfaces,\r\n                with components re-rendering automatically when the state changes to ensure that the UI stays in sync with the data.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StateImportance;","import {\r\n  FunctionalState,\r\n  UseState,\r\n  MultiState,\r\n  ObjectStateHandler,\r\n  StateImportance\r\n} from '../../components/basics/state_management_in_functional_components';\r\n\r\nconst StateManagementInFunctionalComponents = () => {\r\n  return (\r\n    <>\r\n      <FunctionalState />\r\n      <UseState />\r\n      <MultiState />\r\n      <ObjectStateHandler />\r\n      <StateImportance />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StateManagementInFunctionalComponents;"],"names":["FunctionalState","_jsxs","children","_jsx","className","UseState","count","setCount","useState","type","onClick","name","setName","age","setAge","toggleName","settings","setSettings","theme","notifications","toggleTheme","StateImportance","StateManagementInFunctionalComponents","_Fragment","MultiState","ObjectStateHandler"],"sourceRoot":""}