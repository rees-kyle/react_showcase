"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[306],{6306:(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var s=n(579);const a=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("h1",{className:"underline",children:"State Management in Functional Components"}),(0,s.jsx)("p",{children:"In React, state management allows components to manage and update data that affects the UI. With functional components, this is typically handled using the 'useState' hook, which enables the component to remember values between renders."})]});var i=n(5043);const o=()=>{const[e,t]=(0,i.useState)(0);return(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"useState Hook"}),(0,s.jsx)("p",{children:"The useState hook allows you to add state to a functional component. You initialize it by passing the initial state value, and it returns two values:"}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"The current state"})," is a variable holding the state value."]}),(0,s.jsxs)("p",{children:[(0,s.jsx)("strong",{children:"A function to update the state"})," is a function that lets you change the state value."]}),(0,s.jsx)("h3",{children:"Code:"}),(0,s.jsx)("pre",{children:(0,s.jsx)("code",{children:'import { useState } from "react";\nimport \'./use-state.css\';\n\nconst UseState = () => {\n    const [count, setCount] = useState(0);\n\n    return (\n        <div>\n            <button onClick={() => setCount(count + 1)}>Click me!</button>\n            <h1 className="output">You clicked {count} times!</h1>\n        </div>\n    );\n};\n'})}),(0,s.jsx)("h3",{children:"Output:"}),(0,s.jsx)("button",{onClick:()=>t(e+1),children:"Click me!"}),(0,s.jsxs)("h1",{className:"output",children:["You clicked ",e," times!"]}),(0,s.jsx)("p",{children:"When the state is updated, the component re-renders to reflect the new state."}),(0,s.jsx)("h3",{children:"Key Points:"}),(0,s.jsx)("p",{children:"Each call to useState creates a piece of state that's tied to the specific component instance."}),(0,s.jsx)("p",{children:"React ensures that the state is preserved between renders."})]})};const h=function(){const[e,t]=(0,i.useState)("John"),[n,a]=(0,i.useState)(25);return(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"Example with Multiple State Variables:"}),(0,s.jsx)("h3",{children:"Code:"}),(0,s.jsx)("pre",{children:(0,s.jsx)("code",{children:'import { useState } from "react";\n\nfunction MultiState() {\n    const [name, setName] = useState("John");\n    const [age, setAge] = useState(25);\n\n    const toggleName = () => {\n        setName(name === "John" ? "Jane" : "John");\n    };\n\n    return (\n        <div>\n            <h1 className="output">Name: {name}</h1>\n            <h1 className="output">Age: {age}</h1>\n            <button onClick={() => setAge(age + 1)}>\n                Increment Age\n            </button>\n            <br/>\n            <button onClick={toggleName}>\n                Toggle Name\n            </button>\n        </div>\n    );\n};\n'})}),(0,s.jsx)("h3",{children:"Output:"}),(0,s.jsxs)("h1",{className:"output",children:["Name: ",e]}),(0,s.jsxs)("h1",{className:"output",children:["Age: ",n]}),(0,s.jsx)("button",{onClick:()=>a(n+1),children:"Increment Age"}),(0,s.jsx)("br",{}),(0,s.jsx)("button",{onClick:()=>{t("John"===e?"Jane":"John")},children:"Toggle Name"}),(0,s.jsx)("p",{children:"In this example, 'name' and 'age' are two separate pieces of state. Each can be updated independently."})]})};const c=function(){const[e,t]=(0,i.useState)({theme:"light",notifications:!0});return(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"Handling Objects in State"}),(0,s.jsx)("p",{children:"State can also be an object, and you can update specific properties within that object using the spread operator."}),(0,s.jsx)("h3",{children:"Code:"}),(0,s.jsx)("pre",{children:(0,s.jsx)("code",{children:"import { useState } from \"react\";\n\nfunction ObjectStateHandler() {\n  const [settings, setSettings] = useState({ theme: 'light', notifications: true });\n\n    const toggleTheme = () => {\n        setSettings({\n            ...settings, // Spread the current settings to preserve other properties\n            theme: settings.theme === 'light' ? 'dark' : 'light' }); // Toggle between 'light' and 'dark' theme\n    };\n\n    return (\n        <div>\n            <h1 className=\"output\">Theme: {settings.theme}</h1>\n            <button onClick={toggleTheme}>\n                Toggle Theme\n            </button>\n        </div>\n    );\n};\n"})}),(0,s.jsx)("h3",{children:"Output:"}),(0,s.jsxs)("h1",{className:"output",children:["Theme: ",e.theme]}),(0,s.jsx)("button",{onClick:()=>{t({...e,theme:"light"===e.theme?"dark":"light"})},children:"Toggle Theme"}),(0,s.jsx)("p",{children:"Here, 'setSettings' updates only the 'theme' property, while keeping the 'notifications' property unchanged by spreading 'settings'."})]})},r=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"Why State Management is Important"}),(0,s.jsx)("p",{children:"It allows you to create dynamic and interactive user interfaces, with components re-rendering automatically when the state changes to ensure that the UI stays in sync with the data."})]}),l=()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a,{}),(0,s.jsx)(o,{}),(0,s.jsx)(h,{}),(0,s.jsx)(c,{}),(0,s.jsx)(r,{})]})}}]);
//# sourceMappingURL=306.15fbb757.chunk.js.map