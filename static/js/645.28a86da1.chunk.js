"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[645],{1645:(e,r,n)=>{n.r(r),n.d(r,{default:()=>p});var o=n(579);const i=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("h1",{className:"underline",children:"Form Libraries"}),(0,o.jsx)("p",{children:"Using form libraries in React can greatly simplify form handling, especially for complex forms. Below are two of the most popular options."})]});n(5043);var s=n(3892),l=n(899);n(3923);const a=l.Ik({name:l.Yj().required("Required"),email:l.Yj().email("Invalid email").required("Required")}),t=()=>(console.log("FormikExample component rendered"),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Formik"}),(0,o.jsx)("p",{children:"This is a comprehensive library that simplifies handling forms in React, especially for large forms or forms with a lot of validation requirements."}),(0,o.jsx)("h3",{children:"Benefits:"}),(0,o.jsx)("h4",{children:"State Management"}),(0,o.jsx)("p",{children:"Formik manages form state (e.g., values, errors) for you."}),(0,o.jsx)("h4",{children:"Validation"}),(0,o.jsx)("p",{children:"Built-in support for validation with Yup, making it easier to enforce validation rules."}),(0,o.jsx)("h4",{children:"Field Handling"}),(0,o.jsx)("p",{children:"Prebuilt components like 'Field' that automatically manage inputs."}),(0,o.jsx)("h4",{children:"Performance"}),(0,o.jsx)("p",{children:"Reduces unnecessary renders by optimizing form components."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:'import React from "react";\nimport { Formik, Form, Field, ErrorMessage } from "formik";\nimport * as Yup from "yup";\nimport \'./../../../button.css\';\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required("Required"),\n  email: Yup.string().email("Invalid email").required("Required"),\n});\n\nconst FormikExample = () => {\n    console.log("FormikExample component rendered");\n\n\n    return (\n        <Formik\n            initialValues={{ name: "", email: "" }}\n            validationSchema={validationSchema}\n            onSubmit={(values) => {\n                alert("Form has been submitted!");\n                console.log("Formik Submitted:", values);\n            }}\n        >\n            {({ handleSubmit, values, errors, touched }) => {\n                console.log("Current Form Values:", values);\n                console.log("Validation Errors:", errors);\n                console.log("Touched Fields:", touched);\n\n                return (\n                    <Form onSubmit={handleSubmit}>\n                        <div>\n                            <label>Name: </label>\n                            <Field type="text" name="name" autoComplete="name" />\n                            <ErrorMessage className="error-message" name="name" component="div" />\n                        </div>\n                        <br/>\n                        <div>\n                            <label htmlFor="email">Email: </label>\n                            <Field type="email" name="email" autoComplete="email" />\n                            <ErrorMessage className="error-message" name="email" component="div" />\n                        </div>\n                        <button type="submit">Submit</button>\n                    </Form>\n                );\n            }}\n        </Formik>\n    );\n}\n\nexport default FormikExample;'})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsx)(s.l1,{initialValues:{name:"",email:""},validationSchema:a,onSubmit:e=>{alert("Form has been submitted!"),console.log("Formik Submitted:",e)},children:e=>{let{handleSubmit:r,values:n,errors:i,touched:l}=e;return console.log("Current Form Values:",n),console.log("Validation Errors:",i),console.log("Touched Fields:",l),(0,o.jsxs)(s.lV,{onSubmit:r,children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("label",{className:"label",htmlFor:"name",children:"Name: "}),(0,o.jsx)(s.D0,{id:"name",type:"text",name:"name",autoComplete:"name"}),(0,o.jsx)(s.Kw,{className:"error-message",name:"name",component:"div"})]}),(0,o.jsx)("br",{}),(0,o.jsxs)("div",{children:[(0,o.jsx)("label",{className:"label",htmlFor:"email",children:"Email: "}),(0,o.jsx)(s.D0,{id:"email",type:"email",name:"email",autoComplete:"email"}),(0,o.jsx)(s.Kw,{className:"error-message",name:"email",component:"div"})]}),(0,o.jsx)("button",{type:"submit",children:"Submit"})]})}}),(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."})]}));var m=n(4858),d=n(8403);const c=l.Ik({name:l.Yj().required("Required"),email:l.Yj().email("Invalid email").required("Required")}),u=()=>{console.log("ReactHookFormExample component rendered");const{register:e,handleSubmit:r,formState:{errors:n,touchedFields:i,isSubmitting:s},watch:l}=(0,m.mN)({resolver:(0,d.t)(c)});return console.log("Current Form Values:",l()),console.log("Validation Errors:",n),console.log("Touched Fields:",i),console.log("Is Submitting:",s),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"React Hook Form"}),(0,o.jsx)("p",{children:"A performant, flexible, and easy-to-use form library for React that reduces re-renders and provides great developer experience."}),(0,o.jsx)("h3",{children:"Benefits:"}),(0,o.jsx)("h4",{children:"Minimal Rerenders"}),(0,o.jsx)("p",{children:"It minimizes rerenders, making it very efficient."}),(0,o.jsx)("h4",{children:"Easy Integration"}),(0,o.jsx)("p",{children:"Works well with existing validation libraries like Yup."}),(0,o.jsx)("h4",{children:"Ref-based Approach"}),(0,o.jsx)("p",{children:"Utilizes refs instead of onChange, leading to better performance with large forms."}),(0,o.jsx)("h4",{children:"Less Boilerplate"}),(0,o.jsx)("p",{children:"It requires less code for validation, error handling, and maintaining form state."}),(0,o.jsx)("h3",{children:"Code:"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:'import React from "react";\nimport { useForm } from "react-hook-form";\nimport * as Yup from "yup";\nimport { yupResolver } from "@hookform/resolvers/yup";\nimport \'./../../../button.css\';\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required("Required"),\n  email: Yup.string().email("Invalid email").required("Required"),\n});\n\nconst ReactHookFormExample = () => {\n    console.log("ReactHookFormExample component rendered");\n\n    const {\n        register,\n        handleSubmit,\n        formState: { errors, touchedFields, isSubmitting },\n        watch,\n    } = useForm({ resolver: yupResolver(validationSchema) });\n\n    const onSubmit = (values) => {\n        alert("Form has been submitted!");\n        console.log("React Hook Form Submitted:", values);\n    };\n\n    console.log("Current Form Values:", watch());\n    console.log("Validation Errors:", errors);\n    console.log("Touched Fields:", touchedFields);\n    console.log("Is Submitting:", isSubmitting);\n\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <div>\n                <label className="label" htmlFor="name">Name: </label>\n                <input id="name" type="text" {...register("name")} autoComplete="name" />\n                {errors.name && <div className="error-message">{errors.name.message}</div>}\n            </div>\n            <br/>\n            <div>\n                <label className="label" htmlFor="email">Email: </label>\n                <input id="email" type="email" {...register("email")} autoComplete="email" />\n                {errors.email && <div className="error-message">{errors.email.message}</div>}\n            </div>\n            <button type="submit">Submit</button>\n        </form>\n    );\n}\n\nexport default ReactHookFormExample;'})}),(0,o.jsx)("h3",{children:"Output:"}),(0,o.jsxs)("form",{onSubmit:r((e=>{alert("Form has been submitted!"),console.log("React Hook Form Submitted:",e)})),children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("label",{className:"label",htmlFor:"name",children:"Name: "}),(0,o.jsx)("input",{id:"name",type:"text",...e("name"),autoComplete:"name"}),n.name&&(0,o.jsx)("div",{className:"error-message",children:n.name.message})]}),(0,o.jsx)("br",{}),(0,o.jsxs)("div",{children:[(0,o.jsx)("label",{className:"label",htmlFor:"email",children:"Email: "}),(0,o.jsx)("input",{id:"email",type:"email",...e("email"),autoComplete:"email"}),n.email&&(0,o.jsx)("div",{className:"error-message",children:n.email.message})]}),(0,o.jsx)("button",{type:"submit",children:"Submit"})]}),(0,o.jsx)("h1",{className:"output",children:"You can use the browser\u2019s developer tools (Inspect) to view console messages for this example."})]})},h=()=>(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("hr",{}),(0,o.jsx)("h2",{children:"Summary"}),(0,o.jsx)("p",{children:"Both Formik and React Hook Form have robust communities and documentation, so they\u2019re good choices for most React projects."})]}),p=()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i,{}),(0,o.jsx)(t,{}),(0,o.jsx)(u,{}),(0,o.jsx)(h,{})]})},3923:()=>{}}]);
//# sourceMappingURL=645.28a86da1.chunk.js.map