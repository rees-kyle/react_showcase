"use strict";(self.webpackChunkproject=self.webpackChunkproject||[]).push([[575],{2575:(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});var s=n(579);const o=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("h1",{className:"underline",children:"Custom Hooks"}),(0,s.jsx)("p",{children:'Custom hooks in React allow you to extract and reuse stateful logic across multiple components. They follow the same rules as standard hooks but provide a way to share logic without repeating code. Custom hooks are JavaScript functions that begin with the word "use," as per React\u2019s naming convention.'})]}),a=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"How to Create a Custom Hook"}),(0,s.jsx)("h3",{children:"1. Identify Reusable Logic:"}),(0,s.jsx)("p",{children:"If you have logic that is used by multiple components, like fetching data or managing state, it can be abstracted into a custom hook."}),(0,s.jsx)("h3",{children:"2. Create a Hook Function:"}),(0,s.jsx)("p",{children:"Custom hooks are regular JavaScript functions, but they can call other hooks (like useState, useEffect, etc.)."}),(0,s.jsx)("h3",{children:"3. Naming Convention:"}),(0,s.jsx)("p",{children:'The hook\u2019s name should start with "use" to comply with React\u2019s rules of hooks.'})]});var r=n(5043);const c=function(e){const[t,n]=(0,r.useState)(null),[s,o]=(0,r.useState)(!0);return(0,r.useEffect)((()=>{(async()=>{try{const t=await fetch(e);if(!t.ok)throw new Error("Network response was not ok");const s=await t.json();n(s)}catch(t){console.error("Fetch error:",t),n([])}finally{o(!1)}})()}),[e]),{data:t||[],loading:s}},i=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"Example of a Custom Hook"}),(0,s.jsx)("p",{children:"Let\u2019s create a simple custom hook that fetches data from an API."}),(0,s.jsx)("h3",{children:"Code:"}),(0,s.jsx)("pre",{children:(0,s.jsx)("code",{children:'import { useState, useEffect } from \'react\';\n\nfunction useFetch(url) {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch(url);\n                if (!response.ok) {\n                    throw new Error("Network response was not ok");\n                }\n                const jsonData = await response.json();\n                setData(jsonData);\n            } catch (error) {\n                console.error("Fetch error:", error);\n                setData([]);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [url]);\n\n    return { data: data || [], loading };\n}\n\nexport default useFetch;\n'})})]});const h=function(){const{data:e,loading:t}=c("https://jsonplaceholder.typicode.com/users");return t?(0,s.jsx)("p",{children:"Loading..."}):(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"Using the Custom Hook in a Component"}),(0,s.jsx)("h3",{children:"Code:"}),(0,s.jsx)("pre",{children:(0,s.jsx)("code",{children:"import useFetch from './useFetch';\n\nfunction Usage() { \n    const { data, loading } = useFetch('https://jsonplaceholder.typicode.com/users');\n\n    if (loading) return <p>Loading...</p>; \n\n    return ( \n        <div> \n            {data.map((item) => (\n                <h4 className=\"output\" key={item.id}>{item.name}</h4>\n            ))}\n        </div>\n    );\n};\n\nexport default Usage;\n"})}),(0,s.jsx)("h3",{children:"Output:"}),e.map((e=>(0,s.jsx)("h4",{className:"output",children:e.name},e.id)))]})},l=()=>(0,s.jsxs)("div",{children:[(0,s.jsx)("br",{}),(0,s.jsx)("hr",{}),(0,s.jsx)("h2",{children:"Key Points"}),(0,s.jsx)("p",{children:"Custom hooks allow the reuse of stateful logic between components."}),(0,s.jsx)("p",{children:"They can manage state, make API calls, or encapsulate any logic that needs to be reused."}),(0,s.jsx)("p",{children:"Custom hooks follow the same rules as built-in hooks, such as not being called inside loops, conditions, or nested functions."})]}),d=()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o,{}),(0,s.jsx)(a,{}),(0,s.jsx)(i,{}),(0,s.jsx)(h,{}),(0,s.jsx)(l,{})]})}}]);
//# sourceMappingURL=575.d00e0da4.chunk.js.map