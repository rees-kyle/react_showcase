{"version":3,"file":"static/js/144.2dc08f18.chunk.js","mappings":"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","sources":["components/performance_optimization/usememo_and_usecallback/UseMemoAndUseCallback.js","components/performance_optimization/usememo_and_usecallback/ExpensiveComponent.js","components/performance_optimization/usememo_and_usecallback/UseMemo.js","components/performance_optimization/usememo_and_usecallback/UseCallback.js","components/performance_optimization/usememo_and_usecallback/KeyPoints.js","components/performance_optimization/usememo_and_usecallback/Summary.js","pages/performance_optimization/UseMemoAndUseCallbackPage.js"],"sourcesContent":["const UseMemoAndUseCallback = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"underline\">UseMemoAndUseCallback</h1>\r\n      <p>\r\n        In React, 'useMemo' and 'useCallback' are used for performance optimization \r\n        by controlling when expensive functions are re-computed or re-created.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UseMemoAndUseCallback;","import React, { useMemo } from 'react';\r\n\r\nfunction ExpensiveComponent({ items = [] }) {\r\n  console.log('ExpensiveComponent rendering...');\r\n\r\n  const computedValue = useMemo(() => {\r\n    console.log('Calculating total value...');\r\n    return items.reduce((sum, item) => sum + item.value, 0);\r\n  }, [items]);\r\n\r\n  console.log('Current computedValue:', computedValue);\r\n\r\n  return (\r\n    <div className=\"output\">\r\n      <h1>Total Value: {computedValue}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpensiveComponent;","import React, { useState } from 'react';\r\nimport ExpensiveComponent from './ExpensiveComponent';\r\nimport './../../../button.css';\r\n\r\nfunction UseMemo() {\r\n  const [items, setItems] = useState([\r\n    { value: 10 },\r\n    { value: 20 },\r\n    { value: 30 },\r\n  ]);\r\n\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>useMemo</h2>\r\n      <p>\r\n        useMemo helps remember the output of a function to avoid recalculating it on every render.\r\n        It is ideal for expensive calculations that should only run when certain dependencies change,\r\n        making the app faster and more efficient.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// ExpensiveComponent.js\r\nimport React, { useMemo } from 'react';\r\n\r\nfunction ExpensiveComponent({ items = [] }) {\r\n  console.log('ExpensiveComponent rendering...');\r\n\r\n  const computedValue = useMemo(() => {\r\n    console.log('Calculating total value...');\r\n    return items.reduce((sum, item) => sum + item.value, 0);\r\n  }, [items]);\r\n\r\n  console.log('Current computedValue:', computedValue);\r\n\r\n  return (\r\n    <div className=\"output\">\r\n      <h1>Total Value: {computedValue}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpensiveComponent;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// UseMemo.js\r\nimport React, { useState } from 'react';\r\nimport ExpensiveComponent from './ExpensiveComponent';\r\nimport './../../../button.css';\r\n\r\nfunction UseMemo() {\r\n  const [items, setItems] = useState([\r\n    { value: 10 },\r\n    { value: 20 },\r\n    { value: 30 },\r\n  ]);\r\n\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={() => setItems([...items, { value: 40 }])}>\r\n        Add Item (value: 40)\r\n      </button>\r\n      <ExpensiveComponent items={items} />\r\n      <br/>\r\n      <button type=\"button\" onClick={() => setCount(count + 1)}>\r\n        Force Re-render\r\n      </button>\r\n      <h1 className=\"output\">Forced Re-render Count: {count}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UseMemo;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      <button type=\"button\" onClick={() => setItems([...items, { value: 40 }])}>\r\n        Add Item (value: 40)\r\n      </button>\r\n      <ExpensiveComponent items={items} />\r\n      <br/>\r\n      <button type=\"button\" onClick={() => setCount(count + 1)}>\r\n        Force Re-render\r\n      </button>\r\n      <h1 className=\"output\">Forced Re-render Count: {count}</h1>\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n\r\n      <p>\r\n        In this example, useMemo helps React remember the total value of a list of items.\r\n        It only recalculates the total when the list changes.\r\n        If the component re-renders but the list stays the same, useMemo skips the calculation,\r\n        making the app faster and more efficient.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UseMemo;\r\n","import React, { useCallback } from 'react';\r\nimport './../../../button.css';\r\n\r\nfunction UseCallback() {\r\n  console.log(\"ParentComponent rendered\");\r\n\r\n  // Memoize the handleClick function to prevent it from being recreated on each render\r\n  const handleClick = useCallback(() => {\r\n    console.log(\"Button clicked!\");\r\n  }, []); // No dependencies, so function is created only once\r\n\r\n  // Pass the memoized handleClick function as a prop to ChildComponent\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>useCallback</h2>\r\n      <p>\r\n        useCallback is a React hook that keeps a function from being recreated on each render.\r\n        It's helpful when passing functions as props to child components,\r\n        as it prevents unnecessary re-renders and improves performance.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// UseCallback.js\r\nimport React, { useCallback } from 'react';\r\nimport './../../../button.css';\r\n\r\nfunction UseCallback() {\r\n  console.log(\"ParentComponent rendered\");\r\n\r\n  const handleClick = useCallback(() => {\r\n    console.log(\"Button clicked!\");\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <ChildComponent onClick={handleClick} />;\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ChildComponent({ onClick }) {\r\n  console.log(\"ChildComponent rendered\");\r\n  return <button type=\"button\" onClick={onClick}>Click Me</button>;\r\n}\r\n\r\nexport default UseCallback;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      <ChildComponent onClick={handleClick} />;\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n\r\n      <p>\r\n        In this example,\r\n        useCallback keeps the handleClick function from being recreated on every render.\r\n        This prevents unnecessary re-renders of the 'ChildComponent'.\r\n        The console logs show when the components render and when the button is clicked,\r\n        showing how useCallback helps improve performance.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ChildComponent({ onClick }) {\r\n  console.log(\"ChildComponent rendered\");\r\n  return <button type=\"button\" onClick={onClick}>Click Me</button>;\r\n}\r\n\r\nexport default UseCallback;","const KeyPoints = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Key Points</h2>\r\n            <h3>useMemo</h3>\r\n            <p>Used for caching values. It helps optimize performance by memorizing the result of a calculation and only recalculating when its dependencies change.</p>\r\n\r\n            <h3>useCallback</h3>\r\n            <p>Used for caching function references. It prevents unnecessary re-creations of functions, which can help reduce unnecessary re-renders in child components.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default KeyPoints;","const Summary = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Summary</h2>\r\n            <p>\r\n                Both are handy for optimizing renders in large apps or components with costly calculations. \r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Summary;","import {\r\n  UseMemoAndUseCallback,\r\n  UseMemo,\r\n  UseCallback,\r\n  KeyPoints,\r\n  Summary\r\n} from '../../components/performance_optimization/usememo_and_usecallback';\r\n\r\nconst UseMemoAndUseCallbackPage = () => {\r\n  return (\r\n    <>\r\n      <UseMemoAndUseCallback />\r\n      <UseMemo />\r\n      <UseCallback />\r\n      <KeyPoints />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UseMemoAndUseCallbackPage;"],"names":["UseMemoAndUseCallback","_jsxs","children","_jsx","className","_ref","items","console","log","computedValue","useMemo","reduce","sum","item","value","setItems","useState","count","setCount","type","onClick","ExpensiveComponent","ChildComponent","handleClick","useCallback","KeyPoints","Summary","UseMemoAndUseCallbackPage","_Fragment","UseMemo","UseCallback"],"sourceRoot":""}