{"version":3,"file":"static/js/266.16e31547.chunk.js","mappings":"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","sources":["components/api_interaction/error_handling_and_loading_states/ErrorHandlingAndLoadingStates.js","components/api_interaction/error_handling_and_loading_states/LoadingSpinner.js","components/api_interaction/error_handling_and_loading_states/DataContent.js","components/api_interaction/error_handling_and_loading_states/LoadingState.js","components/api_interaction/error_handling_and_loading_states/ErrorMessage.js","components/api_interaction/error_handling_and_loading_states/ErrorHandling.js","components/api_interaction/error_handling_and_loading_states/CombineLoadingAndErrorStates.js","components/api_interaction/error_handling_and_loading_states/UserFriendlyElements.js","components/api_interaction/error_handling_and_loading_states/Summary.js","pages/api_interaction/ErrorHandlingAndLoadingStatesPage.js"],"sourcesContent":["const ErrorHandlingAndLoadingStates = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"underline\">Error Handling And Loading States</h1>\r\n      <p>\r\n        To implement error handling and loading states effectively during API interactions,\r\n        here are the main approaches you might consider, especially in React.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorHandlingAndLoadingStates;","const LoadingSpinner = () => {\r\n  return (\r\n    // Container div styled to center its content vertically and horizontally\r\n    <div style={styles.spinnerContainer}>\r\n      {/* Spinner element with animated rotation */}\r\n      <div style={styles.spinner}></div>\r\n      <p>Loading...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Define styles for the spinner and its container\r\nconst styles = {\r\n  spinnerContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: '2.5rem',\r\n  },\r\n  spinner: {\r\n    marginLeft: '1rem',\r\n    width: '2.5rem',\r\n    height: '2.5rem',\r\n    border: '0.25rem solid #ccc',\r\n    borderTop: '0.25rem solid #007bff',\r\n    borderRadius: '50%',\r\n    animation: 'spin 1s linear infinite',\r\n  },\r\n};\r\n\r\n// Insert the keyframes for the spinning animation into the first stylesheet\r\nconst styleSheet = document.styleSheets[0];\r\nconst keyframes =\r\n`@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}`;\r\nstyleSheet.insertRule(keyframes, styleSheet.cssRules.length);\r\n\r\nexport default LoadingSpinner;","const DataContent = () => {\r\n  return (\r\n    // Container div with centered text and padding\r\n    <div style={{ textAlign: 'center', padding: '20px' }}>\r\n      <h2>Data Successfully Loaded!</h2>\r\n      <p>This is the content you see after loading finishes.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataContent;","// Import necessary hooks and components\r\nimport { useEffect, useState } from 'react';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport DataContent from './DataContent';\r\n\r\n// Simulated API call\r\nconst fetchData = () => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve('Data fetched');\r\n    }, 2000); // Simulate 2 seconds delay\r\n  });\r\n};\r\n\r\n// Define the LoadingState component\r\nconst LoadingState = () => {\r\n  // State to track loading status\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // useEffect runs when the component mounts\r\n  useEffect(() => {\r\n    // Set loading to true when starting\r\n    setLoading(true);\r\n\r\n    // Call the simulated fetchData function\r\n    fetchData()\r\n      .then(() => setLoading(false)) // When data is fetched, set loading to false\r\n      .catch(() => setLoading(false)); // If there's an error, also stop loading\r\n  }, []); // Empty dependency array means this runs only once\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Loading State</h2>\r\n      <p>\r\n        Feedback is given to the user during data fetching\r\n        by displaying a loading spinner or placeholder.\r\n      </p>\r\n      <p>\r\n        A loading state variable controls whether the spinner or actual content is shown,\r\n        updating once the fetch is complete.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// LoadingSpinner.js\r\nconst LoadingSpinner = () => {\r\n  return (\r\n    <div style={styles.spinnerContainer}>\r\n      <div style={styles.spinner}></div>\r\n      <p>Loading...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  spinnerContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: '2.5rem',\r\n  },\r\n  spinner: {\r\n    marginLeft: '1rem',\r\n    width: '2.5rem',\r\n    height: '2.5rem',\r\n    border: '0.25rem solid #ccc',\r\n    borderTop: '0.25rem solid #007bff',\r\n    borderRadius: '50%',\r\n    animation: 'spin 1s linear infinite',\r\n  },\r\n};\r\n\r\nconst styleSheet = document.styleSheets[0];\r\nconst keyframes =\r\n\\`@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\\`;\r\nstyleSheet.insertRule(keyframes, styleSheet.cssRules.length);\r\n\r\nexport default LoadingSpinner;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// DataContent.js\r\nconst DataContent = () => {\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '20px' }}>\r\n      <h2>Data Successfully Loaded!</h2>\r\n      <p>This is the content you see after loading finishes.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataContent;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// LoadingState.js\r\nimport { useEffect, useState } from 'react';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport DataContent from './DataContent';\r\n\r\nconst fetchData = () => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve('Data fetched');\r\n    }, 2000); // Simulate 2 seconds delay\r\n  });\r\n};\r\n\r\nconst LoadingState = () => {\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n    fetchData()\r\n      .then(() => setLoading(false))\r\n      .catch(() => setLoading(false));\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div>\r\n      {loading ? <LoadingSpinner /> : <DataContent />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingState;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      {/* Show spinner while loading, show content when done */}\r\n      {loading ? <LoadingSpinner /> : <DataContent />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingState;","const ErrorMessage = ({ message, onRetry }) => {\r\n  return (\r\n    <div style={styles.errorContainer}>\r\n      <h2 style={styles.errorText}>Oops! Something went wrong.</h2>\r\n      <p style={styles.errorDetails}>{message}</p>\r\n      <button type=\"button\" style={styles.retryButton} onClick={onRetry}>Retry</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  errorContainer: {\r\n    textAlign: 'center',\r\n    padding: '1.25rem',\r\n    backgroundColor: '#f1f1f1', \r\n    borderRadius: '0.3125rem',\r\n    color: '#333', \r\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\r\n  },\r\n  errorText: {\r\n    fontSize: '1.125rem',\r\n    fontWeight: 'bold',\r\n    color: '#e53935',\r\n  },\r\n  errorDetails: {\r\n    marginBottom: '1.25rem',\r\n    color: '#666',\r\n  },\r\n  retryButton: {\r\n    padding: '0.625rem 1.25rem',\r\n    backgroundColor: '#007bff',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '0.3125rem',\r\n    cursor: 'pointer',\r\n    transition: 'background-color 0.3s',\r\n  },\r\n};\r\n\r\nstyles.retryButton[':hover'] = {\r\n  backgroundColor: '#0056b3',\r\n};\r\n\r\nexport default ErrorMessage;","import React, { useState, useEffect } from 'react';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport DataContent from './DataContent';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nconst ErrorHandling = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [data, setData] = useState(null);\r\n\r\n  // Fetch data from API and handle errors\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch('https://invalid-url.com/');\r\n      if (!response.ok) throw new Error('Failed to fetch data');\r\n      \r\n      const data = await response.json();\r\n      setData(data);\r\n    } catch (err) {\r\n      setError(err.message); // Store error message\r\n    } finally {\r\n      setLoading(false); // Stop loading spinner\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData(); // Fetch data when the component mounts\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Error Handling</h2>\r\n      <p>\r\n        Gracefully handling errors improves the user experience\r\n        by providing clear messages when something goes wrong.\r\n        Using an error state variable allows you to track issues\r\n        and show helpful feedback.\r\n      </p>\r\n      <p>\r\n        When an error occurs, you can display a message and offer a retry option.\r\n        This helps users understand the issue and gives them a chance to fix it,\r\n        making the app more user-friendly.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// ErrorMessage.js\r\nconst ErrorMessage = ({ message, onRetry }) => {\r\n  return (\r\n    <div style={styles.errorContainer}>\r\n      <h2 style={styles.errorText}>Oops! Something went wrong.</h2>\r\n      <p style={styles.errorDetails}>{message}</p>\r\n      <button type=\"button\" style={styles.retryButton} onClick={onRetry}>Retry</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  errorContainer: {\r\n    textAlign: 'center',\r\n    padding: '1.25rem',\r\n    backgroundColor: '#f1f1f1', \r\n    borderRadius: '0.3125rem',\r\n    color: '#333', \r\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\r\n  },\r\n  errorText: {\r\n    fontSize: '1.125rem',\r\n    fontWeight: 'bold',\r\n    color: '#e53935',\r\n  },\r\n  errorDetails: {\r\n    marginBottom: '1.25rem',\r\n    color: '#666',\r\n  },\r\n  retryButton: {\r\n    padding: '0.625rem 1.25rem',\r\n    backgroundColor: '#007bff',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '0.3125rem',\r\n    cursor: 'pointer',\r\n    transition: 'background-color 0.3s',\r\n  },\r\n};\r\n\r\nstyles.retryButton[':hover'] = {\r\n  backgroundColor: '#0056b3',\r\n};\r\n\r\nexport default ErrorMessage;\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// ErrorHandling.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport DataContent from './DataContent';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nconst ErrorHandling = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [data, setData] = useState(null);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch('https://invalid-url.com/');\r\n      if (!response.ok) throw new Error('Failed to fetch data');\r\n      \r\n      const data = await response.json();\r\n      setData(data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n          <LoadingSpinner />\r\n      ) : error ? (\r\n          <ErrorMessage message={error} onRetry={fetchData} />\r\n      ) : (\r\n          <DataContent data={data} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorHandling;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h3>Output:</h3>\r\n      {loading ? (\r\n          <LoadingSpinner /> // Show loading spinner while data is being fetched\r\n      ) : error ? (\r\n          <ErrorMessage message={error} onRetry={fetchData} /> // Show error message if fetch fails\r\n      ) : (\r\n          <DataContent data={data} /> // Show data if fetch succeeds\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorHandling;","const CombineLoadingAndErrorStates = () => {\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Combine Loading and Error States</h2>\r\n      <p>\r\n        The goal is to improve the user experience by showing only one state at a time,\r\n        making it clear whether the app is loading, has an error, or is ready to display content.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`return (\r\n  <div>\r\n    {loading && <LoadingSpinner />}\r\n\r\n    {error && <ErrorMessage message={error} onRetry={fetchData} />}\r\n\r\n    {!loading && !error && <DataContent />}\r\n  </div>\r\n);\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <p>\r\n        A loading spinner appears while the app fetches data.\r\n        If there's an error, a message is shown to inform the user.\r\n        Once the data is ready, the content is displayed.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CombineLoadingAndErrorStates;","const UserFriendlyElements = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>User-Friendly Elements</h2>\r\n            <h3>Loading Indicator</h3>\r\n            <p>A spinner or skeleton loader is helpful for loading states.</p>\r\n            <h3>Error Retry Option</h3>\r\n            <p>An option to retry the API call can improve usability, especially if the error could be transient.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserFriendlyElements;","const Summary = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Summary</h2>\r\n            <p>\r\n                This setup makes API interactions in React user-friendly and resilient,\r\n                addressing both the need for immediate feedback during loading and error handling if issues arise.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Summary;","import {\r\n  ErrorHandlingAndLoadingStates,\r\n  LoadingState,\r\n  ErrorHandling,\r\n  CombineLoadingAndErrorStates,\r\n  UserFriendlyElements,\r\n  Summary\r\n} from '../../components/api_interaction/error_handling_and_loading_states';\r\n\r\nconst ErrorHandlingAndLoadingStatesPage = () => {\r\n  return (\r\n    <>\r\n      <ErrorHandlingAndLoadingStates />\r\n      <LoadingState />\r\n      <ErrorHandling />\r\n      <CombineLoadingAndErrorStates />\r\n      <UserFriendlyElements />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorHandlingAndLoadingStatesPage;"],"names":["ErrorHandlingAndLoadingStates","_jsxs","children","_jsx","className","styles","spinnerContainer","display","flexDirection","alignItems","justifyContent","padding","spinner","marginLeft","width","height","border","borderTop","borderRadius","animation","styleSheet","document","styleSheets","insertRule","cssRules","length","LoadingSpinner","style","DataContent","textAlign","LoadingState","loading","setLoading","useState","useEffect","Promise","resolve","setTimeout","then","catch","errorContainer","backgroundColor","color","boxShadow","errorText","fontSize","fontWeight","errorDetails","marginBottom","retryButton","cursor","transition","_ref","message","onRetry","type","onClick","ErrorHandling","error","setError","data","setData","fetchData","async","response","fetch","ok","Error","json","err","ErrorMessage","CombineLoadingAndErrorStates","UserFriendlyElements","Summary","ErrorHandlingAndLoadingStatesPage","_Fragment"],"sourceRoot":""}