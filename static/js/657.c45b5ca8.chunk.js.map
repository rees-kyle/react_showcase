{"version":3,"file":"static/js/657.c45b5ca8.chunk.js","mappings":"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","sources":["components/api_interaction/fetching_data/FetchingData.js","api/fetchData.js","components/api_interaction/fetching_data/UsingFetch.js","components/api_interaction/fetching_data/UsingFetchAsyncAwait.js","api/fetchDataAsyncAwait.js","api/fetchDataAxios.js","components/api_interaction/fetching_data/UsingAxios.js","components/api_interaction/fetching_data/UsingAxiosAsyncAwait.js","api/fetchDataAxiosAsyncAwait.js","components/api_interaction/fetching_data/KeyDifferences.js","components/api_interaction/fetching_data/Summary.js","pages/api_interaction/FetchingDataPage.js"],"sourcesContent":["const FetchingData = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"underline\">Fetching Data</h1>\r\n      <p>\r\n        Fetching data from an API is a core skill in JavaScript and React projects.\r\n        Here’s a quick overview of how to do it with both 'fetch' and 'axios'.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FetchingData;","export const fetchData = () => {\r\n  fetch('https://jsonplaceholder.typicode.com/posts/1')  // Using a real API endpoint\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      console.log('Fetched data:', data);  // Logs the fetched data to console\r\n    })\r\n    .catch(error => {\r\n      console.error('There was a problem with the fetch operation:', error);\r\n    });\r\n};\r\n","import { useEffect } from 'react';\r\nimport { fetchData } from '../../../api/fetchData';\r\n\r\nconst UsingFetch = () => {\r\n  useEffect(() => {\r\n    fetchData(); // ✅ Calls API when component loads\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <br/>\r\n      <hr/>\r\n      <h2>Using 'fetch'</h2>\r\n      <p>The 'fetch' API is native to JavaScript and returns a 'Promise'.</p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// fetchData.js\r\nexport const fetchData = () => {\r\n  fetch('https://jsonplaceholder.typicode.com/posts/1')\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      console.log('Fetched data:', data);\r\n    })\r\n    .catch(error => {\r\n      console.error('There was a problem with the fetch operation:', error);\r\n    });\r\n};\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br/>\r\n      <pre>\r\n        <code>\r\n          {`// UsingFetch.js\r\nimport { useEffect } from 'react';\r\nimport { fetchData } from '../../../api/fetchData';\r\n\r\nconst UsingFetch = () => {\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsingFetch;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsingFetch;\r\n","import { useEffect } from 'react';\r\nimport { fetchDataAsyncAwait } from '../../../api/fetchDataAsyncAwait';\r\n\r\nconst UsingFetchAsyncAwait = () => {\r\n  useEffect(() => {\r\n    fetchDataAsyncAwait(); // ✅ Calls API when component loads\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <hr />\r\n      <h2>Using 'fetch' with Async/Await</h2>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// fetchDataAsyncAwait.js\r\nexport const fetchDataAsyncAwait = async () => {\r\n  try {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    console.log('Fetched data:', data);\r\n  } catch (error) {\r\n    console.error('There was a problem with the fetch operation:', error);\r\n  }\r\n};\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br />\r\n      <pre>\r\n        <code>\r\n          {`// UsingFetchAsyncAwait.js\r\nimport { useEffect } from 'react';\r\nimport { fetchDataAsyncAwait } from '../../../api/fetchDataAsyncAwait';\r\n\r\nconst UsingFetchAsyncAwait = () => {\r\n  useEffect(() => {\r\n    fetchDataAsyncAwait();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsingFetchAsyncAwait;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsingFetchAsyncAwait;\r\n","export const fetchDataAsyncAwait = async () => {\r\n  try {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    console.log('Fetched data:', data);\r\n  } catch (error) {\r\n    console.error('There was a problem with the fetch operation:', error);\r\n  }\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const fetchDataAxios = () => {\r\n  axios.get('https://jsonplaceholder.typicode.com/posts/1')\r\n    .then(response => {\r\n      console.log('Fetched data:', response.data); // Logs the fetched data to the console\r\n    })\r\n    .catch(error => {\r\n      console.error('There was a problem with the fetch operation:', error);\r\n    });\r\n};","import { useEffect } from 'react';\r\nimport { fetchDataAxios } from '../../../api/fetchDataAxios';\r\n\r\nconst UsingAxios = () => {\r\n  useEffect(() => {\r\n    fetchDataAxios(); // ✅ Calls API when component loads\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <hr />\r\n      <h2>Using 'Axios'</h2>\r\n      <p>\r\n        'axios' is a popular library for making HTTP requests.\r\n        It’s easier to use than 'fetch' in some ways\r\n        because it automatically transforms the response to JSON\r\n        and simplifies error handling.\r\n      </p>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`# Navigate to project directory and install axios in BASH if you haven't done so already\r\nnpm install axios\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br />\r\n      <pre>\r\n        <code>\r\n          {`// fetchDataAxios.js\r\nimport axios from 'axios';\r\n\r\nexport const fetchDataAxios = () => {\r\n  axios.get('https://jsonplaceholder.typicode.com/posts/1')\r\n    .then(response => {\r\n      console.log('Fetched data:', response.data);\r\n    })\r\n    .catch(error => {\r\n      console.error('There was a problem with the fetch operation:', error);\r\n    });\r\n};\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br />\r\n      <pre>\r\n        <code>\r\n          {`// UsingAxios.js\r\nimport { useEffect } from 'react';\r\nimport { fetchDataAxios } from '../../../api/fetchDataAxios';\r\n\r\nconst UsingAxios = () => {\r\n  useEffect(() => {\r\n    fetchDataAxios();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsingAxios;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsingAxios;","import { useEffect } from 'react';\r\nimport { fetchDataAxiosAsyncAwait } from '../../../api/fetchDataAxiosAsyncAwait';\r\n\r\nconst UsingAxiosAsyncAwait = () => {\r\n  useEffect(() => {\r\n    // Calls API with async/await when the component loads\r\n    const fetchData = async () => {\r\n      await fetchDataAxiosAsyncAwait();\r\n    };\r\n    fetchData(); // Calls the async function\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <hr />\r\n      <h2>Using 'Axios' with Async/Await</h2>\r\n\r\n      <h3>Code:</h3>\r\n      <pre>\r\n        <code>\r\n          {`// fetchDataAxiosAsyncAwait.js\r\nimport axios from 'axios';\r\n\r\nexport const fetchDataAxiosAsyncAwait = async () => {\r\n  try {\r\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts/1');\r\n    console.log('Fetched data:', response.data);\r\n  } catch (error) {\r\n    console.error('There was a problem with the fetch operation:', error);\r\n  }\r\n};\r\n`}\r\n        </code>\r\n      </pre>\r\n      <br />\r\n      <pre>\r\n        <code>\r\n          {`// UsingAxiosAsyncAwait.js\r\nimport { useEffect } from 'react';\r\nimport { fetchDataAxiosAsyncAwait } from '../../../api/fetchDataAxiosAsyncAwait';\r\n\r\nconst UsingAxiosAsyncAwait = () => {\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetchDataAxiosAsyncAwait();\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsingAxiosAsyncAwait;\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h1 className=\"output\">\r\n        You can use the browser’s developer tools (Inspect) to view console messages for this example.\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsingAxiosAsyncAwait;\r\n","import axios from 'axios';\r\n\r\nexport const fetchDataAxiosAsyncAwait = async () => {\r\n  try {\r\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts/1');\r\n    console.log('Fetched data:', response.data); // Logs the fetched data to the console\r\n  } catch (error) {\r\n    console.error('There was a problem with the fetch operation:', error);\r\n  }\r\n};\r\n","const KeyDifferences = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Key Differences</h2>\r\n            <h3>Error Handling</h3>\r\n            <p>'fetch' does not throw an error for HTTP errors (like '404' or '500'), whereas 'axios' does.</p>\r\n\r\n            <h3>Response Parsing</h3>\r\n            <p>'fetch' requires '.json()' to parse the response, while 'axios' automatically parses it for JSON responses.</p>\r\n\r\n            <h3>Interceptors</h3>\r\n            <p>'axios' supports interceptors to modify requests or responses globally, which is useful for handling authentication.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default KeyDifferences;","const Summary = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Summary</h2>\r\n            <p>\r\n                Both approaches work well, so choose based on your project’s needs and personal preference.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Summary;","import {\r\n  FetchingData,\r\n  UsingFetch,\r\n  UsingFetchAsyncAwait,\r\n  UsingAxios,\r\n  UsingAxiosAsyncAwait,\r\n  KeyDifferences,\r\n  Summary\r\n} from '../../components/api_interaction/fetching_data';\r\n\r\nconst FetchingDataPage = () => {\r\n  return (\r\n    <>\r\n      <FetchingData />\r\n      <UsingFetch />\r\n      <UsingFetchAsyncAwait />\r\n      <UsingAxios />\r\n      <UsingAxiosAsyncAwait />\r\n      <KeyDifferences />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FetchingDataPage;"],"names":["FetchingData","_jsxs","children","_jsx","className","UsingFetch","useEffect","fetch","then","response","ok","Error","json","data","console","log","catch","error","UsingFetchAsyncAwait","async","fetchDataAsyncAwait","UsingAxios","axios","get","UsingAxiosAsyncAwait","fetchDataAxiosAsyncAwait","fetchData","KeyDifferences","Summary","FetchingDataPage","_Fragment"],"sourceRoot":""}