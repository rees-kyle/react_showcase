{"version":3,"file":"static/js/973.1980879b.chunk.js","mappings":"4IAAA,MAaA,EAbmBA,KAEXC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWF,SAAC,gBAC1BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2NCiFf,EArFcG,KAENJ,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2DAEJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2FAIHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,QAAAD,SACK,mHASTC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oCACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+GAIHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,QAAAD,SACK,yXAoBTC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wCACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qGAIHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,QAAAD,SACK,we,gCCxDrB,MAoEA,EApEeI,KACb,MAAM,MAAEC,EAAK,SAAEC,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAEvCC,QAAQC,IAAI,wBAAyBL,GASrC,OACEN,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iEACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kGAIHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,QAAAD,SACG,2mBA8BLC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACHK,EAAMM,MACLZ,EAAAA,EAAAA,MAAA,MAAIG,UAAU,SAAQF,SAAA,CAAC,YAAUK,EAAMM,KAAKC,KAAK,QAEjDX,EAAAA,EAAAA,KAAA,UAAQY,QAnDIC,KAChBR,GAAUS,IAAS,IACdA,EACHJ,KAAM,CAAEC,KAAM,WAAYI,UAAU,MACnC,EA+C4BhB,SAAC,WAG9BC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6IAIC,ECvDV,EAbkBiB,KAEVlB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uFACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sGACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,8FCMf,EAdgBkB,KAERnB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+JCcf,EAZuBmB,KAEnBpB,EAAAA,EAAAA,MAAAqB,EAAAA,SAAA,CAAApB,SAAA,EACEC,EAAAA,EAAAA,KAACH,EAAU,KACXG,EAAAA,EAAAA,KAACE,EAAK,KACNF,EAAAA,EAAAA,KAACG,EAAM,KACPH,EAAAA,EAAAA,KAACgB,EAAS,KACVhB,EAAAA,EAAAA,KAACiB,EAAO,M","sources":["components/hooks/usecontext/UseContext.js","components/hooks/usecontext/Steps.js","components/hooks/usecontext/Access.js","components/hooks/usecontext/KeyPoints.js","components/hooks/usecontext/Summary.js","pages/hooks/UseContextPage.js"],"sourcesContent":["const UseContext = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"underline\">useContext</h1>\r\n            <p>\r\n                In React, 'useContext' is a powerful Hook for managing global state, \r\n                allowing data to be shared across different components without passing props down manually at each level.\r\n                Here's a breakdown of how to use it:\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UseContext;","const Steps = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Steps to Use 'useContext' for Global State Management</h2>\r\n\r\n            <h3>1. Create a Context</h3>\r\n            <p>\r\n                First, you need to create a Context. This serves as a container for the global state.\r\n            </p>\r\n\r\n            <h4>Code:</h4>\r\n            <pre>\r\n                <code>\r\n                    {`import { createContext } from 'react';\r\n\r\nconst Context = createContext(null);\r\n\r\nexport default Context;\r\n`}\r\n                </code>\r\n            </pre>\r\n\r\n            <h3>2. Create a Provider Component</h3>\r\n            <p>\r\n                A Provider component is responsible for passing the context value (global state) to the child components.\r\n            </p>\r\n\r\n            <h4>Code:</h4>\r\n            <pre>\r\n                <code>\r\n                    {`import { useState } from 'react';\r\nimport Context from './Context';\r\n\r\nconst ProviderComponent = ({ children }) => {\r\n    const [state, setState] = useState({\r\n        user: null,\r\n    });\r\n\r\n    return (\r\n        <Context.Provider value={{ state, setState }}>\r\n            {children}\r\n        </Context.Provider>\r\n    );\r\n};\r\n\r\nexport { ProviderComponent, Context };\r\n`}\r\n                </code>\r\n            </pre>\r\n\r\n            <h3>3. Wrap Your App with the Provider</h3>\r\n            <p>\r\n                To make the global state available throughout your app, wrap your app in the ProviderComponent.\r\n            </p>\r\n\r\n            <h4>Code:</h4>\r\n            <pre>\r\n                <code>\r\n                    {`import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ProviderComponent } from './components/hooks/usecontext/ProviderComponent';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\nroot.render(\r\n  <React.StrictMode>\r\n    <ProviderComponent>\r\n      <App />\r\n    </ProviderComponent>\r\n  </React.StrictMode>\r\n);\r\n\r\nreportWebVitals();\r\n`}\r\n                </code>\r\n            </pre>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Steps;","import { useContext } from 'react';\r\nimport { Context } from './ProviderComponent';\r\nimport './../../../button.css';\r\n\r\nconst Access = () => {\r\n  const { state, setState } = useContext(Context);\r\n\r\n  console.log(\"Current Global State:\", state); // Log the global state\r\n\r\n  const loginUser = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      user: { name: 'John Doe', loggedIn: true },\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>4. Access the Global State in Components Using 'useContext'</h3>\r\n      <p>\r\n        Now, in any component, you can access and modify the global state using the useContext Hook.\r\n      </p>\r\n\r\n      <h4>Code:</h4>\r\n      <pre>\r\n        <code>\r\n          {`import { useContext } from 'react';\r\nimport { Context } from './ProviderComponent';\r\nimport './../../../button.css';\r\n\r\nconst Access = () => {\r\n  const { state, setState } = useContext(Context);\r\n\r\n  console.log(\"Current Global State:\", state);\r\n\r\n  const loginUser = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      user: { name: 'John Doe', loggedIn: true },\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {state.user ? (\r\n        <h1 className=\"output\">Welcome, {state.user.name}!</h1>\r\n      ) : (\r\n        <button onClick={loginUser}>Login</button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n`}\r\n        </code>\r\n      </pre>\r\n\r\n      <h4>Output:</h4>\r\n      {state.user ? (\r\n        <h1 className=\"output\">Welcome, {state.user.name}!</h1>\r\n      ) : (\r\n        <button onClick={loginUser}>Login</button>\r\n      )}\r\n\r\n      <br/>\r\n      <p>\r\n        You can open the browser console to check if 'Current Global State:' shows the expected state,\r\n        and click 'Login' to verify the update.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Access;\r\n","const KeyPoints = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Key Points</h2>\r\n            <p>Context stores global data and makes it accessible throughout the component tree.</p>\r\n            <p>The Provider distributes the context to child components, ensuring they receive the shared data.</p>\r\n            <p>The useContext hook consumes the global data in any component that needs access to it.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default KeyPoints;","const Summary = () => {\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <hr/>\r\n            <h2>Summary</h2>\r\n            <p>\r\n                This method eliminates the need for prop drilling and is perfect for managing application-wide state like authentication,\r\n                themes, and user preferences.\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Summary;","import {\r\n  UseContext,\r\n  Steps,\r\n  Access,\r\n  KeyPoints,\r\n  Summary\r\n} from '../../components/hooks/usecontext';\r\n\r\nconst UseContextPage = () => {\r\n  return (\r\n    <>\r\n      <UseContext />\r\n      <Steps />\r\n      <Access />\r\n      <KeyPoints />\r\n      <Summary />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UseContextPage;"],"names":["UseContext","_jsxs","children","_jsx","className","Steps","Access","state","setState","useContext","Context","console","log","user","name","onClick","loginUser","prevState","loggedIn","KeyPoints","Summary","UseContextPage","_Fragment"],"sourceRoot":""}